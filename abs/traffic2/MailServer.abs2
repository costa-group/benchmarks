module MailServer;
import * from ABS.StdLib;

type UserName = String ;
type Message = String;


   
def B mylookup<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => y;
     // InsertAssoc(_, tm) => lookup(tm, k);
     // Rewritten for aPET (to avoid having fresh vars in the nomatch not present in the match)
     InsertAssoc(Pair(_, _), tm) => mylookup(tm, k);
  };

def Map<A, B> myput<A, B>(Map<A, B> ms, A k, B v) =
  case ms {
    EmptyMap => InsertAssoc(Pair(k, v),EmptyMap);
    InsertAssoc(Pair(k, _), ts) => InsertAssoc(Pair(k, v), ts);
    InsertAssoc(p, ts) => InsertAssoc(p, myput(ts, k, v));
  };

interface AddressBook {
      User getUserAddress(UserName u);
      Unit addUser(UserName uname,User u);
}

class AddressBookImp implements AddressBook {
	Map<UserName,User> users = EmptyMap;

	[users <= max(users)]
	User getUserAddress(UserName u){
		return mylookup(users,u);
	}

	[users <= max(users)]
	Unit addUser(UserName uname,User u){
		users = myput(users,uname,u);
	}
}

interface User {
     Unit receive(Message msg);
}

class UserImp implements User {
      List<Message> msgs = Nil;

      Unit receive(Message msg) {
         msgs = Cons(msg,msgs);
      }
}


interface MailServer {
      Unit addUser(UserName uname,User u);
      Unit notify(Message m);
}

class MailServerImp(AddressBook ab) implements MailServer {

	List<UserName> listUsers = Nil;
      
	Unit addUser(UserName uname,User u) {
        listUsers = Cons(uname, listUsers);
		ab!addUser(uname,u);
    }
      
	[listUsers <= max(listUsers)]
	Unit notify(Message m) {
		Fut<User> u; User us;
		List<UserName> listUsersAux = list(listUsers);
		List<UserName> listUsersAux2 = Nil; 
        while ( listUsersAux != Nil ) {
            u = ab ! getUserAddress( head(listUsersAux) );
            [old(listUsersAux) == listUsersAux]
            await u?;
            us = u.get;
            us!receive(m);
            listUsersAux2 = tail(listUsersAux);
            listUsersAux = listUsersAux2;
        }
      }
}

interface IMain {
	Unit main(Int nUsers, List<Message> mssg, Int nmsgs);
}

class Main () implements IMain	{
	Unit main(Int nUsers, List<Message> mssg, Int nmsgs) {
		AddressBook ab= new AddressBookImp();
		MailServer ms = new MailServerImp(ab);
		while(nUsers > 0) {		
			User u = new UserImp();
			ms ! addUser("User",u);
			nUsers = nUsers - 1;	  
		}
		while (mssg != Nil){
			ms.notify(head(mssg));
			mssg=tail(mssg);
		}
	}
		 
}

class C {
	Unit m (Int nUsers, List<Message> mssg, Int nmsgs) {
		IMain main1  = new Main (); 
		IMain main2  = new Main ();
		IMain main3  = new Main ();
		
		main1.main(nUsers, mssg,nmsgs);
		main2.main(nUsers, mssg,nmsgs);
		main3.main(nUsers, mssg,nmsgs);
	}	
}
