//$id: Peertopeer.abs 5108 2010-07-17 20:14:12Z jschaefer $ 

module PeerToPeer;

//type synonyms  

type Filename = String ;
type Filenames = Set<String> ;
type Packet = String ;
type File = List<Packet> ;
type Catalog = List<Pair<Peer, Filenames> > ;


def B mylookup<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => y;
     // InsertAssoc(_, tm) => lookup(tm, k);
     // Rewritten for aPET (to avoid having fresh vars in the nomatch not present in the match)
     InsertAssoc(Pair(_, _), tm) => mylookup(tm, k);
  };

 
// Application functions
def Peer findServer(Filename file, Catalog catalog) =
case catalog {
    Nil => null;
    Cons(Pair(server, files), rest) =>
    case contains(files, file) { True => server;
        False => findServer(file, rest); };
    };
    
interface Server {
    Filenames enquire();
    Int getLength(Filename fId);
    Packet getPack(Filename fId, Int pNbr);
}


interface Peer extends Client, Server { 
    Unit setAdmin(Network admin);
    Unit run2();
}

interface Network {
	Unit addNode (Peer node, List<Peer> neighbors);
    List<Peer> getNeighbors(Peer caller);
}

interface DataBase {
    File getFile(Filename fId);
    Int getLength(Filename fId);
    Unit storeFile(Filename fId, File file);
    Filenames listFiles();
}

interface Client {
    Unit reqFile(Server sId, Filename fId);
}

class DataBaseImpl(Map<Filename, File> dbT) implements DataBase {

	[dbT <= max(dbT)]
	File getFile(Filename fId) {
		Int method_end = 0;
		return mylookup(dbT, fId);
	}

	[dbT <= max(dbT)]
	Int getLength(Filename fId) {
		Int method_end = 0;
		return length(mylookup(dbT,fId));
	}

	[file <= max(file)]
	Unit storeFile(Filename fId, File file) {
		dbT = InsertAssoc(Pair(fId,file), dbT);
		Int method_end = 0;
	} 

	[dbT <= max(dbT)]
	Filenames listFiles() {
		Int method_end = 0;
		return keys(dbT);
	}
}

class Node(DataBase db, Filename file) implements Peer {
  Catalog catalog = Nil;
  List<Peer> myNeighbors = Nil;
  Network admin = null;
  File filef = Nil;
  
  [myNeighbors <= max(myNeighbors)]
  Unit run2() {
    
		Fut<Catalog> c ; 
		Fut<List<Peer>> f;
		Server server ; 
		await admin != null;
		f = admin!getNeighbors(this);   // Asynchronous call to admin
		[f <= max(myNeighbors)][old(myNeighbors) == myNeighbors]
		await f?;
		myNeighbors = f.get;
		c = this!availFiles(myNeighbors); // Asynchronous call
		[c <= max(myNeighbors)][file <= max(file)][file >= 0]
		await c?;               // Allow other peers to call in the meantime
		catalog = c.get;        // Build the catalog
		server = findServer(file, catalog); // Find the server for the requested file
		if (server != null) {
		  this.reqFile(server,file) ;        // Download file
		}
		Int method_end = 0;
  }

  Unit setAdmin(Network admin) {
    this.admin = admin;
  }

  Filenames enquire() { 
		Fut<Filenames> f ;  
		f = db!listFiles();
		await f?;
		Int method_end = 0;
		return f.get;
  }
    
  [io(Node.getLength(fId) <= fId)][fId <= max(fId)]
	Int getLength(Filename fId) {
		Fut<Int> length ; 
		length = db!getLength(fId);
		await length?;
		Int method_end = 0;
		return length.get;
	}

  [fId <= max(fId)]
  Packet getPack(Filename fId, Int pNbr) {
		File f = Nil;
		Fut<File> ff;
		ff = db!getFile(fId);
		await ff?;
		f = ff.get;
		Int method_end = 0;
		return nth(f, pNbr);
  }

  [io(Node.availFiles(sList) <= sList)]
	Catalog availFiles (List<Peer> sList) {
		Catalog cat = Nil;		Filenames fNames = EmptySet; 
		Fut<Filenames> fN;
		Catalog catList = Nil; 
		Fut<Catalog> cL;

		if (sList != Nil) {
			fN = head(sList)!enquire();
		    List<Peer> pp = tail(sList);
			cL = this!availFiles(pp);
			[cL <= max(myNeighbors)]
			await fN? & cL?;
			catList = cL.get;
			fNames = fN.get;
			cat = appendright(catList, Pair(head(sList), fNames)); 
		}
		Int method_end = 0;
		return cat; 
	}
  

    [lth <= max(lth)][db <= max(db)][filef <= max(filef)][fileff <= lth]
	Unit reqFile(Server sId, Filename fId) {
		File file = Nil;
		Packet pack = "";
		Int lth = 0;
		Fut<Int> l1;
		Fut<Packet> l2;
		
		File fileff = Nil;
	
		l1 = sId!getLength(fId);
		await l1?;
		lth = l1.get; 
		while (lth > 0) {
		    lth = lth - 1;            // indexing is zero-based
		    l2 = sId!getPack(fId, lth);
		    [db <= max(db)][lth <= max(lth)][filef <= max(filef)]
		    await l2?;
		    pack = l2.get ;
		    //file = Cons(pack, file); 
   	        filef = Cons(pack, filef);
		    fileff = filef;
		} 
		db!storeFile(fId, fileff);
		Int method_end = 0;
    }
    
}

class OurTopology(Peer node0, Peer node1, Peer node2, Peer node3)
implements Network
{
    List<Peer> getNeighbors(Peer caller) {
		List<Peer> res = Nil;
		if (caller == node0) { res = list[node1, node2]; }
		if (caller == node1) { res = list[node3]; }
		if (caller == node2) { res = list[node0, node1, node3]; }
		if (caller == node3) { res = list[node0, node2]; }
		Int method_end = 0;
		return res;
    }
    Unit addNode (Peer node, List<Peer> neighbors) {
    	Int method_end = 0;
    }
}

/*class GenericTopology(Map<Peer,List<Peer>> nodes) implements Network
{
	Unit addNode (Peer node, List<Peer> neighbors) {
		nodes = InsertAssoc(Pair(node,neighbors), nodes);
		Int method_end = 0;
	}
	
	[nodes < max(nodes)]
    List<Peer> getNeighbors(Peer caller) {
    	List<Peer> p = mylookup(nodes,caller);
    	Int method_end = 0;
		return p;
    }
}
*/
class Main {

	Unit main (Int nruns) {
	    DataBase db0 = new DataBaseImpl(map[Pair("file0", list["file", "from", "db0"])]);
	    DataBase db1 = new DataBaseImpl(map[Pair("file1", list["file", "from", "db1"])]);
	    DataBase db2 = new DataBaseImpl(map[Pair("file2", list["file", "from", "db2"])]);
	    Peer node0 = new Node(db0, "file2");
	    Peer node1 = new Node(db1, "file2");
	    Peer node2 = new Node(db2, "file0");
	    Peer node3 = new Node(db2, "file1");
	    
	    Network admin = new OurTopology(node0, node1, node2, node3);
	    node0!setAdmin(admin);
	    node1!setAdmin(admin);
	    node2!setAdmin(admin);
	    node3!setAdmin(admin);
	    Int i=0;
	    while (i<nruns) {
			node0.run2();
			node1.run2();
			node2.run2();
			node3.run2();
			i=i+1;
	    }
	    Int method_end = 0;
	}
	/*	Unit main(Int nruns, Int nnodes) {
	    Network admin = new GenericTopology(EmptyMap);
	
		while(nnodes > 0) {
		    DataBase db0 = new DataBaseImpl(map[Pair("file0", list["file", "from", "db0"])]);
		  
			Peer node0 = new Node(db0, "file2");
			admin.addNode(node0,list[node0]);
			node0!setAdmin(admin);
			while (nruns > 0) {
				node0.run2();
				nruns = nruns-1;
	   		}	
			nnodes = nnodes - 1;
		}
	}
*/	
}	

{
	    DataBase db0 = new DataBaseImpl(map[Pair("file0", list["file", "from", "db0"])]);
	    DataBase db1 = new DataBaseImpl(map[Pair("file1", list["file", "from", "db1"])]);
	    DataBase db2 = new DataBaseImpl(map[Pair("file2", list["file", "from", "db2"])]);
	    Peer node0 = new Node(db0, "file2");
	    Peer node1 = new Node(db1, "file2");
	    Peer node2 = new Node(db2, "file0");
	    Peer node3 = new Node(db2, "file1");
	    
	    Network admin = new OurTopology(node0, node1, node2, node3);
	    node0!setAdmin(admin);
	    Network admin2 = admin;
	    node1!setAdmin(admin2);
	    node2!setAdmin(admin);
	    node3!setAdmin(admin);
	    Int i=0;
	    while (i<10) {
			node0.run2();
			node1.run2();
			node2.run2();
			node3.run2();
			i=i+1;
	    }
}
