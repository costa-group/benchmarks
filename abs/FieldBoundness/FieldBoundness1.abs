module FieldBoundness1;

data List<A> = Nil | Cons(A, List<A>);

type ListInt = List<Int> ;

def Int increment(Int i) =
  case i>10 {
    True => i-1;
    False => i;
   };

def Int size1(ListInt i) =
  case i {
     Nil => 0;
    Cons(_,a) => 1+size1(a);
   };

def Bool hasNext1(ListInt i) = case i {
    Nil => False;
    Cons(_,_) => True;
};

interface A {
  Int normal_loop();
  Int loop_with_functs();
  Int loop_with_recursive_functs();

}


class A1(Int normal, ListInt with_functs,ListInt with_recursive_functs) implements A {
     
//Success
 Int normal_loop() {
while(normal>0)
	normal=normal-1;
return 0;
}

//Success
 Int loop_with_functs() {
 ListInt aux=with_functs;
  while (hasNext1(with_functs)){
	with_functs=tail(with_functs);
	
    }
  with_functs=aux;
  while (hasNext1(with_functs)){
	if(hasNext1(with_functs))
		with_functs=tail(with_functs);
	
    }
return 0;
}

//Success
 Int loop_with_recursive_functs() {
  Int n=1;
while (n>0){
	if(hasNext1(with_recursive_functs))
		with_recursive_functs=tail(with_recursive_functs);
	n=size1(with_recursive_functs);
    }

return 0;
}
}

{
  A x;

  ListInt a=Cons(1,Cons(2,Cons(3,Nil)));
  ListInt b=Cons(1,Cons(2,Cons(3,Nil)));
  x = new local A1(100,a,b);
  x!normal_loop();
  x!loop_with_functs();
  x!loop_with_recursive_functs();

}
