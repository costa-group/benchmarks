module SampleWebserver;
import * from ABS.StdLib;


interface Database {
    Unit query();
}

interface Webworker {
    String processRequest();
}

interface Loadbalancer {
    String processRequest();
//    Unit run();	
}

interface ClientInt {
    Unit run();    
}


class Database implements Database {
    Unit query() {
        skip;
    }
}

class Webworker(Database db) implements Webworker {
    String processRequest() {
    	Fut<Unit> f;
        f = db!query();
	await f?;
        return "Result";
    }
}

class Loadbalancer(Int nWorkers, Database db) implements Loadbalancer {
    List<Webworker> workers = Nil;

//    Unit run() {
    {
        Int i = 0; 
	Webworker w;
	i = 0;
          while (i < nWorkers) {
            w = new Webworker(db);
            workers = Cons(w, workers);
            i = i + 1;
        }
    }

    String processRequest() {
        Webworker w; 
	String result = ""; Fut<String> fResult;
	//Int l = 0;
	//l = length(workers);
        await (workers != Nil);
        w = head(workers);
        workers = tail(workers);
        fResult = w!processRequest();
	await fResult?; result = fResult.get;
        workers = appendright(workers, w);
        return result;
    }
}


class Client (Loadbalancer lb,Int n) implements ClientInt{
    Unit run() {
        Int i = 0;
	String s = ""; Fut<String> fS; 
	i = 0;
        while (i < n) {
            fS = lb!processRequest();
	    await fS?; s = fS.get;
            //println(s + " at " + toString(now()));
            i = i+1;
        }
    }
}

{
    Database db = new Database();
    Loadbalancer lb = new Loadbalancer(2, db);
    //lb!run();
    ClientInt cl1 = new Client(lb,2);
    ClientInt cl2 = new Client(lb,2);
    cl1!run(); cl2!run();
}
