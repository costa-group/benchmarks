module BoundedBuffer;
import * from ABS.StdLib;

type Data = Int;

interface Buffer {
    Unit append(Data d);
    Data remove();
}

interface Consumer {
    Unit consume();
    Unit consumeN(Int n);
} 

interface Producer {
    Unit produce(Data d);
    Unit produceList(List<Data> list);
}


class BoundedBuffer(Int max) implements Buffer {
    List<Int> buffer = Nil; 
    Int n = 0;

    Unit append(Data d){
        await (n < max) ; 
        buffer = appendright(buffer,d);
        n = n + 1 ; 
    }
    
    Data remove() {
        Data d = 0;
        await n > 0 ; 
        d = head(buffer);
        buffer = tail(buffer);
        n = n - 1 ; 
        return d ; 
    }
}

class ProducerImpl(Buffer b) implements Producer {
    Unit produce(Data d){
	//await b != null; 
	b!append(d);
    }
    
    Unit produceList(List<Data> list) {
	while (isEmpty(list) == False){
	    this!produce(head(list));
	    list = tail(list);
	}
    }
}

class ConsumerImpl(Buffer b) implements Consumer {
    
    Unit consume(){
	//await b != null; 
	b!remove();
    }

    Unit consumeN(Int n){
	while (n > 0){
	    this!consume();
	    n = n - 1;
	}
    }
}

{
    Buffer buff = new BoundedBuffer(10);
    Producer p1 = new ProducerImpl(buff);
    Consumer c1 = new ConsumerImpl(buff);
    p1!produceList(list[2,5,7]);
    //p1!produceList(list[2,2]);
    c1!consumeN(2);
}
