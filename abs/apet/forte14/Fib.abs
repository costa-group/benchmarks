module Fib;
import * from ABS.StdLib;

interface FibActorInt{
    Unit fib(Int n);
    Unit result(Int n);
}

class FibActor(FibActorInt client) implements FibActorInt{
    
    Int numResponses = 0;
    Int partialResponse = 0;
    
    Unit fib(Int val) {
	FibActorInt newChild1 = null;
	FibActorInt newChild2 = null;
	// If val < 3 then we know the answer so just return it
	if (val == 0) client!result(0);
	else if (val <= 2) client!result(1);
	else {
	    // Otherwise, create a child to handle the response and resubmit the two
	    // sub-problems.
	    newChild1 = new cog FibActor(this);
	    newChild1!fib(val-1);
	    newChild2 = new cog FibActor(this);
	    newChild2!fib(val-2);
	}
    }

    Unit result(Int val) {
	if (numResponses == 0) {
	    numResponses = numResponses+1;
	    partialResponse = val;
	} 
	else { 
	    partialResponse = val + partialResponse;
	    if (client != null) client!result(partialResponse);
	}
    }
} 

{
    FibActorInt fibActor = new cog FibActor(null);
    fibActor!fib(5);
}
