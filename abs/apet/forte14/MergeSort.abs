module MergeSort;
import * from ABS.StdLib;

// Auxiliary functions

def List<Int> merge(List<Int> list1,List<Int> list2) =
  case list1 {
      Nil => list2;
      Cons(x,r1) => case list2 {
	  Nil => list1;
	  Cons(y,r2) => case (x <= y){
	      True => Cons(x,merge(r1,list2));
	      False => Cons(y,merge(list1,r2));
	  };
      };
  };

def List<Int> sublist(List<Int> list,Int i,Int n) =
  case (n == 0) {
      True => Nil;
      False => case list {
	  Nil => Nil;
	  Cons(x,r) => case (i == 0){
	      True => Cons(x,sublist(r,0,n-1));
	      False => sublist(r,i-1,n);
	  };
      };
  };

interface MSortInt{
    Unit sort(MSortInt caller, List<Int> unsorted);
    Unit done(List<Int> sorted);
}

class MSort implements MSortInt{
    Int received = 0;
    List<Int> half = Nil;
    MSortInt caller = null;

    Unit sort(MSortInt caller, List<Int> unsorted){
	this.caller = caller;
	Int n = length(unsorted);
	if (n <= 1) {
	    if (caller != null) caller!done(unsorted);
	} 
	else {
	    List<Int> left = sublist(unsorted,0,n/2);
	    List<Int> right = sublist(unsorted,n/2,n - n/2);
	    MSortInt lh = new cog MSort();
	    MSortInt rh = new cog MSort();
	    lh!sort(this,left);
	    rh!sort(this,right);
	}
    }

    Unit done(List<Int> sorted) {
	received = received + 1;
	if (received == 1) half = sorted;
	else if (received == 2) {
	    List<Int> merged = merge(half,sorted);
	    if (caller != null) caller!done(merged);
	}
    }
}

{
    MSortInt msort = new cog MSort();
    List<Int> list = list[7,2,5,1,3];
    msort!sort(null,list);
}
