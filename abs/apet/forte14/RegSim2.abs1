module RegSim;
import * from ABS.StdLib;

interface RegistryInt{
    Unit regA();
    Unit regB();
}

interface WorkerInt{
    Unit regYourSelf(RegistryInt registry);
}

interface SecretaryInt{
    Unit tellWorkers(List<WorkerInt> workers);
    Unit regYourSelf();
}

class Registry implements RegistryInt{
    Int as = 0;
    Int bs = 0;

    Unit regA(){
	as = as + 1;
    }

    Unit regB(){
	bs = bs + 1;
    }
}

class Worker implements WorkerInt{
    Bool registered = False;

    Unit regYourSelf(RegistryInt registry){
	if (registered == False) registry!regB();
	registered = True;
    }
}

class Secretary (RegistryInt reg) implements SecretaryInt{
    Unit tellWorkers(List<WorkerInt> workers){
	while (isEmpty(workers) == False){
	    WorkerInt w = head(workers);
	    w!regYourSelf(reg);
	    workers = tail(workers);
	}
    }
    
    Unit regYourSelf(){
	reg!regA();
    }
}

{
    WorkerInt w1 = new Worker();
    WorkerInt w2 = new Worker();
    WorkerInt w3 = new Worker();
    WorkerInt w4 = new Worker();
    //WorkerInt w5 = new Worker();
    List<WorkerInt> workers = list[w1,w2,w3,w4];
    RegistryInt registry = new Registry();
    SecretaryInt sec = new Secretary(registry);
    sec!regYourSelf();
    sec!tellWorkers(workers);
    sec!tellWorkers(workers);
}
