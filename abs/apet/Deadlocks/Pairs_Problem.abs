module Paper_dead2;

interface Nodei{
    Unit makePair(Factoryi e);
    Unit receivePair(Nodei e);
}
interface Factoryi{
    Unit pairs(Nodei e);
}

class Node implements Nodei{
   Nodei pair; 

   Unit makePair(Factoryi fact){
       Fut<Unit> f;
       f = fact!pairs(this);
       f.get;
   }

   Unit receivePair(Nodei node){
       pair = node;
   }
}

class Factory(Nodei aux) implements Factoryi{
   Unit pairs(Nodei node){
       if(aux == null){
            aux = node; 
       }
       else{
           aux!receivePair(node);
           Fut<Unit> f = node!receivePair(aux);
           f.get;
           //aux = node; //Uncomment to become free-deadlock.
       }
   }
}

{
Factoryi fact = new cog Factory(null);
Int n = 6;
Int i = 0;
while(i < n){
   Nodei node = new cog Node();
   node!makePair(fact);
   i = i+1;
}
}
