module Paper_dead2;

interface Environment{
    Int numO();
    Unit incO(Oxygen o);
    Unit incH(Hydrogen h);
    Int numH();
    Hydrogen decH();
    Oxygen decO();
    Unit incWater();
}

interface Oxygen{
    Unit createH2O(Environment env);
    Unit union1(Hydrogen h1,Hydrogen h2);
    Unit united();
}

interface Hydrogen{
    Unit createH2O(Environment env);
    Unit union2(Int n, Hydrogen h1,Oxygen o);
    Unit united();
}

class H implements Hydrogen{
   Unit united(){}

   Unit createH2O(Environment env){
       Fut<Int> f1 = env!numH();
       Fut<Int> f2 = env!numO();
       Int n = f1.get; 
       Int m = f2.get;
       Fut<Hydrogen> fH;
       Fut<Oxygen> fO;
       Fut<Unit> f; 
       if(n > 0 && m > 0){
          fH = env!decH();
          Hydrogen h = fH.get;
          fO = env!decO();
          Oxygen o = fO.get;
          f = env!incWater();
          f.get;
       }
       else{
          f = env!incH(this);
          f.get;
       }
   }

   Unit union2(Int n, Hydrogen h, Oxygen o){
       Fut<Unit> f; 
       if(n==1){
             f = h!union2(2,this,o);
             await f?;
       }
       else{ 
             f = o!united();
             await f?;
       }
   }
}

class O implements Oxygen{
   Unit united(){}

   Unit union1(Hydrogen h1,Hydrogen h2){
      Fut<Unit> f = h1!union2(1,h2,this);
      f.get;
   }

   Unit createH2O(Environment env){
       Fut<Int> f1 = env!numH();
       Int n = f1.get;
       Fut<Hydrogen> fH;
       Fut<Unit> f;
       if(n > 1){
            fH = env!decH();
            Hydrogen h = fH.get;
            fH = env!decH();
            Hydrogen h2  = fH.get;
            f = env!incWater();
            f.get;
       }
       else{
            f= env!incO(this);
            f.get;
       }
   }
}


class Env(Int numO, Int numH, Int numW,Oxygen oaux, Hydrogen haux1,
    Hydrogen haux2) implements Environment{

    Int numO(){ return numO; }
    Unit incH(Hydrogen hi){ numO = numO + 1; 
                          if(haux1 != null) haux2 = hi;
                          else haux1 = hi; }

    Unit incO(Oxygen ox){ numH = numH + 1; oaux = ox; }

    Int numH(){ return numH; }

    Hydrogen decH(){ numH = numH - 1; Hydrogen h; 
                     if(numH%2==1) h = haux2;
                     else h = haux1; 
                     return h;  }
    Oxygen decO(){  numO = numO - 1; return oaux; }
    Unit incWater(){ numW = numW +1; }
}



{
Environment env = new cog Env(0,0,0,null,null,null);
Int n = 1;
Int i = 0;
Fut<Unit> f;
while(i < n){
   Oxygen o1 = new cog O();
   Hydrogen h1 = new cog H();
   Hydrogen h2 = new cog H();
   o1!union1(h1,h2);
   f = o1!createH2O(env);
//   f.get;
   f = h1!createH2O(env);
//   f.get;
   f = h2!createH2O(env);
//   f.get;
   i = i+1;
}
}
