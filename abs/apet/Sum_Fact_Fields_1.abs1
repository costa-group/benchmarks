module module Sum_Fact_Fields_1;
import * from ABS.StdLib;

interface A {
Int fact(Int n, A o);
Unit setFt(Int a);
Unit setN(Int b);
Int loop_fact(A o);
Int q(Int n1, Int n2, Int n3);
Int getFt();
Int getN();
 }

class AImp implements A {
Int n=0;
Int ft=0; 

Unit setFt(Int a){ ft=a;}
Unit setN(Int b) { n=b;}
Int getFt(){ return ft;}
Int getN() { return n;}
  
Int loop_fact(A o){
  Fut<Int> f;
  Int r=0;
  Int m = n;
  await ft >=0;
  while (m > 0) {
       f = o  ! fact(ft,this);
       await f?;
       Int a = f.get;
       r=r+a;
       m=m-1;
       ft=ft+1;
    } 
  return r;
}

Int otherSum(Int n,Int k){
Int i=1;
this ! setN(n);
Fut<Int> f;
Int r = 0;
while ( i < n) {
 this ! setFt(k);
 f=this ! loop_fact(this);
 await f?;
 r = f.get;
}
return r;
}

 
 // Factorial of a number 
 Int fact(Int k, A o){
  Fut<Int> f;
  Int r=1;
  if (k<=0) r=1;
  else {
        f = o ! fact(k-1,this);
        await f?;
        r = f.get;
        r = k * r;
  }
  return r;
 }

Int q(Int n1, Int n2, Int n3){
 Fut<Int> f;Fut<Int> s;
 this ! setN(0);
 this ! setFt(0);
 f = this ! loop_fact(this);
 this ! setFt(0);
 s = this ! loop_fact(this);
 await s?;
 await f?;
 Int f1 = f.get;
 Int s1 = s.get;
 return f1+s1;
 //return f1;
 }



}

class B {

Int q(A o,Int n1, Int n2, Int n3){
 Fut<Int> f;
 o ! setN(n1);
 o ! setFt(n2);
 f = o ! loop_fact(o);
 o ! setFt(n3);
 Fut<Int> s;
 s = o ! loop_fact(o);
 await f?;
 await s?;
 Int f1 = f.get;
 Int s1 = s.get;
 return f1+s1;
 //return f1;
 }

Int h(A o,Int n1, Int n2, Int n3){
 o ! setN(n1);
 o ! setFt(n2);
 o ! getN();
 o ! getFt();
 Fut<Int> f;
 Fut<Int> s;
 await f?;
 await s?;
 Int f1 = f.get;
 Int s1 = s.get;
 return f1 + s1;
 }
}

