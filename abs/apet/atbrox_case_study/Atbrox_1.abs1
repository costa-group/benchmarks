module Atbrox;
//import * from ABS.StdLib;
//import * from ABS.DC;



type URI = String;
type Word = String;

// MapReduce
interface MapReduce {
    // invoked by client
    List<Pair<Word, List<URI>>> mapReduce(List<Pair<URI, List<Word>>>
        documents);
    // invoked by workers
    Unit finished(Worker w);
}

class MapReduce(Int maxMachines)
implements MapReduce {
    Set<Worker> workers = set[];
    Int nWorkers = 0;

    List<Pair<Word, List<URI>>> mapReduce(List<Pair<URI, List<Word>>> items) {
        Set<Fut<List<Pair<Word, URI>>>> fMapResults = set[];
        Map<Word, List<URI>> intermediates = map[];
        Set<Pair<Word, Fut<List<URI>>>> fReduceResults = set[];
        List<Pair<Word, List<URI>>> result = Nil;

        while (~isEmpty(items)) {
            Pair<URI, List<Word>> item = head(items);
            items = tail(items);
            Worker w = await this!getWorker();
            URI key = fst(item);
            List<Word> value = snd(item);
            Fut<List<Pair<Word, URI>>> fMap = w!invokeMap(key, value);
            fMapResults = insertElement(fMapResults, fMap);
        }
       
        while (~emptySet(fMapResults)) {
            // "The MapReduce library groups together all intermediate values
            // associated with the same intermediate key I ..." [ditto]
            Fut<List<Pair<Word, URI>>> fMapResult = take(fMapResults);
            fMapResults = remove(fMapResults, fMapResult);
            await fMapResult?;
            List<Pair<Word, URI>> mapResult = fMapResult.get;
            while (~isEmpty(mapResult)) {
                Pair<Word, URI> keyValuePair = head(mapResult);
                mapResult = tail(mapResult);
                List<URI> inter = lookupDefault(intermediates, fst(keyValuePair), Nil);
                intermediates = put(intermediates, fst(keyValuePair),
                    Cons(snd(keyValuePair), inter));
                }
            }
            // "... and passes them to the Reduce function.  The Reduce
            // function, also written by the user, accepts an intermediate key I
            // and a set of values for that key. It merges together these values
            // to form a possibly smaller set of values.  Typically just zero or
            // one outpout value is produced per Reduce invocation." [ditto]
            Set<Word> keys = keys(intermediates);
            while(~emptySet(keys)) {
                Word key = take(keys);
                keys = remove(keys, key);
                List<URI> values = lookupUnsafe(intermediates, key);
                Worker w = await this!getWorker();
                Fut<List<URI>> fReduce = w!invokeReduce(key, values);
                fReduceResults = insertElement(fReduceResults, Pair(key, fReduce));
            }
            while (~emptySet(fReduceResults)) {
                Pair<Word, Fut<List<URI>>> reduceResult = take(fReduceResults);
                fReduceResults = remove(fReduceResults, reduceResult);
                Word key = fst(reduceResult);
                Fut<List<URI>> fValues = snd(reduceResult);
                await fValues?;
                List<URI> values = fValues.get;
                result = Cons(Pair(key, values), result);
            }
            // TODO: release all worker machines

            return result;
        }

        Worker getWorker() {
            if (emptySet(workers)) {
                if (nWorkers < maxMachines) {
                    Worker w = new Worker(this);
                    nWorkers = nWorkers + 1;
                    workers = insertElement(workers, w);
                }
                await ~(emptySet(workers));
            }
            Worker result = take(workers);
            workers = remove(workers, result);
            // TODO: if we releaseInstance() acquireInstance() here
            return result;
        }
        Unit finished(Worker w) {
            workers = insertElement(workers, w);
        }
       
    }


interface Worker  {
  List<Pair<Word, URI>> invokeMap(URI key, List<Word> value);
  List<URI> invokeReduce(Word key, List<URI> value);
}

class Worker(MapReduce master) implements Worker {
    List<Pair<Word, URI>> mapResults = Nil;
    List<URI> reduceResults = Nil;

    // begin customizable section ------------------
    Unit map(URI key, List<Word> value) {
        List<Word> wordlist = value;
        while (~(wordlist == Nil)) {
            Word word = head(wordlist);
            wordlist = tail(wordlist);
            this.emitMapResult(word, key);
        }
    }
    Unit reduce(Word key, List<URI> value) {
        Set<URI> resultset = set(value); //removes duplicates
        while (~(emptySet(resultset))) {
            URI file = take(resultset);
            resultset = remove(resultset, file);
            this.emitReduceResult(file);
        }
    }

    List<Pair<Word, URI>> invokeMap(URI key, List<Word> value) {
        mapResults = Nil;
        this.map(key, value);
        master!finished(this);
        List<Pair<Word, URI>> result = mapResults;
        mapResults = Nil;
        return result;
    }

    List<String> invokeReduce(Word key, List<URI> value) {
        reduceResults = Nil;
        this.reduce(key, value);
        master!finished(this);
        List<URI> result = reduceResults;
        reduceResults = Nil;
        return result;
    }

    Unit emitMapResult(Word key, URI value) {
        mapResults = Cons(Pair(key, value), mapResults);
    }
    Unit emitReduceResult(URI value) {
        reduceResults = Cons(value, reduceResults);
    }

    

}


{

    List<Pair<URI, List<Word>>> documents =
    list[Pair("Agriculture in Canada",
            list["canada","canada is","is one","one","one of",
"of the","the largest","largest","agricultural","producers","producers and",
"and exporters","exporters","exporters in","in the","the world","world",
"world as","as with","with other","other developed","developed","nations",
"nations the","the proportion","proportion","proportion of","of the",
"the population","population","population and","and gdp","gdp","devoted",
"devoted to","to agriculture","agriculture","fell","dramatically",
"dramatically over","over the","the 20th","20th","century","century but",
"but it","it remains","remains","remains an","an important","important",
"element","element of","of the","the canadian","canadian","economy","economy a",
"a wide","wide","range","range of","of agriculture","agriculture",
"agriculture is","is practised","practised","practised in","in canada","canada",
"canada from","from sprawling","sprawling","wheat","fields","fields of",
"of the","the prairies","prairies","prairies to","to summer","summer","produce",
"produce of","of the","the okanagan","okanagan","valley","valley in","in the",
"the federal","federal","government","overview","overview of","of canadian",
"canadian","agriculture","agriculture is","is the", "in"])
, Pair("Celtic harp", list["celtic","harp","harp is","is a","a general","general",
"term","referring","referring to","to a","a triangular","triangular","harp",
"traditional","traditional to","to brittany","brittany","ireland","scotland",
"scotland and","and wales","wales","wales it","it is","is known","known",
"known as","as a","a telenn","telenn","telenn in","in breton","breton",
"cláirseach","cláirseach in","in irish","irish","clàrsach","clàrsach in",
"in scottish","scottish","gaelic","gaelic and","and telyn","telyn","telyn in",
"in welsh","welsh","welsh in","in ireland","ireland","ireland and",
"and scotland","scotland","scotland it","it was","was a","a wire-strung",
"wire-strung","instrument","requiring","great","skill","skill and","and long",
"long","practice","practice to","to play","play","play and","and was",
"was associated","associated","associated with","with the","the gaelic",
"gaelic","ruling","class","class in","in the","the republic","republic",
"republic of","of ireland","ireland","ireland it","it appears","appears",
"appears on","on the","the coins","coins","coins and","and coat","coat",
"coat of","of arms","arms", "in"])];

    

    MapReduce m = new MapReduce(5);
    m ! mapReduce(documents);
    
    /*CloudProvider provider = new CloudProvider("Amazon");

    DeploymentComponent dc = new DeploymentComponent("Memkite", map[Pair(CPU, 20)]);
    Memkite memkite = new CMemkite(provider);

    DeploymentComponent mobile_device_dc = new DeploymentComponent("MobileDevice", map[Pair(CPU, 5)]);
    MobileDevice mobile_device = new CMobileDevice(memkite);

    
    await memkite!process(CrawledData(documents));
    
    Set<URI> search_before = await mobile_device!search("in");
    
    await mobile_device!pushButton();
    
    Set<URI> search_after = await mobile_device!search("in");
    
    provider!shutdown();      // Orderly termination of otherwise-endless loop
*/
}

// Local Variables:
// abs-debug-output: nil
// abs-use-timed-interpreter: t
// abs-clock-limit: 10
// End:
