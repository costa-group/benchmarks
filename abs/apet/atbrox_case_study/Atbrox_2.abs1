module Atbrox;
//import * from ABS.StdLib;
//import * from ABS.DC;


type Word = String;
type Line = List<Word>;
type LineNumber = Int;
type File = List<Pair<LineNumber, Line>>;
type Result = List<Pair<Word, Int>>;


type URI = String;

// MapReduce
interface MapReduce {
    // invoked by client
    List<Pair<Word, Int>> mapReduce(File file);
    // invoked by workers
    Unit finished(Worker w);
}

class MapReduce(Int maxMachines)
implements MapReduce {
    Set<Worker> workers = set[];
    Int nWorkers = 0;

    List<Pair<Word, Int>> mapReduce(File file) {
        Set<Fut<List<Pair<Word, Int>>>> fMapResults = set[];
        Map<Word, List<Int>> intermediates = map[];
        Set<Pair<Word, Fut<List<Int>>>> fReduceResults = set[];
        List<Pair<Word, Int>> result = Nil;

        while (~isEmpty(file)) {
            Pair<LineNumber, Line> infoLine = head(file);
            file = tail(file);
            Worker w = await this!getWorker();
            Line line = snd(infoLine);
            Fut<List<Pair<Word, Int>>> fMap = w ! invokeMap(line);
            fMapResults = insertElement(fMapResults, fMap);
        }
       
        while (~emptySet(fMapResults)) {
            // "The MapReduce library groups together all intermediate values
            // associated with the same intermediate key I ..." [ditto]
            Fut<List<Pair<Word, Int>>> fMapResult = take(fMapResults);
            fMapResults = remove(fMapResults, fMapResult);
            await fMapResult?;
            List<Pair<Word, Int>> mapResult = fMapResult.get;
            while (~isEmpty(mapResult)) {
                Pair<Word, Int> wordValuePair = head(mapResult);
                mapResult = tail(mapResult);
                List<Int> inter = lookupDefault(intermediates, fst(wordValuePair), Nil);
                intermediates = put(intermediates, fst(wordValuePair),
                    Cons(snd(wordValuePair), inter));
                }
            }
            // "... and passes them to the Reduce function.  The Reduce
            // function, also written by the user, accepts an intermediate key I
            // and a set of values for that key. It merges together these values
            // to form a possibly smaller set of values.  Typically just zero or
            // one outpout value is produced per Reduce invocation." [ditto]
       
            
            Set<Word> words = keys(intermediates);
            while(~emptySet(words)) {
                Word word = take(words);
                words = remove(words, word);
                List<Int> values = lookupUnsafe(intermediates, word);
                Worker w = await this!getWorker();
                Fut<List<Int>> fReduce = w ! invokeReduce(values);
                fReduceResults = insertElement(fReduceResults, Pair(word, fReduce));
            }
            
            while (~emptySet(fReduceResults)) {
                Pair<Word, Fut<List<Int>>> reduceResult = take(fReduceResults);
                fReduceResults = remove(fReduceResults, reduceResult);
                Word word = fst(reduceResult);
                Fut<List<Int>> fValues = snd(reduceResult);
                await fValues?;
                List<Int> values = fValues.get;
                result = Cons(Pair(word, head(values)), result);
            }
            // TODO: release all worker machines

            return result;
        }

        Worker getWorker() {
            if (emptySet(workers)) {
                if (nWorkers < maxMachines) {
                    Worker w = new Worker(this);
                    nWorkers = nWorkers + 1;
                    workers = insertElement(workers, w);
                }
                await ~(emptySet(workers));
            }
            Worker result = take(workers);
            workers = remove(workers, result);
            // TODO: if we releaseInstance() acquireInstance() here
            return result;
        }
        Unit finished(Worker w) {
            workers = insertElement(workers, w);
        }
       
    }


interface Worker  {
  List<Pair<Word, Int>> invokeMap(Line line);
  List<Int> invokeReduce(List<Int> value);
}

class Worker(MapReduce master) implements Worker {
    List<Pair<Word, Int>> mapResults = Nil;
    List<Int> reduceResults = Nil;

    
    Unit map(Line line) {
        Line wordlist = line;
        while (~(wordlist == Nil)) {
            Word word = head(wordlist);
            wordlist = tail(wordlist);
            this.emitMapResult(word);
        }
    }
   
   Unit reduce(List<Int> value) {
        Int acu = 0;
        while (~(value == Nil)){
          acu = acu + head(value);
          value = tail(value); 
        }
        this.emitReduceResult(acu);
       }


     /* type Word = String;
        type Line = List<Word>;
     */
    List<Pair<Word, Int>> invokeMap(Line line) {
        mapResults = Nil;
        this.map(line);
        master ! finished(this);
        List<Pair<Word, Int>> result = mapResults;
        mapResults = Nil;
        return result;
    }

    List<Int> invokeReduce(List<Int> value) {
        reduceResults = Nil;
        this.reduce(value);
        master ! finished(this);
        List<Int> result = reduceResults;
        reduceResults = Nil;
        return result;
    }

    Unit emitMapResult(Word word) {
        mapResults = Cons(Pair(word, 1), mapResults);
    }
    Unit emitReduceResult(Int value) {
        reduceResults = Cons(value, Nil);
    }

    

}




{
    // Input
    File file =  
          list[Pair(3414,list["the","cat","sat","on","the","mat"]),
               Pair(3437,list["the","aardvark","sat","on","the","sofa"])];

    MapReduce m = new MapReduce(5);
    m ! mapReduce(file);
    
    

}

// Local Variables:
// abs-debug-output: nil
// abs-use-timed-interpreter: t
// abs-clock-limit: 10
// End:
