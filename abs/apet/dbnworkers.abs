module CC2016;
import * from ABS.StdLib;

data Data = DataNull | DataSomething;

interface Worker {
    Unit work(DB db);
    Int ping(Int n);
}

interface DB {
    Unit register(Worker w);
    Data getData(Worker w);
} 

def Bool contains<Worker>(List<Worker> ss, Worker e) =
  case ss {
    Nil => False ;
    Cons(e, _) => True;
    Cons(x, xs) => contains(xs, e);
  };


class DBimp(Data dt) implements DB {
    List<Worker> clients = Nil;

    Unit register(Worker w){
        Fut<Int> f = w!ping(1); 
        Int r = f.get;
        if(r == 1) clients = appendright(clients,w);
        
    }
    Data getData(Worker w){
        Data n = DataNull;
	if(contains(clients,w)) n = this.dt;
        else n = DataNull;
	return n;
    }	   
}

class WorkerImp() implements Worker {
    Data datum = DataNull;

    Unit work(DB db){
       Fut<Data> f = db!getData(this);
       this.datum = f.get;
    }
    Int ping(Int n){
       Int m = n;
       return n;
    }
}

{
	DB db = new DBimp(DataSomething);
	Int n = 3;
    Int cont = 0;
    while(cont < n){
      Worker w = new WorkerImp();
	  db!register(w);
	  w!work(db);
      cont = cont+1;
    }
}
