module MailServer;
import * from ABS.StdLib;

type UserName = String ;
type Message = String;


interface AddressBook {
      User getUserAddress(UserName u);
}

class AddressBookImp implements AddressBook {
      Map<UserName,User> users = EmptyMap;

      [users <= max(users)]
      User getUserAddress(UserName u){
      	      return lookup(users,u);
      }
}

interface User {
     Unit receive(Message msg);
}

class UserImp implements User {
      List<Message> msgs = Nil;

      Unit receive(Message msg) {
         msgs = Cons(msg,msgs);
      }
}


interface MailServer {
      Unit addUser(UserName u);
      Unit notify(Message m);
}

class MailServerImp(AddressBook ab) implements MailServer {

      List<UserName> listUsers = Nil;
      
      Unit addUser(UserName u) {
         listUsers = Cons(u, listUsers);
      }
      
      [listUsers <= max(listUsers)]
      Unit notify(Message m) {
        while ( listUsers != Nil ) {
          Fut<User> u;
          u = ab ! getUserAddress( head(listUsers) );
          [old(listUsers) == listUsers]
          await u?;
          User us = u.get;
          us!receive(m);
          listUsers = tail(listUsers);
        }
      }
}
interface Bar {
	Unit m1 ();
	Unit m2 ();
}
class Foo () implements Bar {
	Unit m1() {
	  User u1 = new UserImp();
	  User u2 = new UserImp();
	  User u3 = new UserImp();
	  // building the address book and mail server
	  AddressBook ab= new AddressBookImp();
	  MailServer ms = new local MailServerImp(ab);
	  // adding users to the mail server
	  ms ! addUser("John");
	  ms ! addUser("Mary");
	  ms ! addUser("Mike");
	  List<Message> mssg = Cons("m1",Cons("m2",Cons("m3",Cons("m4",Nil))));
	  while (mssg!=Nil){
	   ms.notify(head(mssg));
	   mssg=tail(mssg);
	  }
	}
	Unit m2() {
	  User u1 = new UserImp();
	  User u2 = new UserImp();
	  User u3 = new UserImp();
	  // building the address book and mail server
	  AddressBook ab= new AddressBookImp();
	  MailServer ms = new local MailServerImp(ab);
	  // adding users to the mail server
	  ms ! addUser("John");
	  ms ! addUser("Mary");
	  ms ! addUser("Mike");
	  List<Message> mssg = Cons("m1",Cons("m2",Cons("m3",Cons("m4",Nil))));
	  while (mssg!=Nil){
	   ms.notify(head(mssg));
	   mssg=tail(mssg);
	  }
	}
}

{ // building three users

Bar o1 = new local Foo();
	Bar o2 = new local Foo();
	
	o1.m1();
	o1.m2();
	//o2.m1();
	//o2.m2();
  /*
  User u1 = new UserImp();
  User u2 = new UserImp();
  User u3 = new UserImp();
  // building the address book and mail server
  AddressBook ab= new AddressBookImp();
  MailServer ms = new local MailServerImp(ab);
  // adding users to the mail server
  ms ! addUser("John");
  ms ! addUser("Mary");
  ms ! addUser("Mike");
  List<Message> mssg = Cons("m1",Cons("m2",Cons("m3",Cons("m4",Nil))));
  while (mssg!=Nil){
   ms.notify(head(mssg));
   mssg=tail(mssg);
  }*/
}
