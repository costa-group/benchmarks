	module ABSChat.Main;

data ServerMsg = Welcome
   	           | GoodBye
          	   | NewMessage(String);

data ClientMsg = ChatMessage(String,String);

interface Server {
   Unit start();
    Session connect(Client c);
}

interface Session {
   Unit receive(ClientMsg m);
   Unit close();
}

interface Client {
	Unit setServer(Server s);
	Unit start();
	Unit receive(ServerMsg m);
	ClientGUI getGUI();
}

interface ClientGUI {
   Unit init2();
   Button getSendButton();
   TextField getTextField();
}

interface ClientIntern extends Client {
	 Unit sendText(String text);
}
 
interface ClientGUIIntern extends ClientGUI {
    ClientIntern getClientIntern();
   String getTextFieldText();
} 

class ClientGUIImpl( ClientIntern client) implements ClientGUIIntern {
   Window gui;
   Button sendButton;   
   TextField textField; 
   Bool initialized = False;
   
   {   
   	  gui = new WindowImpl();
   } 
   
   Unit init2() { 
   	  [x == acquire(4)]
   	  Fut<Button> f = gui!newButton("Send");
   	  sendButton = f.get;
   	  ButtonListener l = new SendButtonListener(this);
   	  sendButton!registerListener(l);

      Fut<TextField> tf;
      tf = gui!newTextField();
      textField = tf.get;
	  [x == release()]
   	  initialized = True;
   }
   
   Button getSendButton() {
   	  [x == acquire(1)]
   	  Int i = 0;
      await initialized;
   	  [x == release()]
      Button b = sendButton;
      return b;
   }
   
   TextField getTextField() {
   	  [x == acquire(2)]
   	  Int i = 0;
      await initialized;
      TextField t = textField;
      [x == release()]
   	  Int i2 = 0;
      return t;
   }
   
   String getTextFieldText() {
   	  [x == acquire(2)]
   	  Int i = 0;
      Fut<String> f = textField!getText();
   	  [x == release()]
   	  Int i2 = 0;
      return f.get;
   }
   
   ClientIntern getClientIntern() {
      	[x == acquire(2)]
   		Int i = 0;
   
   		ClientIntern c = client;
      	[x == release()]
   		Int i2 = 0;
      	return c;
   }
}


class SendButtonListener([Final]  ClientGUIIntern client) implements ButtonListener {
   Unit pressed() {
   	   [x == acquire(3)]
   	   Int i = 0;
       ClientIntern ci = client.getClientIntern();
       String s = client.getTextFieldText();
   	   ci.sendText(s);
   	   [x == release()]
   		Int i2 = 0;
   	      	   
   }
}


[COG]
class ClientImpl implements ClientIntern { 
   String name = "Alice";
   Server server;
   Session session;
    ClientGUI gui;

   ClientGUI getGUI() {
      	[x == acquire(1)]
   		Int i = 0;
	  if (gui == null) {
	     gui = new ClientGUIImpl(this); /// 3
	     gui.init2();
	  }
	  ClientGUI cg = gui;
	   [x == release()]
   	   Int i2 = 0;
	  
   	  return cg;
   }

   Unit setServer(Server s) {
       [x == acquire(1+s)]
       Int i = 0;
    
   	   this.server = s;
       [x == release()]
       Int i2 = 0;
   }
   
   Unit start() {
      [x == acquire(1)]
      Int i = 0;
   
      await server != null;
      Fut<Session> f = server!connect(this);
      await f?;
      session = f.get;
      [x == release()]
      Int i2 = 0;
       
   }
   
   Unit receive(ServerMsg msg) {
       [x == acquire(1+msg)]
       Int i = 0;
   	  await session != null;
	  ClientMsg ans = ChatMessage("","");
	  //if(msg==Welcome){
   	      ans = ChatMessage(name,"Welt"); 
      	  //}
   	  
   	  Fut<Unit> u = session ! receive(ans);
   	  await u?;
   	  session ! close();
       [x == release()]
       Int i2 = 0;

   }  
   
   Unit sendText(String text) {
       [x == acquire(1+1)]
       Int i = 0;
   
      await session != null;
      session ! receive(ChatMessage(name,text));
       [x == release()]
       Int i2 = 0;
      
   }
}
interface ButtonListener {
   Unit pressed();
}

interface Window {
    Button newButton(String label);
    TextField newTextField();
}

interface TextField {
   String getText();
   Unit setText(String newText);
}

interface Button {
   Unit press();
   String getLabel();
   Unit registerListener(ButtonListener l);
}

class TextFieldImpl implements TextField {
  String text = "";
  String getText() {
       [x == acquire(1)]
       Int i = 0;
       [x == release()]
       Int i2 = 0;
  
     return text;
  }

  Unit setText(String s) {
       [x == acquire(1)]
       Int i = 0;
  	 text = s;
       [x == release()]
       Int i2 = 0;
  }
}

[COG]
class WindowImpl implements Window {
    Button newButton(String label) {
       [x == acquire(1)]
       Int i = 0;
    
      Button b = new ButtonImpl(this, label);
       [x == release()]
       Int i2 = 0;
      
      return b;
   }
   
   TextField newTextField() {
          [x == acquire(1)]
       Int i = 0;
   
      TextField t = new TextFieldImpl();
       [x == release()]
       Int i2 = 0;
   	  return t;
   }
}

class ButtonImpl( Window gui, String label) implements Button {
    List<ButtonListener> listener = Nil;
   
    [listener <= max(listener)]
	Unit press() {
          [x == acquire(1)]
       Int i = 0;
	
		List<ButtonListener> r = listener;
		while (r != Nil) {
			ButtonListener l = head(r);
			l ! pressed();
			r = tail(r);
		}	
          [x == release()]
       Int i2 = 0;
	}
	
	String getLabel() {
	   [x == acquire(1)]
       Int i = 0;
	
		String l = label;
		
	   [x == release()]
       Int i2 = 0;
		
		return l;
	}
	
	[listener <= max(listener)]
	Unit registerListener(ButtonListener l) {
	   [x == acquire(1+l)]
       Int i = 0;
	
		//listener = Cons(l,listener);
		listener = appendright(listener,l);
	   [x == release()]
       Int i2 = 0;
	
	}
}


interface ServerIntern extends Server {
	Unit sessionClosed(SessionIntern i);
}

interface SessionIntern extends Session {
   Unit init2();
}

[COG]
class ServerImpl implements ServerIntern { 
   Bool running = False;
   List<SessionIntern> sessions = Nil;
   
   Unit start() {
       [x == acquire(1)]
       Int i = 0;
   
      running = True;
      [x == release()]
       Int i2 = 0;
      
   }
   
   Session connect(Client c) {
       [x == acquire(1+1+c)]
       Int i = 0;
   
       await running;
       SessionIntern s;
       s = new SessionImpl(this, c);
       sessions = Cons(s,sessions);
       s!init2();
       [x == release()]
       Int i2 = 0;
       
       return s;
   }

	[sessions <= max(sessions)]
	Unit sessionClosed(SessionIntern i) {
	   [x == acquire(1)]
       Int i2 = 0;
	
	
	   sessions = without(sessions,i);
	   
	   [x == release()]
       Int i3 = 0;
	   
	}

}


class SessionImpl(ServerIntern server, Client c) implements SessionIntern {
	Unit init2() {
		c!receive(Welcome);
	}
	
	Unit close() {
	   server.sessionClosed(this);
	}
	
	Unit receive(ClientMsg m) {
	}

}

interface User {
   Unit use(ClientGUI client);
}

[COG] 
class UserImpl implements User {
   ClientGUI gui;
   Button sendBtn;
   TextField textField;
	
   [client <= 1]	
   Unit use(ClientGUI client) { 
      [x == acquire(1+2+client)]
       Int i = 0;
   
	  gui = client;
	  Fut<Button> f = gui!getSendButton();
	  sendBtn = f.get;
	  
	  Fut<TextField> f2 = gui!getTextField();
	  textField = f2.get;
	  
	  textField!setText("Hello");
	  sendBtn!press();
	  [x == release()]
      Int i2 = 0;
	  
   }
}

class Main {
	Unit main (Int nclients, Int nUsers) {
		[x == acquire(3)]
        Int i = 0;
		
	 	Server server = new ServerImpl();  
		server ! start();
		
		while(nclients > 0) {
			Client client = new ClientImpl();
			client ! setServer(server);
			client ! start();
			
			Fut<ClientGUI> fgui = client ! getGUI();
			ClientGUI gui = fgui.get;
		
			User user = new UserImpl();
			user ! use(gui);
			nclients = nclients - 1;
		}	
	   [x == release()]
       Int i2 = 0;
		
		
	}
}