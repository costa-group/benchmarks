module Fact;
import * from ABS.StdLib;

interface FactInt{
    Unit fact(Int n);
    Unit work(Int n,Int h);
    Unit report(Int x);
    Unit delegate(Int n);
}

interface RunnerInt{
    Unit fact(Int n,Int h);
    Unit test();
}

class Fact(FactInt boss,Int maxH) implements FactInt{
   
    Int r = 1;
   
    Unit fact(Int n) {
        if (n > maxH){
            this!work(n,maxH);
            // r = n*(n-1)*(n-2)*...*((n-maxH)+1)
            this!delegate(n-maxH);
            // r = n*(n-1)*(n-2)*...*((n-maxH)+1)*(n-maxH)! = n!
        } else {
            this!work(n,n);
            // r = n!
            this!report(1);
        }
    }

    Unit work(Int n,Int h){ 
        // r = r*n*(n-1)*(n-2)*...*((n-maxH)+1)
        while (h > 0){
            r = r*n;
            n = n-1;
            h = h-1;
        }
    }
   
    Unit delegate(Int n){
        // computes fact(n) on a new Fact object
        FactInt worker = new Fact(this,maxH);
        worker!fact(n);
    }

    Unit report(Int x) {
        // reports r*x to its boss
        r = r*x;
        if (boss != null) boss!report(r);
    }
}

class Runner implements RunnerInt{
    Unit fact(Int n,Int h){
        FactInt f = new Fact(null,h);
        f!fact(n);   
    }

    Unit test(){
        this!fact(2,1);
    }
}


{
    FactInt f = new Fact(null,2);
    f!fact(5);
}

