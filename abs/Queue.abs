module Queue;
import * from ABS.StdLib;



interface CheckParity {
  Unit transformToOdd();
  Unit transformToEven();
  Int isOddOrEven();
  Int sum(Int n);
  Int q();
}

class CheckParityImp(Int f) implements CheckParity {
  //Int f = 10;

  Unit transformToOdd(){f=f*2+1;}
  Unit transformToEven(){f=f*2;}

  Int isOddOrEven(){
   Int r=0;
   if (f == 0) r=0; 
   else if (f % 2 == 0) r=1;
   else r = -1;
   return r;
  }
  Int m(){   
    Int r = 0;
    f = 10;
    Fut<Int> fut;
    this ! transformToOdd();
    this ! transformToEven();
    fut = this ! isOddOrEven();
    await fut?;
    r=fut.get;
    return r;
  }

 Int m1(){   
    Int r = 0;
    f = 10;
    this ! transformToOdd();
    this ! transformToEven();
    if (this.f == 0) r=0;
    else if (f % 2 == 0) r = 1;
    else r=-1;
    return r;
  }


  Int sum(Int n){
    Int r=0;
    Fut<Int> f;
    if (n==0) r=0;
    else {
      f = this ! sum(n-1);
      await f?;
      Int aux = f.get;
      r = r + aux;
    }
   return r;
  }

  Int q(){return 2;}

}



class Coverage  {

  Int sum_p(Int l, Int n){
    CheckParity o = new local CheckParityImp(0);
    Int r=0;
    if (l>0) {
    Fut<Int> g;
     g = o ! sum(n);
     await g?;
     r = g.get;
    }
    else {
     r=o.q();
    }
    return r;
  }

}

class Pruning {
 Int a = -5;
 Int b = -5;

 Unit setField_a(){
   this.a=10;
 }

 Unit setField_b(){
   this.b=20;
 }

 Unit setField_a_b(){
  this.setField_a();
  this.setField_b();
 }

 Int test_pruning(){
  Int r = 0;
  this.a = -1;
  await (this.a > 0);
  if (this.a>0){
   r = 1;
  }
  else {
   r = 0;
  }
  return r;
 }
}

/*
interface Toy {
 Int play();
}

class ToyImp() implements Toy{
  
  Int play(){   
    Int r = 0;
    Fut<Int> f;
    CheckParity o;
    o = new CheckParityImp(10);
    o ! transformToOdd();
    o ! transformToEven();
    f = o ! isOddOrEven();
    await f?;
    r=f.get;
    return r;
  }
}

interface Object {
 Int playObjects();
}

class ObjectImp {
 Int playObjects(){
    Fut<Int> r1;
    Fut<Int> r2;
    Toy o1;
    Toy o2;
    o1 = new ToyImp();
    o2 = new ToyImp();
    r1 = o1 ! play();
    r2 = o2 ! play();
    await r1?;
    await r2?;
    Int a = r1.get;
    Int b = r2.get;
    return a+b;
}}

//Main
{
   
}

/* apet(['Queue.abs'],['ToyImp.play'],[], [num_or_const = constraint,sched_policy=all(prior)]).
*/

/** Test cases for "prior"


         Input:   State = [(Id_1,object('ToyImp',Fields_1,Queue_1))|D]
	 Output:  Return = 0, 
                 // el campo no se ha modificado
                 // 0.- Se ejecuta isOddOrEven con valor de f igual a 10 
                 // 1.- TransformToEven (f=20)
                 // 2.- TransformToOdd (f=41)    
         
         State = [(0,object('CheckParityImp',[field(f,41)],[])), 
                  (Id_1,object('ToyImp',Fields_1,Queue_1))|D ]

	 ******************
         
	 Input:  State = [ (Id_1,object('ToyImp',Fields_1,Queue_1))|D]
	 Output: Return = 1, 
                 
                  // 0.- se ejecuta transformToEven() {f=20}
                  // 1.- se ejeuta isOddOrEven {r=1}
                  // 2.- se ejecuta transformToOdd {f=41}


         State = [ (0,object('CheckParityImp',[field(f,41)],[])), 
                   (Id_1,object('ToyImp',Fields_1,Queue_1))|D]

	 
         *********************

	 Input:  State = [ (Id_1,object('ToyImp',Fields_1,[]))|Queue_1]
	 Output: Return = -1, 
                  
                  // 0.- se ejecuta transformToEven() {f=20}
                  // 1.- se ejecuta transformToOdd {f=41}
                  // 2.- se ejeuta isOddOrEven {r=1}

         State = [ (Id_1,object('ToyImp',Fields_1,[])), 
                   (0,object('CheckParityImp',[field(f,41)],[]))|Queue_1]
	 
         **********************	 

	 Input:  State = [ (Id_1,object('ToyImp',Fields_1,Queue_1))|D]
	 Output: Return = 0, 
	 
	           // 0.- se ejecuta el if con f=10 (r=0)
                   // 1.- se ejecuta transformToOdd (f=21)
                   // 2.- se ejecuta transformToEven (f=42)

         State = [ (0,object('CheckParityImp',[field(f,42)],[])), 
                   (Id_1,object('ToyImp',Fields_1,Queue_1))|D]
	 
        **********************

	 Input: State = [ (Id_1,object('ToyImp',Fields_1,Queue_1))|D]
	 Output: Return = -1, 

	          // 0.- se ejecuta transformToOdd (f=21)
                  // 1.- se ejecuta el if (r=-1)
                  // 2.- se ejecuta transformToEven (f=42)

	 State = [ (0,object('CheckParityImp',[field(f,42)],[])), 
                   (Id_1,object('ToyImp',Fields_1,Queue_1))|D]
	 
         **********************
         
	 Input: 
         State = [ (Id_1,object('ToyImp',Fields_1,[]))|Queue_1]
	 Output: Return = 1, 

                 // 0.- Se ejecuta transformToOdd (21)
                 // 1.- Se ejecuta transformToEven (r=42)
                 // 2.- Se ejecuta el if 

         State = [ (Id_1,object('ToyImp',Fields_1,[])), 
                   (0,object('CheckParityImp',[field(f,42)],[]))|Queue_1]
	
*/
