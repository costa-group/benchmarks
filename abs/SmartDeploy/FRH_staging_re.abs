module FredhopperCloudServices;

/**************************************************************
Mandatory imports and exports
**************************************************************/
export *;
import * from ABS.DC;
import * from ABS.SmartDeploy;



/**************************************************************
// Definition of classes with their cost annotations
**************************************************************/

//abstraction for a customer
type Customer = String;

//abstraction for an identifier
type Id = Int;
def Id init() = 1;
def Id incr(Id id) = id + 1;

//abstraction for a request
type Request = Int;
def Int cost(Request request) = request;

//abstraction for a response
type Response = Bool;
def Response success() = True;
def Bool isSuccess(Response response) = response; 

//There exists an enumerated number of service types... 
data ServiceType = FAS | SUGGEST | DM;

// A Service configuration defines 
// * serviceType -- the type of service offered
// * instances -- the amount of resources each instance consumes
data Config = Config(ServiceType serviceType, List<Int> instances); 

// Process state
data State = RUNNING | STOP;

// An endpoint is where service user connects to a service
interface EndPoint { }

interface LoadBalancerEndPoint extends EndPoint { }

// A service instance offers a single end point 
// A service has a service type, defining the kind of service offered
// A service belong to a customer
// A service exposes logging information
interface Service extends EndPoint { }

// load balance over n services in round robin style
class LoadBalancerEndPointImpl(List<Service> services) implements LoadBalancerEndPoint {
}


// A deployment service helps to deploy ALL types of service instance onto required cpu resources.
interface DeploymentService { } 


[Deploy: scenario[MaxUse(2),Cost("Cores", 1), Cost("Memory", 80), Param("p",Req)]]
class DeploymentServiceImpl(PlatformService p) implements DeploymentService {
	// ...
}

// A load balancer service distributes request over service instances
// A load balancer can enable or disable a service
// TODO annotations on interfaces might help to restrict or specifiy 
// requirements such that they should be observed by any object impl.
interface LoadBalancerService { }

//enum to specify whether to increase/decrease load balance resource
data LBOp = INCR | DECR;

[Deploy: scenario[Cost("Cores", 4), Cost("Memory", 800)] ]
class LoadBalancerServiceImpl implements LoadBalancerService {
	// ...
}

//Platform service can create and remove a service
interface PlatformService { }

//Platform service used by monitor to scale up/down a service
interface MonitorPlatformService extends PlatformService { }


[Deploy: scenario[Cost("Cores", 4), Cost("Memory", 1200), Param("ls", Req)]]
class PlatformServiceImpl(LoadBalancerService ls) 
implements MonitorPlatformService {
	// ...
}

interface User { }

data Rule = Rule(Int interval, Monitor monitor); 

interface MonitoringService { }

class MonitoringServiceImpl implements MonitoringService {
	// ..
}

interface Monitor { }

interface Action { }

//A monitor that checks the latency of a service endpoint
class LatencyMonitor(Int upper, MonitorPlatformService ps) implements Monitor {
	// ...
}

class ScaleResourceAction(List<Pair<Id, Int>> scalings, MonitorPlatformService ps) implements Action {
	// ...
}


data Scale = UP | DOWN;

//scale up/down the number of instances according to the scaling setting
//scaling setting is a list of pairs of endpoint id to the number of instances to add/remove  
class ScaleInstanceAction(List<Triple<Int, Scale, List<Int>>> scalings, MonitorPlatformService ps) implements Action {
	// ...
}

/**
* Models a cloud service provider such as Fredhopper
**/
interface ServiceProvider { }

[Deploy: scenario[Param("ps", Req), Param("ls", Req)] ]
class ServiceProviderImpl(PlatformService ps, LoadBalancerService ls) implements ServiceProvider {
 // ...
}



/* Example of a service to deploy: query service of the Fredhopper Access Server 
*/
interface Item {
}

interface IQueryService extends Service { }

// Stub implementation of the query service, for use with cost annotations
[Deploy: scenario[Name("staging"), MaxUse(1), Cost("Cores", 2), Cost("Memory", 700), Param("c", Default("\\\"Customer X\\\"")), Param("staging", Default("True")), Param("ds", Req)] ]
[Deploy: scenario[Name("live"), MaxUse(1), Cost("Cores", 1), Cost("Memory", 300), Param("c", Default("\\\"Customer X\\\"")), Param("staging", Default("False")), Param("ds", Req)] ]
class QueryServiceImpl(DeploymentService ds, Customer c, Bool staging) implements IQueryService {
	// ....
}


data ScaleDecision = ScaleUp | ScaleDown | DoNothing;
interface ScalingMonitor {
	ScaleDecision scale();
}

class ScalingMonitor() implements ScalingMonitor {
	ScaleDecision scale() { return ScaleUp; }
}



/**************************************************************
// MAIN
**************************************************************/

{

	CloudProvider cloudProvider = new CloudProvider("CloudProvider");
	// Definition of the deployment components
	cloudProvider.addInstanceDescription(Pair("c3_xlarge_eu", InsertAssoc(Pair(CostPerInterval,210), InsertAssoc( Pair(Memory,750), InsertAssoc(Pair(Cores,4), EmptyMap)))));
	cloudProvider.addInstanceDescription(Pair("c3_xlarge_us", InsertAssoc(Pair(CostPerInterval,210), InsertAssoc( Pair(Memory,750), InsertAssoc(Pair(Cores,4), EmptyMap)))));
	cloudProvider.addInstanceDescription(Pair("c3_2xlarge_eu", InsertAssoc(Pair(CostPerInterval,420), InsertAssoc( Pair(Memory,1500), InsertAssoc(Pair(Cores,8), EmptyMap)))));
	cloudProvider.addInstanceDescription(Pair("c3_2xlarge_us", InsertAssoc(Pair(CostPerInterval,420), InsertAssoc( Pair(Memory,1500), InsertAssoc(Pair(Cores,8), EmptyMap)))));


/* JSON ANNOTATION
{
	"id": "MainSmartDeployer",
	"specification": "QueryServiceImpl['staging'] > 0 and QueryServiceImpl['.*'] = 2  and LoadBalancerServiceImpl = 1 and PlatformServiceImpl = 1 and ServiceProviderImpl = 1 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl))) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)",
	"DC": [],
	"obj": [],
	"cloud_provider_DC_availability" : { "c3_2xlarge_eu" : 3, "c3_2xlarge_us" : 3}
}
**/
	

	[ SmartDeploy : "{\"id\":\"MainSmartDeployer\",\"specification\":\"QueryServiceImpl['staging'] > 0 and QueryServiceImpl['.*'] = 2  and LoadBalancerServiceImpl = 1 and PlatformServiceImpl = 1 and ServiceProviderImpl = 1 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl))) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)\",\"DC\":[],\"obj\":[],\"cloud_provider_DC_availability\":{\"c3_2xlarge_eu\":2,\"c3_2xlarge_us\":2}}" ]
	SmartDeployInterface c1 = new MainSmartDeployer(cloudProvider);
	c1.deploy();

	List<PlatformService> platformServices = c1.getPlatformService();
	List<LoadBalancerService> loadBalancerServices = c1.getLoadBalancerService();
	List<ServiceProvider> serviceProviders  = c1.getServiceProvider();


/** JSON ANNOTATION
{
  "id": "AddQueryDeployer",
  "specification": "QueryServiceImpl['live'] = 2 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl))) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)",
  "DC": [],
  "obj": [
    {
      "name": "platformObj",
      "provides": [
        {
          "ports": [
            "MonitorPlatformService",
            "PlatformService"
          ],
          "num": -1
        }
      ],
      "interface": "PlatformService"
    },
    {
      "name": "loadBalancerObj",
      "provides": [
        {
          "ports": [
            "LoadBalancerService"
          ],
          "num": -1
        }
      ],
      "interface": "LoadBalancerService"
    },
    {
      "name": "serviceProviderObj",
      "provides": [
        {
          "ports": [
            "ServiceProvider"
          ],
          "num": -1
        }
      ],
      "interface": "ServiceProvider"
    }
  ]
}
**/
	
	List<SmartDeployInterface> depl_list = Nil;
	ScalingMonitor m = new ScalingMonitor();
	while (True) {
		ScaleDecision scale_decision =
			m.scale();
		if (scale_decision == ScaleUp) {
			[ SmartDeploy : "{\"id\":\"AddQueryDeployer\",\"specification\":\"QueryServiceImpl['live'] = 2 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl))) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)\",\"DC\":[],\"obj\":[{\"name\":\"platformObj\",\"provides\":[{\"ports\":[\"MonitorPlatformService\",\"PlatformService\"],\"num\":-1}],\"interface\":\"PlatformService\"},{\"name\":\"loadBalancerObj\",\"provides\":[{\"ports\":[\"LoadBalancerService\"],\"num\":-1}],\"interface\":\"LoadBalancerService\"},{\"name\":\"serviceProviderObj\",\"provides\":[{\"ports\":[\"ServiceProvider\"],\"num\":-1}],\"interface\":\"ServiceProvider\"}]}" ]
			SmartDeployInterface c2 = new AddQueryDeployer(cloudProvider,head(platformServices),head(loadBalancerServices),head(serviceProviders));
			c2.deploy();
			depl_list = Cons(c2,depl_list);
		} else if ((scale_decision == ScaleDown) && (depl_list != Nil)) {
			SmartDeployInterface c2 = head(depl_list);
			depl_list = tail(depl_list);
			c2.undeploy();
		}
	}

}

	
