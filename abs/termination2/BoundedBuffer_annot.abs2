/*
 * A working version of a program with two producers and 
 * two consumers comunicating via a shared bounded-buffer
 *
 */

module BoundedBuffer;
import * from ABS.StdLib;

type Data = Int ;
//type Buffer = DataList
data DataList = DataNil | ConsData(Data, DataList) ;

def Data dataHead(DataList dl) = case dl { ConsData(d,l) => d ; };  
def DataList dataTail(DataList dl) = case dl { ConsData(d,l) => l ; }; 

def DataList appendData(Data d, DataList list)
  = concat(list, ConsData(d,DataNil));

def DataList concat(DataList l1 , DataList l2) = 
case l1 { 
    DataNil => l2 ; 
    ConsData(hd,tl) => ConsData(hd, concat(tl,l2)) ; 
};
    
interface Buffer {

    //Unit init();
    Unit append(Data d);
    Data remove();
}

interface Consumer {
    Unit loop(Data d);
} 

interface Producer {
    Unit loop(Data d);
}


class BoundedBuffer (Int size) implements Buffer {
    
    //A bounded buffer
    DataList buffer = DataNil; 
    Int n = 0;

    [buffer <= max(buffer)]
    Unit append(Data d){
        await (n < size) ; 
        buffer = concat(buffer,ConsData(d,DataNil));
        n = n + 1 ; 
    }
    
    Data remove() {
        Data d = 10;
        DataList buffer2 = DataNil; 
        await n > 0 ; 
        d = dataHead(buffer);
        buffer2 = dataTail(buffer);
        buffer = buffer2;
        n = n - 1 ; 
        return d ; 
    }
}

class ProducerImpl (Buffer b) implements Producer {
    
    Unit loop(Data d) {
       while(d > 0) {
       	b!append(d);
       	d = d - 1;
       }
    }
}

class ConsumerImpl (Buffer b) implements Consumer {
    
    Unit loop(Data d) {
       while(d > 0) {
        b!remove();
       	d = d - 1;
       }
    }
}

class Main () {
	Unit main(Int main_nprod, Int main_mcons, Int main_size, Int main_nreq, Int main_mreq) {
        Buffer buff;
	    buff = new local  BoundedBuffer(main_size); 
        while(main_nprod > 0) {
		    Producer p;
		    p = new local  ProducerImpl(buff);
		    p!loop(main_nreq);   
        	main_nprod = main_nprod - 1;
        }
        while(main_mcons > 0) {
		    Consumer c;  
	    	c = new local  ConsumerImpl(buff);
        	c!loop(main_mreq);
        	main_mcons = main_mcons - 1;
        }
	}
}
