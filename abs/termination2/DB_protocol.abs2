// Simple DB protocol from 
// "SYCO: A Systematic Testing Tool for Concurrent Objects", CC'16

module CC2016;
import * from ABS.StdLib;

data Data = DataNull | DataSomething;

interface Worker {
    Unit work(DB db);
    Int ping(Int n);
}

interface DB {
    Unit register(Worker w);
    Data getData(Worker w);
} 

class DBimp(Data dt) implements DB {
    Worker cl = null;

    Unit register(Worker w){
        Fut<Int> f = w!ping(1); 
        Int r = f.get;
        if(r == 1) this.cl = w;  
    }
    Data getData(Worker w){
        Data n = DataNull;
	if(cl == w) n = this.dt;
        else n = DataNull;
	return n;
    }	   
}

class WorkerImp() implements Worker {
    Data datum = DataNull;

    Unit work(DB db){
       Fut<Data> f = db!getData(this);
       this.datum = f.get;
    }
    Int ping(Int n){
       Int m = n;
       return n;
    }
}


interface MainI{
    Unit main();
}

class Main implements MainI{
    Unit main(){
	    DB db = new local  DBimp(DataSomething);
	    Worker w = new local  WorkerImp();
	    db!register(w);
	    w!work(db);
	}
}
