module Running;

// Running example of the JAR article

interface Task {}
class TaskC implements Task {}

interface Proc {
  Unit startTask( Task tk );
}

class ProcC implements Proc {
  Unit startTask( Task tk ) {}
}

interface TQ {
	Unit addTasks(List<Task> list);
	Unit consumeSync(List<Proc> ps);
	Unit addTask(Task tk);
}

class TaskQueue implements TQ{
	List<Task> pending=Nil;

	[pending <= max(pending)]
	Unit addTasks(List<Task> list){
		while (list != Nil) {
			Task tk = head(list);
			list = tail(list);
			Fut<Unit> f = this ! addTask(tk);
			await f?;
		}
	}

	[pending <= max(pending)]
	Unit consumeSync(List<Proc> ps){
		while (pending != Nil) {
			Task tk = head(pending);
			pending = tail(pending);
			Proc p = head(ps);
			Fut<Unit> f = p ! startTask(tk);
			[old(pending) == pending]
			await f?;
		}
	}
	
	[pending <= max(pending)]
	Unit addTask(Task tk){
		pending= appendright(pending,tk);
	}

}

interface M {
	Unit  main(List<Task> main_l,List<Proc> main_ps);
}

class Main implements M {

	// Everything terminating
	Unit  main(List<Task> main_l,List<Proc> main_ps){
		TQ q = new local  TaskQueue();
		Fut<Unit> f = q ! addTasks(main_l);
		await f?;
		q ! consumeSync(main_ps);
	}
}

