module ReplicationSystem;


import * from ABS.DC;
import * from ABS.Scheduler;
import * from ABS.StdLib;

class ReplicationSystemMain {
  List<Pair<String, List<Item>>> businessItems = list(Cons( Pair( "Business rules", list(Cons( FileItem( "config", "config/business.xml" ), Nil )) ), Nil ));
  List<Pair<String, List<Item>>> dataItems = list(Cons( Pair( "Data", list(Cons( LogItem( "indices/itemstore/log" ), Cons( LogItem( "indices/tree/log" ), Nil ) )) ), Cons( Pair( "Data", list(Cons( FileItem( "indices/itemstore", "indices/itemstore/i" ), Cons( FileItem( "indices/tree", "indices/tree/t" ), Nil ) )) ), Nil ) ));
  List<Pair<String, List<Item>>> searchItems = list(Cons( Pair( "Search", list(Cons( SearchItem( "indices/search" ), Nil )) ), Nil ));
  Map<String, Pair<Int, Deadline>> schedulemaps = map(Cons( Pair( "Business rules", Pair( 0, Duration( 10 ) ) ), Cons( Pair( "Data", Pair( 0, Duration( 10 ) ) ), Cons( Pair( "Search", Pair( 0, Duration( 10 ) ) ), Nil ) ) ));
  
  Unit run(){
    List<Schedule> schedules = this.getSchedules();
    Set<ClientId> cids = this.getCids();
    Int maxJobs = this.getMaxJobs();
    Int maxUpdates = this.getMaxUpdates();
    new ReplicationSystem(maxUpdates, schedules, maxJobs, cids);
  }
  Int getMaxJobs(){
    return 5;
  }
  Int getMaxUpdates(){
    return 3;
  }
  Set<ClientId> getCids(){
    Int s = 2;
    Set<Int> cs = EmptySet;
    while (( s > 0 )) {
      cs = Insert( s, cs );
      s = ( s - 1 );
    }
    return cs;
  }
  Int getNumberOfClients(){
    return 1;
  }
  Map<String, Pair<Int, Deadline>> getScheduleMap(){
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMapORIGIN_ScheduleDelta();
    m = put(m, "Business rules", Pair( 10, Duration( 20 ) ));
    return m;
  }
  List<Schedule> getSchedules(){
    List<Schedule> ss = this.getSchedulesORIGIN_ScheduleDelta();
    List<Schedule> ss2 = this.getSchedulesORIGIN_BusinessDelta();
    return concatenate(ss, ss2);
  }
  Map<String, Pair<Int, Deadline>> getScheduleMapORIGIN_ScheduleDelta(){
    return schedulemaps;
  }
  List<Schedule> getSchedulesORIGIN_ScheduleDelta(){
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMap();
    return itemMapToSchedule(Nil, m, searchItems);
  }
  List<Schedule> getSchedulesORIGIN_BusinessDelta(){
    List<Schedule> ss = this.getSchedulesORIGIN_ScheduleDelta();
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMap();
    return itemMapToSchedule(ss, m, businessItems);
  }
  }

def List<A> concatenates<A>(List<List<A>> lists) = 
  case lists {
    Nil => Nil;
    Cons( x, xs ) => concatenate(x, concatenates(xs));
  };

def Map<A, B> join<A, B>(Map<A, B> f, Map<A, B> g) = 
  case g {
    EmptyMap => f;
    InsertAssoc( x, xs ) => case contains(keys(f), fst(x)) {
      True => join(f, xs);
      False => InsertAssoc( x, join(f, xs) );
    };
  };

data Command = StartSnapShot| EndSnapShot| ListSchedule| SearchSchedule(String ssname)| EndSearchFile| AppendSearchFile| ReceivePatternFile| SkipFile| ContinueFile| OverwriteFile| EmptyCommand;



data JobType = Replication| Boot;

data ReplicationItemType = SearchReplicationDirectory| LogReplicationItem| ReplicationFilePattern;

type ClientId = Int;

type TransactionId = Int;

def A fromJustDefault<A>(Maybe<A> m, A a) = 
  case m {
    Just( j ) => j;
    Nothing => a;
  };

def Set<A> fsts<A, B>(Set<Pair<A, B>> ps) = 
  case ps {
    EmptySet => EmptySet;
    Insert( x, xs ) => Insert( fst(x), fsts(xs) );
  };

def Set<B> snds<A, B>(Set<Pair<A, B>> ps) = 
  case ps {
    EmptySet => EmptySet;
    Insert( x, xs ) => Insert( snd(x), snds(xs) );
  };

def Bool range(List<Int> vals, Int limit, Bool strict) = 
  case vals {
    Nil => ~ strict;
    _ => let ( Int r ) = ( maximum(vals) - minimum(vals) ) in case strict {
      True => ( r == limit );
      False => ( r <= limit );
    };
  };

def Int maximum(List<Int> l) = 
  case l {
    Cons( x, xs ) => maximum0(xs, x);
  };

def Int maximum0(List<Int> l, Int i) = 
  case l {
    Nil => i;
    Cons( x, xs ) => maximum0(xs, max(x, i));
  };

def Int min(Int a, Int b) = 
  case ( a < b ) {
    True => a;
    False => b;
  };

def Int minimum(List<Int> l) = 
  case l {
    Cons( x, xs ) => minimum0(xs, x);
  };

def Int minimum0(List<Int> l, Int i) = 
  case l {
    Nil => i;
    Cons( x, xs ) => minimum0(xs, min(x, i));
  };

def Set<A> listToSet<A>(List<A> a) = 
  case a {
    Nil => EmptySet;
    Cons( x, xs ) => Insert( x, listToSet(xs) );
  };

def Map<A, B> setToMap<A, B>(Set<A> a, B b) = 
  case a {
    EmptySet => EmptyMap;
    Insert( x, xs ) => InsertAssoc( Pair( x, b ), setToMap(xs, b) );
  };

def List<A> take<A>(List<A> ss, Int i) = 
  case i {
    0 => Nil;
    _ => case ss {
      Nil => Nil;
      Cons( x, xs ) => Cons( x, take(xs, ( i - 1 )) );
    };
  };

def Set<A> choose<A>(Set<A> ss, Int i) = 
  case i {
    0 => EmptySet;
    _ => case ss {
      EmptySet => EmptySet;
      Insert( x, xs ) => Insert( x, choose(xs, ( i - 1 )) );
    };
  };

def Map<A, B> takeMap<A, B>(Map<A, B> mp, Int i) = 
  case i {
    0 => EmptyMap;
    _ => case mp {
      EmptyMap => EmptyMap;
      InsertAssoc( x, xs ) => InsertAssoc( x, takeMap(xs, ( i - 1 )) );
    };
  };

def Bool isAppendCommand(Command c) = 
  case c {
    SkipFile => True;
    ContinueFile => True;
    OverwriteFile => True;
    _ => False;
  };

def List<A> setAt<A>(List<A> list, A a, Int i) = 
  case list {
    Nil => Nil;
    Cons( p, l ) => case i {
      0 => Cons( a, l );
      _ => Cons( p, setAt(l, a, ( i - 1 )) );
    };
  };

def Bool setEquals<A>(Set<A> s, Set<A> t) = 
  ( ( size(s) == size(t) ) && subset(s, t) );

def Bool subset<A>(Set<A> s, Set<A> t) = 
  case t {
    EmptySet => True;
    Insert( x, xs ) => case contains(s, x) {
      True => subset(s, xs);
      False => False;
    };
  };

def Int pow(Int b, Int e) = 
  case e {
    0 => 1;
    _ => ( b * pow(b, ( e - 1 )) );
  };

[( result() == text )]
def List<String> split(String text, String c) = 
  case ( strlen(text) == 0 ) {
    True => Nil;
    False => split2(tailStr(text), c, Cons( headStr(text), Nil ));
  };

def List<String> split2(String text, String c, List<String> result) = 
  case result {
    Cons( h, t ) => case ( strlen(text) == 0 ) {
      True => reverse(result);
      False => let ( String hd ) = headStr(text) in case ( hd == c ) {
        True => split2(tailStr(text), c, Cons( "", result ));
        False => split2(tailStr(text), c, Cons( ( h + hd ), t ));
      };
    };
  };

def String headStr(String text) = 
  substr(text, 0, 1);

def String tailStr(String text) = 
  substr(text, 1, ( strlen(text) - 1 ));

def Bool isPrefix<A>(List<A> list1, List<A> list2) = 
  case list2 {
    Nil => True;
    Cons( l, ll ) => case list1 {
      Nil => False;
      Cons( m, mm ) => ( ( l == m ) && isPrefix(mm, ll) );
    };
  };

def List<String> stringToChar(String s) = 
  let ( Int l ) = strlen(s) in case ( l == 0 ) {
    True => Nil;
    False => Cons( headStr(s), stringToChar(tailStr(s)) );
  };

def Bool isPrefixText(String s1, String s2) = 
  isPrefix(stringToChar(s2), stringToChar(s1));

def Bool filter(String pattern, String text) = 
  isPrefixText(pattern, text);

def Set<String> filters(String pattern, Set<String> ts) = 
  case ts {
    EmptySet => EmptySet;
    Insert( l, ls ) => case filter(pattern, l) {
      True => Insert( l, filters(pattern, ls) );
      False => filters(pattern, ls);
    };
  };

type TransactionHistories = List<Transaction>;

type Transaction = Pair<TransactionId, Map<FileId, FileContent>>;

data JobData = JobData(String jschedname, Int waitperiod, Int jdeadline, Int jcost, Int beforetime, Int deadlineafter, Int totaltime, Int jobid);

















def Maybe<JobData> updateJobData(Maybe<JobData> jd, Int cost, Int currentDeadline, Time current) = 
  case jd {
    Just( JobData( a, b, c, d, e, f, g, h ) ) => Just( JobData( a, b, c, cost, e, currentDeadline, abs(( timeValue(current) - g )), h ) );
  };

type TestData = Map<TransactionId, Map<FileId, FileContent>>;

type FileId = String;

type FileSize = Int;

type File = Pair<FileId, FileContent>;

type Directory = Pair<FileId, FileContent>;

type ReplicationItem = Pair<TransactionId, Set<File>>;

type FileEntry = Map<FileId, FileContent>;

[( m <= max(m) )]
def Set<Pair<A, B>> entrySet<A, B>(Map<A, B> m) = 
  case m {
    EmptyMap => EmptySet;
    InsertAssoc( x, xs ) => Insert( x, entrySet(xs) );
  };

[( result() == 2 )]
def Pair<FileId, FileContent> qualifyEntry(Pair<FileId, FileContent> e, FileId path) = 
  case isDirectory(snd(e)) {
    True => right(fromJust(qualify(Just( Right( e ) ), path)));
    False => left(fromJust(qualify(Just( Left( e ) ), path)));
  };

def Map<FileId, FileContent> qualifyFileEntry(Map<FileId, FileContent> m, FileId path) = 
  case m {
    EmptyMap => EmptyMap;
    InsertAssoc( x, xs ) => InsertAssoc( qualifyEntry(x, path), qualifyFileEntry(xs, path) );
  };

def Map<String, Schedule> schedulemap(Schedules ss) = 
  case ss {
    EmptySet => EmptyMap;
    Insert( x, xs ) => case x {
      NoSchedule => schedulemap(xs);
      _ => InsertAssoc( Pair( schedname(x), x ), schedulemap(xs) );
    };
  };

data Schedule = Schedule(String schedname, List<Item> items, Int sched, Deadline dline)| NoSchedule;









data Item = SearchItem(FileId)| FileItem(FileId, String)| LogItem(FileId);

def Bool isSearchItem(Item s) = 
  case s {
    SearchItem( _ ) => True;
    _ => False;
  };

def Bool isFileItem(Item s) = 
  case s {
    FileItem( _, _ ) => True;
    _ => False;
  };

def Bool isLogItem(Item s) = 
  case s {
    LogItem( _ ) => True;
    _ => False;
  };

def Maybe<Schedule> getSchedule(List<Schedule> ss, String n) = 
  case ss {
    Nil => Nothing;
    Cons( x, xs ) => case ( schedname(x) == n ) {
      True => Just( x );
      False => getSchedule(xs, n);
    };
  };

def List<Schedule> itemMapToSchedule(List<Schedule> ss, Map<String, Pair<Int, Deadline>> ts, List<Pair<String, List<Item>>> im) = 
  case im {
    Nil => ss;
    Cons( Pair( x, y ), xs ) => let ( Maybe<Schedule> s ) = getSchedule(ss, x) in case s {
      Just( k ) => itemMapToSchedule(Cons( Schedule( schedname(k), concatenate(y, items(k)), sched(k), dline(k) ), without(ss, k) ), removeKey(ts, x), xs);
      Nothing => let ( Pair<Int, Deadline> p ) = lookupUnsafe(ts, x) in itemMapToSchedule(Cons( Schedule( x, y, fst(p), snd(p) ), ss ), removeKey(ts, x), xs);
    };
  };

def Schedules insertReplicationItemsTo(Schedules ss, String name, List<Item> items) = 
  case ss {
    EmptySet => EmptySet;
    Insert( x, xs ) => case ( schedname(x) == name ) {
      True => Insert( insertReplicationItems(x, items), xs );
      False => Insert( x, insertReplicationItemsTo(xs, name, items) );
    };
  };

def Schedule insertReplicationItems(Schedule s, List<Item> items) = 
  case s {
    Schedule( n, ll, d, e ) => Schedule( n, concatenate(ll, items), d, e );
  };

def Set<Item> scheduleItems(Schedules ss) = 
  case ss {
    EmptySet => EmptySet;
    Insert( x, xs ) => union(listToSet(items(x)), scheduleItems(xs));
  };

def Either<FileId, Pair<FileId, String>> item(Item s) = 
  case s {
    SearchItem( i ) => Left( i );
    FileItem( i, r ) => Right( Pair( i, r ) );
    LogItem( i ) => Left( i );
  };

type Schedules = Set<Schedule>;

data FileContent = Content(FileSize content)| Entries(FileEntry entries)| NoContent;





def Bool isAncester(FileId id1, FileId id2) = 
  isPrefix(deroot(split(id2, fileSep())), deroot(split(id1, fileSep())));

def List<String> deroot(List<String> path) = 
  let ( FileId r ) = rootId() in case path {
    Cons( r, ps ) => ps;
    _ => path;
  };

def File file(FileId i, FileSize s) = 
  Pair( i, Content( s ) );

def Directory rootDir() = 
  emptyDir(rootId());

def Directory emptyDir(FileId i) = 
  Pair( i, Entries( EmptyMap ) );

def Directory dir(FileId i, FileEntry e) = 
  Pair( i, Entries( e ) );

def String fileSep() = 
  "/";

def FileId rootId() = 
  "root";

def Bool isFile(FileContent c) = 
  case c {
    Content( _ ) => True;
    _ => False;
  };

def Bool isDirectory(FileContent c) = 
  ~ isFile(c);

def FileSize fileContent(File f) = 
  content(snd(f));

def FileEntry dirContent(Directory f) = 
  entries(snd(f));

def FileId getFileId(Either<File, Directory> f) = 
  case f {
    Left( Pair( id, _ ) ) => id;
    Right( Pair( id, _ ) ) => id;
  };

def FileContent getFileContent(Either<File, Directory> f) = 
  case f {
    Left( Pair( _, s ) ) => s;
    Right( Pair( _, fs ) ) => fs;
  };

def Either<File, Directory> makeContent(Pair<FileId, FileContent> content) = 
  case isFile(snd(content)) {
    True => Left( content );
    False => Right( content );
  };

def FileId makePath(FileId dir, FileId f) = 
  ( ( dir + fileSep() ) + f );

def FileId makePaths(List<String> fs) = 
  case fs {
    Nil => "";
    Cons( f, Nil ) => f;
    Cons( f, gs ) => ( ( f + fileSep() ) + makePaths(gs) );
  };

def Pair<FileId, FileId> splitFileId(FileId f) = 
  Pair( dirName(f), fileName(f) );

def FileId fileName(FileId f) = 
  head(reverse(split(f, fileSep())));

def FileId dirName(FileId f) = 
  makePaths(reverse(tail(reverse(split(f, fileSep())))));

def Set<FileId> getFileIdFromDir(Directory d) = 
  case snd(d) {
    Entries( e ) => case ( fst(d) == rootId() ) {
      True => getFileIdFromEntries1(e);
      False => getFileIdFromEntries(fst(d), e);
    };
  };

def Set<FileId> getFileIdFromEntries1(FileEntry fe) = 
  case fe {
    EmptyMap => EmptySet;
    InsertAssoc( Pair( i, c ), fs ) => case isFile(c) {
      True => Insert( i, getFileIdFromEntries1(fs) );
      False => union(getFileIdFromEntries(i, entries(c)), getFileIdFromEntries1(fs));
    };
  };

def Set<FileId> getFileIdFromEntries(FileId id, FileEntry fe) = 
  case fe {
    EmptyMap => EmptySet;
    InsertAssoc( Pair( i, c ), fs ) => case isFile(c) {
      True => Insert( makePath(id, i), getFileIdFromEntries(id, fs) );
      False => union(getFileIdFromEntries(makePath(id, i), entries(c)), getFileIdFromEntries(id, fs));
    };
  };

def Bool hasEntriesIn(Directory d, FileId id) = 
  case snd(d) {
    Entries( e ) => hasEntry(e, id);
  };

def Bool hasEntry(FileEntry f, FileId id) = 
  isJust(findFromEntry(f, id));

def Maybe<Either<File, Directory>> findFromEntryIn(Directory d, FileId id) = 
  case snd(d) {
    Entries( e ) => findFromEntry(e, id);
  };

def Maybe<Either<File, Directory>> findFromEntry(FileEntry f, FileId id) = 
  case contains(keys(f), id) {
    True => case lookupUnsafe(f, id) {
      Content( s ) => makeMaybeEitherValue(True, id, Content( s ));
      Entries( e ) => makeMaybeEitherValue(False, id, Entries( e ));
    };
    False => case f {
      InsertAssoc( Pair( i, Content( _ ) ), fm ) => findFromEntry(fm, id);
      InsertAssoc( Pair( i, Entries( g ) ), fm ) => case findFromEntry(g, id) {
        Nothing => findFromEntry(fm, id);
        r => qualify(r, i);
      };
      EmptyMap => Nothing;
    };
  };

def Maybe<Either<File, Directory>> qualify(Maybe<Either<File, Directory>> r, FileId path) = 
  case r {
    Just( h ) => let ( FileId hi ) = makePath(path, getFileId(h)) in let ( FileContent hc ) = getFileContent(h) in case h {
      Left( _ ) => makeMaybeEitherValue(True, hi, hc);
      Right( _ ) => makeMaybeEitherValue(False, hi, hc);
    };
    Nothing => Nothing;
  };

def Maybe<Either<File, Directory>> makeMaybeEitherValue(Bool isfile, FileId id, FileContent c) = 
  case isfile {
    True => Just( Left( Pair( id, c ) ) );
    _ => Just( Right( Pair( id, c ) ) );
  };

def Bool hasQualifiedEntriesIn(Directory d, FileId qualified) = 
  case snd(d) {
    Entries( e ) => hasQualifiedEntry(e, qualified);
  };

def Bool hasQualifiedEntry(FileEntry f, FileId qualified) = 
  isJust(getFromEntry(f, qualified));

def Maybe<FileContent> getFromEntryIn(Directory d, FileId qualified) = 
  case snd(d) {
    Entries( e ) => case ( fst(d) == rootId() ) {
      True => getFromEntry(e, qualified);
      _ => getFromEntry(InsertAssoc( d, EmptyMap ), qualified);
    };
  };

def Maybe<FileContent> getFromEntry(FileEntry entry, FileId qualified) = 
  let ( List<String> paths ) = split(qualified, fileSep()) in case ( length(paths) > 0 ) {
    True => case contains(keys(entry), head(paths)) {
      True => let ( FileContent cc ) = lookupUnsafe(entry, head(paths)) in case length(tail(paths)) {
        0 => Just( cc );
        _ => case cc {
          Content( _ ) => Nothing;
          Entries( e ) => getFromEntry(e, makePaths(tail(paths)));
        };
      };
      False => Nothing;
    };
    False => Nothing;
  };

def Directory updateDirWithContent(Directory d, FileId i, FileContent c) = 
  updateDirWith(d, makeContent(Pair( i, c )));

def Directory updateDirWithContents(Directory d, Map<FileId, FileContent> contents) = 
  case contents {
    EmptyMap => d;
    InsertAssoc( Pair( i, c ), cs ) => updateDirWithContents(updateDirWithContent(d, i, c), cs);
  };

def Directory updateDirWithFile(Directory d, File f) = 
  updateDirWith(d, Left( f ));

def Directory updateDirWithDir(Directory d, Directory f) = 
  updateDirWith(d, Right( f ));

def Directory updateDirWith(Directory d, Either<File, Directory> f) = 
  case snd(d) {
    Entries( e ) => Pair( fst(d), Entries( updateFile(e, f) ) );
  };

def FileEntry updateFile(FileEntry fe, Either<File, Directory> f) = 
  updateFile1(fe, getFileContent(f), deroot(split(getFileId(f), fileSep())));

def FileEntry updateFile1(FileEntry fe, FileContent c, List<String> path) = 
  case path {
    Nil => fe;
    Cons( p, Nil ) => put(fe, p, c);
    Cons( p, ps ) => case contains(keys(fe), p) {
      True => case lookupUnsafe(fe, p) {
        Entries( dc ) => put(fe, p, Entries( updateFile1(dc, c, ps) ));
        _ => put(fe, p, create(ps, c));
      };
      False => put(fe, p, create(ps, c));
    };
  };

def FileContent create(List<String> path, FileContent c) = 
  case path {
    Cons( p, Nil ) => Entries( InsertAssoc( Pair( p, c ), EmptyMap ) );
    Cons( p, ps ) => Entries( InsertAssoc( Pair( p, create(ps, c) ), EmptyMap ) );
  };

def Directory applyChanges(Directory d, TransactionHistories th, TransactionId id) = 
  case th {
    Nil => d;
    Cons( x, xs ) => case ( fst(x) <= id ) {
      True => applyChanges(updateDirWithContents(d, snd(x)), xs, id);
      False => d;
    };
  };

def Map<A, B> firstValues<A, B>(Map<A, List<B>> mp, B default) = 
  case mp {
    EmptyMap => EmptyMap;
    InsertAssoc( Pair( x, ls ), xs ) => case ls {
      Nil => InsertAssoc( Pair( x, default ), firstValues(xs, default) );
      Cons( y, ys ) => InsertAssoc( Pair( x, y ), firstValues(xs, default) );
    };
  };

interface Tester {
  Unit analyse();}

interface Updater {
  Unit shutDown();}

interface Commandee {
  [Atomic]
  Unit command(Command command);}

interface Worker extends Commandee {
  ClientId forClient();}

interface Node {
  DataBase getDataBase();
  Bool isShutdownRequested();
  Unit requestShutDown();}

interface Network {
  Unit shutDown(SyncClient client);}

interface ConnectionThread extends Worker {
  }

interface ServerNode extends Node {
  UpdatableDataBase getUpdatableDataBase();
  Schedules listSchedules();
  Schedule getSchedule(String name);}

interface DataBase {
  [Atomic]
  FileContent getContent(FileId fId);
  [Atomic]
  Bool hasFile(FileId fId);
  [Atomic]
  Set<FileId> listFiles();
  [Atomic]
  Maybe<FileContent> listFilesAt(FileId dir);
  [Atomic]
  Directory getRoot();}

interface UpdatableDataBase extends ServerDataBase {
  [Atomic]
  Unit update(Map<FileId, FileContent> changes);
  [Atomic]
  TransactionHistories getTransactions();}

interface ServerDataBase extends DataBase {
  [Atomic]
  TransactionId refresh();}

interface ClientDataBase extends DataBase {
  [Atomic]
  Bool prepareReplicationItem(TransactionId p, Schedule schedule);
  [Atomic]
  Unit updateFile(FileId fId, FileSize size);
  [Atomic]
  Map<String, TransactionId> lastTransactionIds();}

interface SyncServerAcceptor {
  [Far]
  ConnectionThread getConnection(ClientJob job, Int cost);}

interface Resource {
  Unit consume();}

class Resource implements Resource {
  
  
  Unit consume(){
    duration(1, 1);
  }
  }

interface Recorder {
  Unit record(JobData d);}

class Recorder(ClientId id) implements Recorder {
  List<Int> totalTimes = Nil;
  List<Int> deadlines = Nil;
  List<Bool> missedDeadlines = Nil;
  
  [( totalTimes <= max(totalTimes) )] [( deadlines <= max(dealines) )] [( missedDeadlines <= max(missedDeadlines) )]
  Unit record(JobData jd){
    Int d = deadlineafter(jd);
    deadlines = Cons( d, deadlines );
    missedDeadlines = Cons( ( d > 0 ), missedDeadlines );
    totalTimes = Cons( totaltime(jd), totalTimes );
  }
  }

class SyncServerAcceptorImpl([Final] [Near]SyncServer server) implements SyncServerAcceptor {
  Bool accept = True;
  Map<ClientId, Int> current = EmptyMap;
  Int threads = 0;
  Bool rb = True;
  Resource r1;
  Resource r2;
  {
    r1 = new Resource();
    r2 = new Resource();
  }
  
  [( accept <= max(accept) )] [( current <= max(current) )] [( threads <= max(threads) )] [( rb <= max(rb) )] [( r1 <= max(r1) )] [( r2 <= max(r2) )]
  Resource getResource(){
    Resource r = null;
    if ( rb ){
      r = r1;
      rb = False;
    } else {
      r = r2;
      rb = True;
    }
    return r;
  }
  [( accept <= max(accept) )] [( current <= max(current) )] [( threads <= max(threads) )] [( rb <= max(rb) )] [( r1 <= max(r1) )] [( r2 <= max(r2) )]
  ConnectionThread getConnection(ClientJob job, Int cost){
    ConnectionThread thread = null;
    Bool shutdown = server.isShutdownRequested();
    if ( ~ shutdown ){
      Resource resource = this.getResource();
      thread = new ConnectionThreadImpl(job, server, resource, threads, cost);
      threads = ( threads + 1 );
    }
    return thread;
  }
  }

class TesterImpl(ServerNode expected, Client actual) implements Tester {
  Schedules schedules = EmptySet;
  Map<String, TransactionId> scheduleResults = EmptyMap;
  Set<Triple<FileId, FileContent, FileContent>> result = EmptySet;
  
  [( schedules <= max(schedules) )] [( scheduleResults <= max(scheduleResults) )] [( result <= max(result) )]
  Unit analyse(){
    Fut<UpdatableDataBase> fe = expected!getUpdatableDataBase();
    UpdatableDataBase e = fe.get;
    Fut<Schedules> schf = expected!listSchedules();
    schedules = schf.get;
    Fut<TransactionHistories> tf = e!getTransactions();
    TransactionHistories transactions = tf.get;
    Fut<ClientDataBase> fa = actual!getClientDataBase();
    ClientDataBase a = fa.get;
    Fut<Map<String, TransactionId>> idf = a!lastTransactionIds();
    scheduleResults = idf.get;
    Fut<Directory> rf = a!getRoot();
    Directory act = rf.get;
    this.checkDatas(scheduleResults, reverse(transactions), act);
  }
  [( schedules <= max(schedules) )] [( scheduleResults <= max(scheduleResults) )] [( result <= max(result) )]
  Unit checkDatas(Map<String, TransactionId> tids, TransactionHistories th, Directory act){
    while (hasNext(schedules)) {
      Pair<Schedules, Schedule> nt = next(schedules);
      schedules = fst(nt);
      Schedule s = snd(nt);
      Int tid = lookupDefault(tids, schedname(s), - 1);
      if ( ( tid != - 1 ) ){
        Directory exp = applyChanges(rootDir(), th, tid);
        List<Item> is = items(s);
        while (( is != Nil )) {
          this.checkData(head(is), exp, act);
          is = tail(is);
        }
      }
    }
  }
  [( schedules <= max(schedules) )] [( scheduleResults <= max(scheduleResults) )] [( result <= max(result) )]
  Bool hasFile(DataBase b, FileId f){
    Fut<Bool> fb = b!hasFile(f);
    return fb.get;
  }
  Unit checkData(Item i, Directory exp, Directory act){
    this.checkDataORIGIN_DirDelta(i, exp, act);
    if ( isRight(item(i)) ){
      FileId id = fst(right(item(i)));
      String pattern = snd(right(item(i)));
      Bool eh = hasQualifiedEntriesIn(exp, id);
      Bool ah = hasQualifiedEntriesIn(act, id);
      if ( ( ( eh != ah ) && eh ) ){
        FileContent ce = fromJust(getFromEntryIn(exp, id));
        assert ~ isFile(ce);
        assert emptySet(filters(pattern, getFileIdFromDir(dir(id, entries(ce)))));
      } else if ( eh ){
        FileContent ce = fromJust(getFromEntryIn(exp, id));
        FileContent ca = fromJust(getFromEntryIn(act, id));
        if ( isFile(ce) ){
          if ( filter(pattern, id) ){
            this.compareFile(file(id, content(ce)), file(id, content(ca)));
          }
        } else {
          this.compareDirWithPattern(pattern, dir(id, entries(ce)), dir(id, entries(ca)));
        }
      }
    }
  }
  Unit compareEntrySets(Set<FileId> eids, Set<FileId> aids, Map<FileId, FileContent> ee, Map<FileId, FileContent> ae){
    assert ( size(eids) == size(aids) );
    while (hasNext(eids)) {
      Pair<Set<FileId>, FileId> nd = next(eids);
      FileId id = snd(nd);
      eids = fst(nd);
      FileContent es = lookupDefault(ee, id, NoContent);
      FileContent as = lookupDefault(ae, id, NoContent);
      result = Insert( Triple( id, es, as ), result );
      assert ( es == as );
    }
  }
  Unit compareFile(File e, File a){
    FileId id = getFileId(Left( e ));
    FileContent es = getFileContent(Left( e ));
    FileContent as = getFileContent(Left( a ));
    result = Insert( Triple( id, es, as ), result );
    assert ( es == as );
  }
  Unit compareDir(Directory e, Directory a){
    this.compareEntrySets(getFileIdFromDir(e), getFileIdFromDir(a), qualifyFileEntry(entries(snd(e)), fst(e)), qualifyFileEntry(entries(snd(a)), fst(a)));
  }
  Unit checkDataORIGIN_ReplicationItemDelta(Item i, Directory exp, Directory act){
    
  }
  Unit compareDirWithPattern(String pattern, Directory e, Directory a){
    this.compareEntrySets(filters(pattern, getFileIdFromDir(e)), filters(pattern, getFileIdFromDir(a)), qualifyFileEntry(entries(snd(e)), fst(e)), qualifyFileEntry(entries(snd(a)), fst(a)));
  }
  Unit checkDataORIGIN_DirDelta(Item i, Directory exp, Directory act){
    if ( isLeft(item(i)) ){
      FileId id = left(item(i));
      Bool eh = hasQualifiedEntriesIn(exp, id);
      Bool ah = hasQualifiedEntriesIn(act, id);
      assert ( eh == ah );
      if ( eh ){
        FileContent ce = fromJust(getFromEntryIn(exp, id));
        FileContent ca = fromJust(getFromEntryIn(act, id));
        if ( isFile(ce) ){
          this.compareFile(file(id, content(ce)), file(id, content(ca)));
        } else {
          this.compareDir(dir(id, entries(ce)), dir(id, entries(ca)));
        }
      }
    } else {
      this.checkDataORIGIN_ReplicationItemDelta(i, exp, act);
    }
  }
  }

class Network([Far] [Final]SyncServer server, Set<[Far]SyncClient> clients, [Far]Updater updater) implements Network {
  Bool ready = False;
  Set<Tester> testers = EmptySet;
  
  [( ready <= max(ready) )] [( testers <= max(testers) )]
  Unit run(){
    Set<SyncClient> cs = clients;
    while (hasNext(cs)) {
      Pair<Set<SyncClient>, SyncClient> nt = next(cs);
      Tester tester = new TesterImpl(server, snd(nt));
      testers = Insert( tester, testers );
      cs = fst(nt);
    }
    ready = True;
  }
  [( ready <= max(ready) )] [( testers <= max(testers) )]
  Unit shutDown(SyncClient client){
    await ready;
    clients = remove(clients, client);
    if ( ( clients == EmptySet ) ){
      Fut<Unit> ss = updater!shutDown();
      ss.get;
      ss = server!requestShutDown();
      ss.get;
      Set<Tester> ts = testers;
      while (hasNext(ts)) {
        Pair<Set<Tester>, Tester> nt = next(ts);
        Tester tester = snd(nt);
        tester!analyse();
        ts = fst(nt);
      }
    }
  }
  }

class UpdaterImpl([Final]Int updates, SyncServer server) implements Updater {
  Bool sd = False;
  List<Map<FileId, FileContent>> histories = Nil;
  [Final]
  Int best = 5;
  [Final]
  Int worst = 10;
  [Final]
  FileSize limit = 5;
  List<FileId> replicationItems = list(Cons( "indices/itemstore/i1", Cons( "indices/itemstore/i2", Cons( "indices/itemstore/log/j1", Cons( "indices/search/s1", Cons( "indices/search/s2", Cons( "indices/tree/t1", Cons( "indices/tree/log/j2", Cons( "config/random.xml", Cons( "config/business.xml", Nil ) ) ) ) ) ) ) ) ));
  
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Unit run(){
    Fut<UpdatableDataBase> fd = server!getUpdatableDataBase();
    UpdatableDataBase db = fd.get;
    Map<FileId, FileContent> changes = EmptyMap;
    Int count = 0;
    while (( ~ sd && ( ( updates < 0 ) || ( count < updates ) ) )) {
      changes = this.makeChange();
      histories = Cons( changes, histories );
      if ( ( changes != EmptyMap ) ){
        Fut<Unit> u = db!update(changes);
        u.get;
      }
      await duration(best, worst);
      count = ( count + 1 );
    }
    this.shutDown();
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Map<FileId, FileContent> makeChange(){
    List<FileId> fs = this.chooseFile();
    Map<FileId, FileContent> result = this.assignContent(fs, limit);
    return result;
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Unit shutDown(){
    sd = True;
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Map<FileId, FileContent> assignContent(List<FileId> w, FileSize limit){
    Map<FileId, FileContent> result = EmptyMap;
    while (( w != Nil )) {
      Int rand = random(limit);
      result = InsertAssoc( file(head(w), ( rand + 1 )), result );
      w = tail(w);
    }
    return result;
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  List<FileId> chooseFile(){
    List<FileId> files = replicationItems;
    List<FileId> result = Nil;
    while (( files != Nil )) {
      Int rand = random(2);
      if ( ( rand == 0 ) ){
        result = Cons( head(files), result );
      }
      files = tail(files);
    }
    return result;
  }
  }

class DataBaseImpl implements ServerDataBase, ClientDataBase, UpdatableDataBase {
  Int count = 0;
  Map<String, List<TransactionId>> transactions = EmptyMap;
  TransactionHistories histories = Nil;
  Pair<TransactionId, Map<FileId, FileContent>> currentTransaction = Pair( - 1, EmptyMap );
  Directory rdir = rootDir();
  
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  TransactionHistories getTransactions(){
    return histories;
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Unit update(Map<FileId, FileContent> changes){
    rdir = updateDirWithContents(rdir, changes);
    currentTransaction = Pair( ( fst(currentTransaction) + 1 ), changes );
    histories = Cons( currentTransaction, histories );
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  TransactionId refresh(){
    count = ( count + 1 );
    return fst(currentTransaction);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  FileContent getContent(FileId qualified){
    Maybe<FileContent> result = Nothing;
    if ( ( qualified == rootId() ) ){
      result = Just( getFileContent(Right( rdir )) );
    } else {
      result = getFromEntryIn(rdir, qualified);
    }
    assert ( result != Nothing );
    return fromJust(result);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Bool hasFile(FileId qualified){
    return hasQualifiedEntriesIn(rdir, qualified);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Directory getRoot(){
    return rdir;
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Bool prepareReplicationItem(TransactionId p, Schedule schedule){
    Bool result = False;
    String name = schedname(schedule);
    List<TransactionId> tids = lookupDefault(transactions, name, Nil);
    if ( ~ contains(set(tids), p) ){
      transactions = put(transactions, name, Cons( p, tids ));
      result = True;
    }
    return result;
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Map<String, TransactionId> lastTransactionIds(){
    return firstValues(transactions, - 1);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Unit updateFile(FileId qualified, FileSize size){
    rdir = updateDirWithFile(rdir, file(qualified, size));
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [( result() <= max(qualifiedDir) )] [Atomic]
  Maybe<FileContent> listFilesAt(FileId qualifiedDir){
    return getFromEntryIn(rdir, qualifiedDir);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Set<FileId> listFiles(){
    Set<FileId> allqualified = getFileIdFromDir(rdir);
    return allqualified;
  }
  }

class SyncServerImpl(Schedules schedules, Set<ClientId> clients) implements SyncServer {
  Bool shutDown = False;
  [Far]
  SyncServerClientCoordinator coordinator;
  [Near]
  SyncServerAcceptor acceptor;
  [Near]
  UpdatableDataBase db;
  Map<String, Schedule> scheduleMap = schedulemap(schedules);
  Map<Schedule, ReplicationSnapshot> snapshots = EmptyMap;
  {
    db = new local DataBaseImpl();
  }
  
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  DataBase getDataBase(){
    return db;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Schedule getSchedule(String name){
    assert contains(keys(scheduleMap), name);
    return lookupUnsafe(scheduleMap, name);
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Schedules listSchedules(){
    return schedules;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  UpdatableDataBase getUpdatableDataBase(){
    return db;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Bool isShutdownRequested(){
    return shutDown;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Unit requestShutDown(){
    shutDown = True;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  SyncServerClientCoordinator getCoordinator(){
    await ( coordinator != null );
    return coordinator;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  SyncServerAcceptor getAcceptor(){
    await ( acceptor != null );
    return acceptor;
  }
  Unit run(){
    Schedules ss = schedules;
    while (hasNext(ss)) {
      Pair<Schedules, Schedule> ns = next(ss);
      ss = fst(ns);
      ReplicationSnapshot shot = new local ReplicationSnapshotImpl(db, set(Cons( snd(ns), Nil )));
      snapshots = InsertAssoc( Pair( snd(ns), shot ), snapshots );
    }
    coordinator = new SyncServerClientCoordinatorImpl(this, clients);
    coordinator!setSnapshots(snapshots);
    acceptor = new local SyncServerAcceptorImpl(this);
  }
  ReplicationSnapshot getReplicationSnapshot(Schedule schedule){
    assert contains(keys(snapshots), schedule);
    return lookupUnsafe(snapshots, schedule);
  }
  }

class ReplicationSystem([Final]Int maxUpdates, [Final]List<Schedule> schedules, [Final]Int maxJobs, [Final]Set<ClientId> cids) {
  
  
  SyncServer getSyncServer(){
    SyncServer syncserver = new SyncServerImpl(listToSet(schedules), cids);
    return syncserver;
  }
  SyncClient getSyncClient(ClientId id){
    SyncClient syncclient = new SyncClientImpl(maxJobs, id);
    return syncclient;
  }
  Unit run(){
    SyncServer syncserver = this.getSyncServer();
    Set<[Far]SyncClient> syncclients = EmptySet;
    Set<ClientId> iterator = cids;
    while (hasNext(iterator)) {
      Pair<Set<ClientId>, ClientId> nt = next(iterator);
      SyncClient syncclient = this.getSyncClient(snd(nt));
      syncclients = insertElement(syncclients, syncclient);
      iterator = fst(nt);
    }
    Updater updater = new UpdaterImpl(maxUpdates, syncserver);
    Network network = new Network(syncserver, syncclients, updater);
    Fut<SyncServerAcceptor> acc = syncserver!getAcceptor();
    await acc?;
    [Far]
    SyncServerAcceptor acceptor = acc.get;
    Set<SyncClient> clientIterator = syncclients;
    while (hasNext(clientIterator)) {
      Pair<Set<SyncClient>, SyncClient> nt = next(clientIterator);
      SyncClient syncclient = snd(nt);
      Fut<Unit> fu = syncclient!setNetwork(network);
      fu.get;
      syncclient!setAcceptor(acceptor);
      clientIterator = fst(nt);
    }
  }
  }

def Int defaultScheduleCost(Schedule s) = 
  case s {
    NoSchedule => 5;
    Schedule( n, _, _, i ) => case n {
      "Data" => 5;
      "Business rules" => 5;
      "Search" => 5;
    };
  };

def Process scheduleHighestCostScheduler(List<Process> q) = 
  scheduleCostSchedulerH(head(q), tail(q));

def Process scheduleCostSchedulerH(Process h, List<Process> t) = 
  case t {
    Nil => h;
    Cons( h2, t2 ) => case ( value(h) > value(h2) ) {
      True => scheduleCostSchedulerH(h, t2);
      False => scheduleCostSchedulerH(h2, t2);
    };
  };

def Process scheduleLoweestCostScheduler(List<Process> q) = 
  scheduleCostSchedulerL(head(q), tail(q));

def Process scheduleCostSchedulerL(Process h, List<Process> t) = 
  case t {
    Nil => h;
    Cons( h2, t2 ) => case ( value(h) < value(h2) ) {
      True => scheduleCostSchedulerL(h, t2);
      False => scheduleCostSchedulerL(h2, t2);
    };
  };

def Process edf(List<Process> q) = 
  edfH(head(q), tail(q));

def Process edfH(Process h, List<Process> t) = 
  case t {
    Nil => h;
    Cons( h2, t2 ) => case durationLessThan(procdeadline(h), procdeadline(h2)) {
      True => edfH(h, t2);
      False => edfH(h2, t2);
    };
  };

def Process hcf(List<Process> q) = 
  hcfH(head(q), tail(q));

def Process hcfH(Process h, List<Process> t) = 
  case t {
    Nil => h;
    Cons( h2, t2 ) => case durationLessThan(cost(h), cost(h2)) {
      False => hcfH(h, t2);
      True => hcfH(h2, t2);
    };
  };

interface ReplicationSnapshot {
  [Atomic]
  Unit refreshSnapshot();
  Unit clearSnapshot();
  Int getIndexingId();
  Set<ServerReplicationItem> getItems(String name);}

interface BasicReplicationItem {
  FileEntry getContents();
  [Atomic]
  Unit cleanup();
  FileId getAbsoluteDir();}

interface ServerReplicationItem extends BasicReplicationItem {
  Command getCommand();
  ReplicationItemType getType();
  [Atomic]
  Unit refresh();}

class ReplicationSnapshotImpl(ServerDataBase db, Schedules schedules) implements ReplicationSnapshot {
  Int count = 0;
  Int update = 0;
  TransactionId tid = - 1;
  Bool clean = True;
  Map<String, Set<ServerReplicationItem>> repItems = EmptyMap;
  
  Set<ServerReplicationItem> getItems(String name){
    return lookupDefault(repItems, name, EmptySet);
  }
  [Atomic]
  Unit refreshSnapshot(){
    count = ( count + 1 );
    if ( clean ){
      tid = db.refresh();
      update = ( update + 1 );
      this.createReplicationItems();
      Set<String> names = keys(repItems);
      while (hasNext(names)) {
        Pair<Set<String>, String> nn = next(names);
        Set<ServerReplicationItem> titems = lookupUnsafe(repItems, snd(nn));
        while (hasNext(titems)) {
          Pair<Set<ServerReplicationItem>, ServerReplicationItem> ni = next(titems);
          ServerReplicationItem item = snd(ni);
          item.refresh();
          titems = fst(ni);
        }
        names = fst(nn);
      }
      clean = False;
    }
  }
  [Atomic]
  Unit createReplicationItems(){
    Schedules tsc = schedules;
    while (hasNext(tsc)) {
      Pair<Schedules, Schedule> ns = next(tsc);
      this.replicationItems(snd(ns));
      tsc = fst(ns);
    }
  }
  [Atomic]
  Unit replicationItems(Schedule schedule){
    List<Item> is = items(schedule);
    Set<ServerReplicationItem> sitems = EmptySet;
    while (( is != Nil )) {
      ServerReplicationItem r = this.replicationItem(head(is));
      sitems = Insert( r, sitems );
      is = tail(is);
    }
    repItems = InsertAssoc( Pair( schedname(schedule), sitems ), repItems );
  }
  [Atomic]
  ServerReplicationItem replicationItem(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_FileDelta(i);
    if ( ( ( item == null ) && isLogItem(i) ) ){
      item = new local ReplicationLogItem(left(item(i)), db);
    }
    return item;
  }
  Unit clearSnapshot(){
    repItems = EmptyMap;
    clean = True;
  }
  Int getIndexingId(){
    return tid;
  }
  [Atomic]
  ServerReplicationItem replicationItemORIGIN_ReplicationItemDelta(Item i){
    ServerReplicationItem item = null;
    return item;
  }
  [Atomic]
  ServerReplicationItem replicationItemORIGIN_DirDelta(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_ReplicationItemDelta(i);
    if ( ( ( item == null ) && isSearchItem(i) ) ){
      item = new local SearchDirectoryItem(left(item(i)), db);
    }
    return item;
  }
  [Atomic]
  ServerReplicationItem replicationItemORIGIN_FileDelta(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_DirDelta(i);
    if ( ( ( item == null ) && isFileItem(i) ) ){
      Pair<FileId, String> it = right(item(i));
      item = new local ReplicationFilePattern(fst(it), snd(it), db);
    }
    return item;
  }
  }

interface InternalItem extends BasicReplicationItem {
  [Atomic]
  Directory getState();
  [Atomic]
  Unit setState(Directory dir);}

class BasicReplicationItemImpl(FileId qualified, ServerDataBase db) implements InternalItem {
  Directory snapshot = updateDirWithDir(rootDir(), emptyDir(qualified));
  
  FileEntry getContents(){
    return dirContent(snapshot);
  }
  FileId getAbsoluteDir(){
    return qualified;
  }
  [( qualified <= max(qualified) )] [Atomic]
  Unit cleanup(){
    snapshot = updateDirWithDir(rootDir(), emptyDir(qualified));
  }
  [( result() <= max(snapshot) )] [Atomic]
  Directory getState(){
    return snapshot;
  }
  [Atomic]
  Unit setState(Directory dir){
    snapshot = dir;
  }
  }

class SearchDirectoryItem(FileId qualified, ServerDataBase db) implements ServerReplicationItem {
  InternalItem internal;
  {
    internal = new local BasicReplicationItemImpl(qualified, db);
  }
  
  FileEntry getContents(){
    return internal.getContents();
  }
  Command getCommand(){
    return AppendSearchFile;
  }
  ReplicationItemType getType(){
    return SearchReplicationDirectory;
  }
  FileId getAbsoluteDir(){
    return internal.getAbsoluteDir();
  }
  [Atomic]
  Unit refresh(){
    Directory snapshot = internal.getState();
    Maybe<FileContent> ffs = db.listFilesAt(qualified);
    if ( ( ffs != Nothing ) ){
      FileContent content = fromJust(ffs);
      assert isDirectory(content);
      snapshot = updateDirWithDir(snapshot, dir(qualified, entries(content)));
    }
    internal.setState(snapshot);
  }
  [Atomic]
  Unit cleanup(){
    internal.cleanup();
  }
  }

type StateMachine = Map<State, Set<State>>;

interface ClientJob extends Worker {
  Bool registerReplicationItems(TransactionId id);
  Maybe<FileSize> processFile(FileId id);
  Unit processContent(File file);
  Unit receiveSchedule(Schedules schedules);
  Unit executeJob();}

interface Client extends Node {
  ClientDataBase getClientDataBase();}

interface SyncClient extends Client, ClientStateMachine {
  [Far]
  SyncServerAcceptor getAcceptor();
  Unit setAcceptor(SyncServerAcceptor acceptor);
  Unit setNetwork(Network network);}

interface SyncServerClientCoordinatorSpec extends SyncServerClientCoordinator {
  Unit refreshSnapShot(Schedule s);
  Unit clearSnapshot(Schedule s);}

interface CommonInternalClient extends SyncClient {
  ClientId getId();
  [Atomic]
  Unit setMaximumTransactionId(Int id);
  [Atomic]
  Pair<Int, Int> jobCountAndMaximumTransactionId();
  Unit scheduleJob(JobType jb, Schedule schedule);
  Unit finishJob(ClientJob job, Maybe<JobData> jobData);}

class SyncClientImpl([Final]Int maxJobs, [Final]ClientId id) implements InternalClient, SyncClient {
  Network network;
  SyncServerAcceptor acceptor;
  ClientDataBase db;
  Recorder recorder;
  Bool shutDown = False;
  Set<ClientJob> jobRecords = EmptySet;
  List<ClientJob> jobHistories = Nil;
  List<JobData> jobDatas = Nil;
  List<Schedule> hit = Nil;
  List<Schedule> missed = Nil;
  Int currentTransactionId = - 1;
  StateMachine mmachine = stateMachine();
  Either<State, ManyState> state = Left( Start );
  Map<Schedule, Bool> nexts = EmptyMap;
  {
    db = new local DataBaseImpl();
    recorder = new local Recorder(id);
  }
  
  [Atomic]
  Unit setMaximumTransactionId(Int id){
    currentTransactionId = id;
  }
  [Atomic]
  Pair<Int, Int> jobCountAndMaximumTransactionId(){
    return Pair( length(jobHistories), currentTransactionId );
  }
  Unit scheduleJob(JobType jb, Schedule schedule){
    this.waitFor(schedule);
    if ( ~ shutDown ){
      this.setNext(schedule);
      [Deadline : dline(schedule)]
      this.makeJob(jb, schedule);
      hit = Cons( schedule, hit );
    } else {
      missed = Cons( schedule, missed );
    }
  }
  [( maxJobs <= max(maxjobs) )] [( jobHistories <= max(jobHistories) )] [( jobDatas <= max(jobDatas) )]
  Unit makeJob(JobType jb, Schedule schedule){
    ClientJob job = new ClientJobImpl(maxJobs, this, jb, schedule, length(jobHistories));
    [Deadline : deadline()]
    job!executeJob();
    jobHistories = Cons( job, jobHistories );
    jobRecords = Insert( job, jobRecords );
  }
  Unit finishJob(ClientJob job, Maybe<JobData> jobData){
    if ( isJust(jobData) ){
      jobDatas = Cons( fromJust(jobData), jobDatas );
      recorder.record(fromJust(jobData));
    }
    jobRecords = remove(jobRecords, job);
  }
  ClientId getId(){
    return id;
  }
  Bool isShutdownRequested(){
    return shutDown;
  }
  Unit requestShutDown(){
    shutDown = True;
    await ( jobRecords == EmptySet );
    network!shutDown(this);
  }
  SyncServerAcceptor getAcceptor(){
    return acceptor;
  }
  Unit run(){
    this.waitToBoot();
    await ( acceptor != null );
    this.makeJob(Boot, NoSchedule);
  }
  ClientDataBase getClientDataBase(){
    return db;
  }
  DataBase getDataBase(){
    return db;
  }
  Unit setAcceptor([Far]SyncServerAcceptor acc){
    acceptor = acc;
  }
  Unit setNetwork(Network n){
    network = n;
  }
  Unit setNext(Schedule schedule){
    nexts = put(nexts, schedule, False);
  }
  Unit waitFor(Schedule schedule){
    Int wait = sched(schedule);
    await duration(wait, wait) & ( lookupDefault(nexts, schedule, True) || shutDown );
  }
  [( nexts <= max(nexts) )]
  Unit nextJob(Schedule s){
    nexts = put(nexts, s, True);
  }
  [( mmachine <= max(mmachine) )]
  Unit becomesManyState(Either<Schedule, Schedules> schedule, State s){
    if ( ( isLeft(schedule) && ( left(schedule) == NoSchedule ) ) ){
      assert isLeft(state);
      Set<State> tos = lookupDefault(mmachine, left(state), EmptySet);
      assert ( tos != EmptySet );
      assert contains(tos, s);
      state = Left( s );
    }
  }
  Unit waitToBoot(){
    this.becomesManyState(Left( NoSchedule ), WaitToBoot);
  }
  Unit boot(){
    this.becomesManyState(Left( NoSchedule ), Booting);
  }
  Unit start(){
    this.becomesManyState(Left( NoSchedule ), Booting);
  }
  Unit end(){
    this.becomesManyState(Left( NoSchedule ), End);
  }
  Unit waitToReplicateFromBoot(Schedules ss){
    this.becomesManyState(Right( ss ), WaitToReplicate);
  }
  Unit waitToReplicateM(Schedule s){
    this.becomesManyState(Left( s ), ManyWaitToReplicate( s ));
  }
  Unit replicateM(Schedule s){
    this.becomesManyState(Left( s ), ManyWorkOnReplicate( s ));
  }
  Unit endM(Schedule s){
    this.becomesManyState(Left( s ), ManyEnd( s ));
  }
  }

class ClientJobImpl([Final]Int maxJobs, [Far] [Final]InternalClient client, [Final]JobType job, [Final]Schedule schedule, [Final]Int id) implements ClientJob {
  Int br = 0;
  Int ar = 0;
  Maybe<Int> deadline = Nothing;
  Maybe<JobData> jd = Nothing;
  Command start = EmptyCommand;
  Command command = EmptyCommand;
  Schedules schedules = EmptySet;
  ClientId clientId = - 1;
  TransactionId transactionId = - 1;
  ConnectionThread thread = null;
  [Far]
  ClientDataBase db;
  
  ConnectionThread getConnectionThread(){
    Fut<SyncServerAcceptor> fs = client!getAcceptor();
    SyncServerAcceptor acceptor = fs.get;
    Fut<ConnectionThread> t = acceptor!getConnection(this, defaultScheduleCost(schedule));
    await t?;
    return t.get;
  }
  Unit clientDB(){
    Fut<ClientDataBase> fd = client!getClientDataBase();
    db = fd.get;
  }
  Unit establishSchedule(){
    Fut<Pair<Int, Int>> jcf = client!jobCountAndMaximumTransactionId();
    Pair<Int, Int> stats = jcf.get;
    if ( ( fst(stats) >= maxJobs ) ){
      this.shutDownClient();
    } else {
      Schedules ss = schedules;
      while (hasNext(ss)) {
        Pair<Schedules, Schedule> nt = next(ss);
        ss = fst(nt);
        Schedule s = snd(nt);
        [Deadline : dline(s)]
        client!scheduleJob(Replication, s);
      }
    }
  }
  Int resource(){
    DeploymentComponent dc = thisDC();
    Fut<DCData> af = dc!available();
    DCData dd = af.get;
    return capacity(dd);
  }
  Int consumeResource(){
    Int cost = defaultScheduleCost(schedule);
    Time bt = now();
    br = this.resource();
    Int consume = 0;
    while (( consume <= cost )) {
      skip;
      consume = ( consume + 1 );
    }
    Time at = now();
    ar = this.resource();
    assert ( ( ( cost == 0 ) || ( ar < br ) ) || ( timeDifference(at, bt) > 0 ) );
    return cost;
  }
  Unit beginMeasurement(){
    if ( ( job != Boot ) ){
      Deadline beginning = deadline();
      Time beforetime = now();
      jd = Just( JobData( schedname(schedule), sched(schedule), durationValue(dline(schedule)), 0, durationValue(beginning), 0, timeValue(beforetime), id ) );
    }
  }
  Unit executeJob(){
    [Deadline : deadline()]
    this.beginMeasurement();
    Fut<ClientId> fut = client!getId();
    clientId = fut.get;
    this.clientDB();
    thread = this.getConnectionThread();
    Int cost = defaultScheduleCost(schedule);
    if ( ( thread != null ) ){
      if ( ( job == Boot ) ){
        this.becomeState(Booting);
        thread!command(ListSchedule);
        await ( schedules != EmptySet );
        this!establishSchedule();
      } else {
        this.becomeState(WorkOnReplicate);
        thread!command(SearchSchedule( schedname(schedule) ));
        await ( schedules != EmptySet );
        this!establishSchedule();
        await ( start == StartSnapShot );
        await ( command == EndSnapShot );
      }
      Fut<Bool> sd = client!isShutdownRequested();
      Bool shutDown = sd.get;
      if ( ~ shutDown ){
        this.becomeState(WaitToReplicate);
      }
      this.nextJob();
      if ( ( job != Boot ) ){
        Duration d = deadline();
        if ( ~ isDurationInfinite(d) ){
          deadline = Just( durationValue(d) );
          jd = updateJobData(jd, cost, fromJust(deadline), now());
        }
      }
    }
    client!finishJob(this, jd);
  }
  ClientId forClient(){
    return clientId;
  }
  Unit shutDownClient(){
    Fut<Bool> bf = client!isShutdownRequested();
    await bf?;
    Bool bool = bf.get;
    if ( ~ bool ){
      Fut<Unit> unit = client!requestShutDown();
      await unit?;
      unit.get;
      this.becomeState(End);
    }
  }
  Bool registerReplicationItems(TransactionId id){
    Fut<Bool> reg = db!prepareReplicationItem(id, schedule);
    Bool rg = reg.get;
    if ( rg ){
      transactionId = id;
      Fut<Unit> u = client!setMaximumTransactionId(id);
      u.get;
    }
    return rg;
  }
  Bool hasFile(FileId id){
    Fut<Bool> he = db!hasFile(id);
    await he?;
    return he.get;
  }
  Maybe<FileSize> processFile(FileId id){
    Maybe<FileSize> result = Nothing;
    Bool hasfile = this.hasFile(id);
    if ( hasfile ){
      Fut<FileContent> contentf = db!getContent(id);
      await contentf?;
      FileContent content = contentf.get;
      if ( isFile(content) ){
        FileSize size = content(content);
        result = Just( size );
      }
    }
    return result;
  }
  Unit overwrite(File file){
    FileId id = fst(file);
    FileSize size = fileContent(file);
    Fut<Unit> u = db!updateFile(id, size);
    await u?;
  }
  Unit continue(File file){
    FileId id = fst(file);
    FileSize size = fileContent(file);
    Bool he = this.hasFile(id);
    FileSize fsize = 0;
    if ( he ){
      Fut<FileContent> s = db!getContent(fst(file));
      await s?;
      FileContent c = s.get;
      fsize = content(c);
    }
    size = ( size + fsize );
    Fut<Unit> u = db!updateFile(id, size);
    await u?;
  }
  Unit processContent(File file){
    await isAppendCommand(command);
    if ( ( command == SkipFile ) ){
      skip;
    } else if ( ( command == OverwriteFile ) ){
      this.overwrite(file);
    } else if ( ( command == ContinueFile ) ){
      this.continue(file);
    }
  }
  [Atomic]
  Unit command(Command c){
    if ( ( c == StartSnapShot ) ){
      start = c;
    } else {
      command = c;
    }
  }
  Unit receiveSchedule(Schedules schedules){
    schedules = schedules;
  }
  Unit nextJob(){
    client!nextJob(schedule);
  }
  Unit becomeState(State state){
    if ( ( state == WaitToBoot ) ){
      Fut<Unit> unit = client!waitToBoot();
      unit.get;
    } else if ( ( state == Booting ) ){
      Fut<Unit> unit = client!boot();
      unit.get;
    } else if ( ( state == WorkOnReplicate ) ){
      Fut<Unit> unit = client!replicateM(schedule);
      unit.get;
    } else if ( ( state == WaitToReplicate ) ){
      if ( ( schedule == NoSchedule ) ){
        assert ( job == Boot );
        Fut<Unit> unit = client!waitToReplicateFromBoot(schedules);
        unit.get;
      } else {
        Fut<Unit> unit = client!waitToReplicateM(schedule);
        unit.get;
      }
    } else if ( ( state == End ) ){
      if ( ( schedule == NoSchedule ) ){
        assert ( job == Boot );
        Fut<Unit> unit = client!end();
        unit.get;
      } else {
        Fut<Unit> unit = client!endM(schedule);
        unit.get;
      }
    }
  }
  }

class ConnectionThreadImpl([Far]ClientJob job, [Far]SyncServer server, [Far]Resource res, Int id, Int cost) implements ConnectionThread {
  SyncServerClientCoordinator coord;
  Maybe<Command> cmd = Nothing;
  Schedules schedules = EmptySet;
  
  Int resource(){
    DeploymentComponent dc = thisDC();
    Fut<DCData> af = dc!available();
    DCData dd = af.get;
    return capacity(dd);
  }
  Unit consumeResource(Int i){
    while (( i > 0 )) {
      Fut<Unit> fr = res!consume();
      fr.get;
      i = ( i - 1 );
    }
  }
  Unit run(){
    Fut<SyncServerClientCoordinator> c = server!getCoordinator();
    await c?;
    coord = c.get;
    await ( cmd != Nothing );
    schedules = this.sendSchedule();
    if ( ( cmd != Just( ListSchedule ) ) ){
      this.consumeResource(1);
      ReplicationSnapshot snapshot = this.startReplicationUpdate();
      Fut<TransactionId> idf = snapshot!getIndexingId();
      await idf?;
      TransactionId tid = idf.get;
      this.consumeResource(2);
      Fut<Bool> b = job!registerReplicationItems(tid);
      await b?;
      Bool register = b.get;
      Set<Set<File>> filesets = EmptySet;
      if ( register ){
        Fut<Set<ServerReplicationItem>> nis = snapshot!getItems(ssname(fromJust(cmd)));
        await nis?;
        Set<ServerReplicationItem> newitems = nis.get;
        filesets = this.registerItems(newitems);
      }
      this.consumeResource(2);
      Fut<Unit> rp = job!command(StartSnapShot);
      await rp?;
      while (hasNext(filesets)) {
        Pair<Set<Set<File>>, Set<File>> nfs = next(filesets);
        filesets = fst(nfs);
        Set<File> fileset = snd(nfs);
        this.transferItems(fileset);
      }
      this.consumeResource(1);
      rp = job!command(EndSnapShot);
      await rp?;
      this.consumeResource(1);
      this.finishReplicationUpdate();
    }
  }
  Schedules sendSchedule(){
    assert isJust(cmd);
    Schedules results = EmptySet;
    if ( ( cmd == Just( ListSchedule ) ) ){
      Fut<Schedules> ssf = server!listSchedules();
      await ssf?;
      results = ssf.get;
    } else {
      Fut<Schedule> ssf = server!getSchedule(ssname(fromJust(cmd)));
      await ssf?;
      Schedule s = ssf.get;
      results = Insert( s, results );
    }
    Fut<Unit> rp = job!receiveSchedule(results);
    await rp?;
    return results;
  }
  ClientId forClient(){
    Fut<ClientId> id = job!forClient();
    return id.get;
  }
  [Atomic]
  Unit command(Command c){
    cmd = Just( c );
  }
  Set<Set<File>> registerItems(Set<ServerReplicationItem> items){
    Set<Set<File>> regs = EmptySet;
    while (hasNext(items)) {
      Pair<Set<ServerReplicationItem>, ServerReplicationItem> nis = next(items);
      items = fst(nis);
      ServerReplicationItem item = snd(nis);
      Fut<FileEntry> entryf = item!getContents();
      await entryf?;
      FileEntry entry = entryf.get;
      Set<File> result = EmptySet;
      Set<FileId> ids = getFileIdFromEntries1(entry);
      while (hasNext(ids)) {
        Pair<Set<FileId>, FileId> nids = next(ids);
        FileId id = snd(nids);
        Maybe<FileContent> content = getFromEntry(entry, id);
        result = Insert( Pair( id, fromJust(content) ), result );
        ids = fst(nids);
      }
      regs = Insert( result, regs );
    }
    return regs;
  }
  Unit transferItems(Set<File> fileset){
    while (hasNext(fileset)) {
      Pair<Set<File>, File> nf = next(fileset);
      fileset = fst(nf);
      File file = snd(nf);
      FileSize tsize = fileContent(file);
      Fut<Unit> rp = job!command(AppendSearchFile);
      await rp?;
      Fut<Maybe<FileSize>> fs = job!processFile(fst(file));
      await fs?;
      Maybe<FileSize> content = fs.get;
      FileSize size = 0;
      if ( isJust(content) ){
        size = fromJust(content);
      }
      if ( ( size > tsize ) ){
        rp = job!command(OverwriteFile);
        await rp?;
        rp = job!processContent(file);
        await rp?;
      } else {
        if ( ( ( tsize - size ) > 0 ) ){
          rp = job!command(ContinueFile);
          await rp?;
          file = file(fst(file), ( tsize - size ));
          rp = job!processContent(file);
          await rp?;
        } else {
          rp = job!command(SkipFile);
          await rp?;
        }
      }
    }
    Fut<Unit> rp = job!command(EndSearchFile);
    await rp?;
  }
  ReplicationSnapshot startReplicationUpdate(){
    assert ( size(schedules) == 1 );
    Schedule schedule = snd(next(schedules));
    Fut<Unit> rp = coord!startReplicationUpdate(schedule, this);
    await rp?;
    Fut<ReplicationSnapshot> sp = server!getReplicationSnapshot(schedule);
    return sp.get;
  }
  Unit finishReplicationUpdate(){
    assert ( size(schedules) == 1 );
    Fut<Unit> rp = coord!finishReplicationUpdate(snd(next(schedules)), this);
    await rp?;
  }
  }

class ReplicationFilePattern(FileId qualified, String pattern, ServerDataBase db) implements ServerReplicationItem {
  InternalItem internal;
  {
    internal = new local BasicReplicationItemImpl(qualified, db);
  }
  
  FileEntry getContents(){
    return internal.getContents();
  }
  Command getCommand(){
    return ReceivePatternFile;
  }
  ReplicationItemType getType(){
    return ReplicationFilePattern;
  }
  FileId getAbsoluteDir(){
    return internal.getAbsoluteDir();
  }
  [( qualified <= max(qualified) )] [( pattern <= max(pattern) )] [( db <= max(db) )] [( internal <= max(internal) )] [Atomic]
  Unit refresh(){
    Directory snapshot = internal.getState();
    Maybe<FileContent> ffs = db.listFilesAt(qualified);
    if ( ( ffs != Nothing ) ){
      FileContent content = fromJust(ffs);
      assert isDirectory(content);
      FileEntry es = entries(content);
      Set<Pair<FileId, FileContent>> entryset = entrySet(es);
      while (hasNext(entryset)) {
        Pair<Set<Pair<FileId, FileContent>>, Pair<FileId, FileContent>> nt = next(entryset);
        Pair<FileId, FileContent> entry = qualifyEntry(snd(nt), qualified);
        FileId fid = fst(entry);
        if ( ( isAncester(qualified, fid) && filter(pattern, fid) ) ){
          snapshot = updateDirWithContent(snapshot, fid, snd(entry));
        }
        entryset = fst(nt);
      }
    }
    internal.setState(snapshot);
  }
  [( internal <= max(internal) )] [Atomic]
  Unit cleanup(){
    internal.cleanup();
  }
  }

class ReplicationLogItem(FileId qualified, ServerDataBase db) implements ServerReplicationItem {
  Directory snapshot = rootDir();
  InternalItem internal;
  {
    internal = new local BasicReplicationItemImpl(qualified, db);
  }
  
  FileEntry getContents(){
    return internal.getContents();
  }
  Command getCommand(){
    return AppendSearchFile;
  }
  ReplicationItemType getType(){
    return LogReplicationItem;
  }
  FileId getAbsoluteDir(){
    return internal.getAbsoluteDir();
  }
  [Atomic]
  Unit refresh(){
    Directory snapshot = internal.getState();
    Maybe<FileContent> ffs = db.listFilesAt(qualified);
    if ( ( ffs != Nothing ) ){
      FileContent content = fromJust(ffs);
      assert isDirectory(content);
      snapshot = updateDirWithDir(snapshot, dir(qualified, entries(content)));
    }
    internal.setState(snapshot);
  }
  [Atomic]
  Unit cleanup(){
    internal.cleanup();
  }
  }

data State = Start| WaitToBoot| Booting| WaitToReplicate| WorkOnReplicate| End| ManyWaitToReplicate(Schedule)| ManyWorkOnReplicate(Schedule)| ManyEnd(Schedule);

type ManyState = Map<Schedule, State>;

def Map<State, Set<State>> stateMachine() = 
  let ( Pair<State, Set<State>> start ) = Pair( Start, set(Cons( WaitToBoot, Nil )) ) in let ( Pair<State, Set<State>> waitToBoot ) = Pair( WaitToBoot, set(Cons( Booting, Cons( End, Nil ) )) ) in let ( Pair<State, Set<State>> booting ) = Pair( Booting, set(Cons( WaitToBoot, Cons( WaitToReplicate, Cons( End, Nil ) ) )) ) in map(Cons( start, Cons( waitToBoot, Cons( booting, Nil ) ) ));

def Map<Schedule, State> setWaitToReplicate(Set<Schedule> ss) = 
  case ss {
    EmptySet => EmptyMap;
    Insert( x, xs ) => InsertAssoc( Pair( x, ManyWaitToReplicate( x ) ), setWaitToReplicate(xs) );
  };

def Map<State, Set<State>> makeManyStates(Schedules sched) = 
  case sched {
    EmptySet => EmptyMap;
    Insert( x, xs ) => InsertAssoc( Pair( ManyWaitToReplicate( x ), set(Cons( ManyWorkOnReplicate( x ), Cons( ManyEnd( x ), Nil ) )) ), InsertAssoc( Pair( ManyWorkOnReplicate( x ), set(Cons( ManyWaitToReplicate( x ), Cons( ManyEnd( x ), Nil ) )) ), makeManyStates(xs) ) );
  };

interface SyncServerClientCoordinator {
  Unit setSnapshots(Map<Schedule, ReplicationSnapshot> snapshots);
  Unit startReplicationUpdate(Schedule s, ConnectionThread worker);
  Unit finishReplicationUpdate(Schedule s, ConnectionThread worker);}

interface SyncServer extends ServerNode {
  SyncServerAcceptor getAcceptor();
  [Far]
  SyncServerClientCoordinator getCoordinator();
  [Near]
  ReplicationSnapshot getReplicationSnapshot(Schedule schedule);}

interface InternalClient extends CommonInternalClient {
  Unit nextJob(Schedule s);}

interface ClientStateMachine {
  Unit waitToBoot();
  Unit boot();
  Unit start();
  Unit end();
  Unit waitToReplicateFromBoot(Schedules ss);
  Unit waitToReplicateM(Schedule s);
  Unit replicateM(Schedule s);
  Unit endM(Schedule s);}

class SyncServerClientCoordinatorImpl([Far]SyncServer server, Set<ClientId> clients) implements SyncServerClientCoordinatorSpec {
  Int count = 0;
  Bool shutDown = False;
  Map<Schedule, Set<ConnectionThread>> threadMaps = EmptyMap;
  Map<Schedule, ReplicationSnapshot> snapshots = EmptyMap;
  
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit setSnapshots(Map<Schedule, ReplicationSnapshot> ss){
    snapshots = ss;
    threadMaps = setToMap(keys(ss), EmptySet);
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit startReplicationUpdate(Schedule s, ConnectionThread worker){
    assert contains(keys(threadMaps), s);
    Set<ConnectionThread> threads = Insert( worker, lookupUnsafe(threadMaps, s) );
    threadMaps = put(threadMaps, s, threads);
    if ( ( size(threads) == 1 ) ){
      this.refreshSnapShot(s);
    }
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit finishReplicationUpdate(Schedule s, ConnectionThread worker){
    assert contains(keys(threadMaps), s);
    Set<ConnectionThread> threads = remove(lookupUnsafe(threadMaps, s), worker);
    threadMaps = put(threadMaps, s, threads);
    if ( ( size(threads) == 0 ) ){
      this.clearSnapshot(s);
    }
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )] [Atomic]
  ReplicationSnapshot getSnapshot(Schedule s){
    assert contains(keys(snapshots), s);
    return lookupUnsafe(snapshots, s);
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit refreshSnapShot(Schedule s){
    count = ( count + 1 );
    ReplicationSnapshot snapshot = this.getSnapshot(s);
    Fut<Unit> unit = snapshot!refreshSnapshot();
    unit.get;
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit clearSnapshot(Schedule s){
    ReplicationSnapshot snapshot = this.getSnapshot(s);
    Fut<Unit> unit = snapshot!clearSnapshot();
    unit.get;
  }
  }


{
  new local ReplicationSystemMain();
}delta ReplicationSystemDelta;
uses ReplicationSystem;


adds data Command = StartSnapShot| EndSnapShot| ListSchedule| SearchSchedule(String ssname)| EndSearchFile| AppendSearchFile| ReceivePatternFile| SkipFile| ContinueFile| OverwriteFile| EmptyCommand;

adds data JobType = Replication| Boot;

adds data ReplicationItemType = SearchReplicationDirectory| LogReplicationItem| ReplicationFilePattern;

































adds data JobData = JobData(String jschedname, Int waitperiod, Int jdeadline, Int jcost, Int beforetime, Int deadlineafter, Int totaltime, Int jobid);













adds data Schedule = Schedule(String schedname, List<Item> items, Int sched, Deadline dline)| NoSchedule;

adds data Item = SearchItem(FileId)| FileItem(FileId, String)| LogItem(FileId);











adds data FileContent = Content(FileSize content)| Entries(FileEntry entries)| NoContent;












































adds interface Tester {
  Unit analyse();}
adds interface Updater {
  Unit shutDown();}
adds interface Commandee {
  [Atomic]
  Unit command(Command command);}
adds interface Worker extends Commandee {
  ClientId forClient();}
adds interface Node {
  DataBase getDataBase();
  Bool isShutdownRequested();
  Unit requestShutDown();}
adds interface Network {
  Unit shutDown(SyncClient client);}
adds interface ConnectionThread extends Worker {
  }
adds interface ServerNode extends Node {
  UpdatableDataBase getUpdatableDataBase();
  Schedules listSchedules();
  Schedule getSchedule(String name);}
adds interface DataBase {
  [Atomic]
  FileContent getContent(FileId fId);
  [Atomic]
  Bool hasFile(FileId fId);
  [Atomic]
  Set<FileId> listFiles();
  [Atomic]
  Maybe<FileContent> listFilesAt(FileId dir);
  [Atomic]
  Directory getRoot();}
adds interface UpdatableDataBase extends ServerDataBase {
  [Atomic]
  Unit update(Map<FileId, FileContent> changes);
  [Atomic]
  TransactionHistories getTransactions();}
adds interface ServerDataBase extends DataBase {
  [Atomic]
  TransactionId refresh();}
adds interface ClientDataBase extends DataBase {
  [Atomic]
  Bool prepareReplicationItem(TransactionId p, Schedule schedule);
  [Atomic]
  Unit updateFile(FileId fId, FileSize size);
  [Atomic]
  Map<String, TransactionId> lastTransactionIds();}
adds interface SyncServerAcceptor {
  [Far]
  ConnectionThread getConnection(ClientJob job, Int cost);}
adds interface Resource {
  Unit consume();}
adds class Resource implements Resource {
  
  
  Unit consume(){
    duration(1, 1);
  }
  }
adds interface Recorder {
  Unit record(JobData d);}
adds class Recorder(ClientId id) implements Recorder {
  List<Int> totalTimes = Nil;
  List<Int> deadlines = Nil;
  List<Bool> missedDeadlines = Nil;
  
  [( totalTimes <= max(totalTimes) )] [( deadlines <= max(dealines) )] [( missedDeadlines <= max(missedDeadlines) )]
  Unit record(JobData jd){
    Int d = deadlineafter(jd);
    deadlines = Cons( d, deadlines );
    missedDeadlines = Cons( ( d > 0 ), missedDeadlines );
    totalTimes = Cons( totaltime(jd), totalTimes );
  }
  }
adds class SyncServerAcceptorImpl([Final] [Near]SyncServer server) implements SyncServerAcceptor {
  Bool accept = True;
  Map<ClientId, Int> current = EmptyMap;
  Int threads = 0;
  Bool rb = True;
  Resource r1;
  Resource r2;
  {
    r1 = new Resource();
    r2 = new Resource();
  }
  
  [( accept <= max(accept) )] [( current <= max(current) )] [( threads <= max(threads) )] [( rb <= max(rb) )] [( r1 <= max(r1) )] [( r2 <= max(r2) )]
  Resource getResource(){
    Resource r = null;
    if ( rb ){
      r = r1;
      rb = False;
    } else {
      r = r2;
      rb = True;
    }
    return r;
  }
  [( accept <= max(accept) )] [( current <= max(current) )] [( threads <= max(threads) )] [( rb <= max(rb) )] [( r1 <= max(r1) )] [( r2 <= max(r2) )]
  ConnectionThread getConnection(ClientJob job, Int cost){
    ConnectionThread thread = null;
    Bool shutdown = server.isShutdownRequested();
    if ( ~ shutdown ){
      Resource resource = this.getResource();
      thread = new ConnectionThreadImpl(job, server, resource, threads, cost);
      threads = ( threads + 1 );
    }
    return thread;
  }
  }
adds class TesterImpl(ServerNode expected, Client actual) implements Tester {
  Schedules schedules = EmptySet;
  Map<String, TransactionId> scheduleResults = EmptyMap;
  Set<Triple<FileId, FileContent, FileContent>> result = EmptySet;
  
  [( schedules <= max(schedules) )] [( scheduleResults <= max(scheduleResults) )] [( result <= max(result) )]
  Unit analyse(){
    Fut<UpdatableDataBase> fe = expected!getUpdatableDataBase();
    UpdatableDataBase e = fe.get;
    Fut<Schedules> schf = expected!listSchedules();
    schedules = schf.get;
    Fut<TransactionHistories> tf = e!getTransactions();
    TransactionHistories transactions = tf.get;
    Fut<ClientDataBase> fa = actual!getClientDataBase();
    ClientDataBase a = fa.get;
    Fut<Map<String, TransactionId>> idf = a!lastTransactionIds();
    scheduleResults = idf.get;
    Fut<Directory> rf = a!getRoot();
    Directory act = rf.get;
    this.checkDatas(scheduleResults, reverse(transactions), act);
  }
  [( schedules <= max(schedules) )] [( scheduleResults <= max(scheduleResults) )] [( result <= max(result) )]
  Unit checkDatas(Map<String, TransactionId> tids, TransactionHistories th, Directory act){
    while (hasNext(schedules)) {
      Pair<Schedules, Schedule> nt = next(schedules);
      schedules = fst(nt);
      Schedule s = snd(nt);
      Int tid = lookupDefault(tids, schedname(s), - 1);
      if ( ( tid != - 1 ) ){
        Directory exp = applyChanges(rootDir(), th, tid);
        List<Item> is = items(s);
        while (( is != Nil )) {
          this.checkData(head(is), exp, act);
          is = tail(is);
        }
      }
    }
  }
  [( schedules <= max(schedules) )] [( scheduleResults <= max(scheduleResults) )] [( result <= max(result) )]
  Bool hasFile(DataBase b, FileId f){
    Fut<Bool> fb = b!hasFile(f);
    return fb.get;
  }
  }
adds class Network([Far] [Final]SyncServer server, Set<[Far]SyncClient> clients, [Far]Updater updater) implements Network {
  Bool ready = False;
  Set<Tester> testers = EmptySet;
  
  [( ready <= max(ready) )] [( testers <= max(testers) )]
  Unit run(){
    Set<SyncClient> cs = clients;
    while (hasNext(cs)) {
      Pair<Set<SyncClient>, SyncClient> nt = next(cs);
      Tester tester = new TesterImpl(server, snd(nt));
      testers = Insert( tester, testers );
      cs = fst(nt);
    }
    ready = True;
  }
  [( ready <= max(ready) )] [( testers <= max(testers) )]
  Unit shutDown(SyncClient client){
    await ready;
    clients = remove(clients, client);
    if ( ( clients == EmptySet ) ){
      Fut<Unit> ss = updater!shutDown();
      ss.get;
      ss = server!requestShutDown();
      ss.get;
      Set<Tester> ts = testers;
      while (hasNext(ts)) {
        Pair<Set<Tester>, Tester> nt = next(ts);
        Tester tester = snd(nt);
        tester!analyse();
        ts = fst(nt);
      }
    }
  }
  }
adds class UpdaterImpl([Final]Int updates, SyncServer server) implements Updater {
  Bool sd = False;
  List<Map<FileId, FileContent>> histories = Nil;
  [Final]
  Int best = 5;
  [Final]
  Int worst = 10;
  [Final]
  FileSize limit = 5;
  List<FileId> replicationItems = list(Cons( "indices/itemstore/i1", Cons( "indices/itemstore/i2", Cons( "indices/itemstore/log/j1", Cons( "indices/search/s1", Cons( "indices/search/s2", Cons( "indices/tree/t1", Cons( "indices/tree/log/j2", Cons( "config/random.xml", Cons( "config/business.xml", Nil ) ) ) ) ) ) ) ) ));
  
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Unit run(){
    Fut<UpdatableDataBase> fd = server!getUpdatableDataBase();
    UpdatableDataBase db = fd.get;
    Map<FileId, FileContent> changes = EmptyMap;
    Int count = 0;
    while (( ~ sd && ( ( updates < 0 ) || ( count < updates ) ) )) {
      changes = this.makeChange();
      histories = Cons( changes, histories );
      if ( ( changes != EmptyMap ) ){
        Fut<Unit> u = db!update(changes);
        u.get;
      }
      await duration(best, worst);
      count = ( count + 1 );
    }
    this.shutDown();
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Map<FileId, FileContent> makeChange(){
    List<FileId> fs = this.chooseFile();
    Map<FileId, FileContent> result = this.assignContent(fs, limit);
    return result;
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Unit shutDown(){
    sd = True;
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  Map<FileId, FileContent> assignContent(List<FileId> w, FileSize limit){
    Map<FileId, FileContent> result = EmptyMap;
    while (( w != Nil )) {
      Int rand = random(limit);
      result = InsertAssoc( file(head(w), ( rand + 1 )), result );
      w = tail(w);
    }
    return result;
  }
  [( sd <= max(sd) )] [( histories <= max(histories) )] [( best <= max(best) )] [( worst <= max(worst) )] [( limit <= max(limit) )] [( replicationItems <= max(replicationItems) )]
  List<FileId> chooseFile(){
    List<FileId> files = replicationItems;
    List<FileId> result = Nil;
    while (( files != Nil )) {
      Int rand = random(2);
      if ( ( rand == 0 ) ){
        result = Cons( head(files), result );
      }
      files = tail(files);
    }
    return result;
  }
  }
adds class DataBaseImpl implements ServerDataBase, ClientDataBase, UpdatableDataBase {
  Int count = 0;
  Map<String, List<TransactionId>> transactions = EmptyMap;
  TransactionHistories histories = Nil;
  Pair<TransactionId, Map<FileId, FileContent>> currentTransaction = Pair( - 1, EmptyMap );
  Directory rdir = rootDir();
  
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  TransactionHistories getTransactions(){
    return histories;
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Unit update(Map<FileId, FileContent> changes){
    rdir = updateDirWithContents(rdir, changes);
    currentTransaction = Pair( ( fst(currentTransaction) + 1 ), changes );
    histories = Cons( currentTransaction, histories );
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  TransactionId refresh(){
    count = ( count + 1 );
    return fst(currentTransaction);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  FileContent getContent(FileId qualified){
    Maybe<FileContent> result = Nothing;
    if ( ( qualified == rootId() ) ){
      result = Just( getFileContent(Right( rdir )) );
    } else {
      result = getFromEntryIn(rdir, qualified);
    }
    assert ( result != Nothing );
    return fromJust(result);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Bool hasFile(FileId qualified){
    return hasQualifiedEntriesIn(rdir, qualified);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Directory getRoot(){
    return rdir;
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Bool prepareReplicationItem(TransactionId p, Schedule schedule){
    Bool result = False;
    String name = schedname(schedule);
    List<TransactionId> tids = lookupDefault(transactions, name, Nil);
    if ( ~ contains(set(tids), p) ){
      transactions = put(transactions, name, Cons( p, tids ));
      result = True;
    }
    return result;
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Map<String, TransactionId> lastTransactionIds(){
    return firstValues(transactions, - 1);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Unit updateFile(FileId qualified, FileSize size){
    rdir = updateDirWithFile(rdir, file(qualified, size));
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [( result() <= max(qualifiedDir) )] [Atomic]
  Maybe<FileContent> listFilesAt(FileId qualifiedDir){
    return getFromEntryIn(rdir, qualifiedDir);
  }
  [( count <= max(count) )] [( transactions <= max(transactions) )] [( histories <= max(histories) )] [( currentTransaction <= max(currentTransaction) )] [( rdir <= max(rdir) )] [Atomic]
  Set<FileId> listFiles(){
    Set<FileId> allqualified = getFileIdFromDir(rdir);
    return allqualified;
  }
  }
adds class SyncServerImpl(Schedules schedules, Set<ClientId> clients) implements SyncServer {
  Bool shutDown = False;
  [Far]
  SyncServerClientCoordinator coordinator;
  [Near]
  SyncServerAcceptor acceptor;
  [Near]
  UpdatableDataBase db;
  Map<String, Schedule> scheduleMap = schedulemap(schedules);
  {
    db = new local DataBaseImpl();
  }
  
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  DataBase getDataBase(){
    return db;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Schedule getSchedule(String name){
    assert contains(keys(scheduleMap), name);
    return lookupUnsafe(scheduleMap, name);
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Schedules listSchedules(){
    return schedules;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  UpdatableDataBase getUpdatableDataBase(){
    return db;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Bool isShutdownRequested(){
    return shutDown;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  Unit requestShutDown(){
    shutDown = True;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  SyncServerClientCoordinator getCoordinator(){
    await ( coordinator != null );
    return coordinator;
  }
  [( shutDown <= max(shutDown) )] [( coordinator <= max(coordinator) )] [( acceptor <= max(acceptor) )] [( db <= max(db) )] [( scheduleMap <= max(scheduleMap) )]
  SyncServerAcceptor getAcceptor(){
    await ( acceptor != null );
    return acceptor;
  }
  }
adds class ReplicationSystem([Final]Int maxUpdates, [Final]List<Schedule> schedules, [Final]Int maxJobs, [Final]Set<ClientId> cids) {
  
  
  SyncServer getSyncServer(){
    SyncServer syncserver = new SyncServerImpl(listToSet(schedules), cids);
    return syncserver;
  }
  SyncClient getSyncClient(ClientId id){
    SyncClient syncclient = new SyncClientImpl(maxJobs, id);
    return syncclient;
  }
  Unit run(){
    SyncServer syncserver = this.getSyncServer();
    Set<[Far]SyncClient> syncclients = EmptySet;
    Set<ClientId> iterator = cids;
    while (hasNext(iterator)) {
      Pair<Set<ClientId>, ClientId> nt = next(iterator);
      SyncClient syncclient = this.getSyncClient(snd(nt));
      syncclients = insertElement(syncclients, syncclient);
      iterator = fst(nt);
    }
    Updater updater = new UpdaterImpl(maxUpdates, syncserver);
    Network network = new Network(syncserver, syncclients, updater);
    Fut<SyncServerAcceptor> acc = syncserver!getAcceptor();
    await acc?;
    [Far]
    SyncServerAcceptor acceptor = acc.get;
    Set<SyncClient> clientIterator = syncclients;
    while (hasNext(clientIterator)) {
      Pair<Set<SyncClient>, SyncClient> nt = next(clientIterator);
      SyncClient syncclient = snd(nt);
      Fut<Unit> fu = syncclient!setNetwork(network);
      fu.get;
      syncclient!setAcceptor(acceptor);
      clientIterator = fst(nt);
    }
  }
  }
modifies class ReplicationSystemMain{
adds Unit run(){
    List<Schedule> schedules = this.getSchedules();
    Set<ClientId> cids = this.getCids();
    Int maxJobs = this.getMaxJobs();
    Int maxUpdates = this.getMaxUpdates();
    new ReplicationSystem(maxUpdates, schedules, maxJobs, cids);
  }
  }
delta ResourcesDelta;
uses ReplicationSystem;

modifies class ReplicationSystem{
adds DeploymentComponent getServerDeployment(){
    DeploymentComponent s = new DeploymentComponent("s1", CPU( 1 ));
    return s;
  }
  adds DeploymentComponent getClientDeployment(){
    DeploymentComponent c = new DeploymentComponent("c1", CPU( 1 ));
    return c;
  }
  modifies SyncServer getSyncServer(){
    DeploymentComponent s = this.getServerDeployment();
    [DC : s]
    SyncServer syncserver = new SyncServerImpl(listToSet(schedules), cids);
    return syncserver;
  }
  modifies SyncClient getSyncClient(ClientId id){
    DeploymentComponent c = this.getClientDeployment();
    [DC : c]
    SyncClient syncclient = new SyncClientImpl(maxJobs, id);
    return syncclient;
  }
  adds DeploymentComponent changeDC(DeploymentComponent dc, String name, Int cpu){
    DeploymentComponent deployment = new local DeploymentComponent(name, CPU( cpu ));
    return deployment;
  }
  }
delta ClientDelta(Int cpu);
uses ReplicationSystem;
modifies class ReplicationSystem{
modifies DeploymentComponent getClientDeployment(){
    DeploymentComponent deployment = original ();
    deployment = this.changeDC(deployment, "c1", cpu);
    return deployment;
  }
  }
delta ServerDelta(Int cpu);
uses ReplicationSystem;
modifies class ReplicationSystem{
modifies DeploymentComponent getServerDeployment(){
    DeploymentComponent deployment = original ();
    deployment = this.changeDC(deployment, "s1", cpu);
    return deployment;
  }
  }
delta JobProcessingDelta;
uses ReplicationSystem;

adds interface ClientJob extends Worker {
  Bool registerReplicationItems(TransactionId id);
  Maybe<FileSize> processFile(FileId id);
  Unit processContent(File file);
  Unit receiveSchedule(Schedules schedules);
  Unit executeJob();}
adds interface Client extends Node {
  ClientDataBase getClientDataBase();}
adds interface SyncClient extends Client, ClientStateMachine {
  [Far]
  SyncServerAcceptor getAcceptor();
  Unit setAcceptor(SyncServerAcceptor acceptor);
  Unit setNetwork(Network network);}
adds interface SyncServerClientCoordinatorSpec extends SyncServerClientCoordinator {
  Unit refreshSnapShot();
  Unit clearSnapshot();}
adds interface CommonInternalClient extends SyncClient {
  ClientId getId();
  [Atomic]
  Unit setMaximumTransactionId(Int id);
  [Atomic]
  Pair<Int, Int> jobCountAndMaximumTransactionId();
  Unit scheduleJob(JobType jb, Schedule schedule);
  Unit finishJob(ClientJob job, Maybe<JobData> jobData);}
adds class SyncClientImpl([Final]Int maxJobs, [Final]ClientId id) implements InternalClient, SyncClient {
  Network network;
  SyncServerAcceptor acceptor;
  ClientDataBase db;
  Recorder recorder;
  Bool shutDown = False;
  Set<ClientJob> jobRecords = EmptySet;
  List<ClientJob> jobHistories = Nil;
  List<JobData> jobDatas = Nil;
  List<Schedule> hit = Nil;
  List<Schedule> missed = Nil;
  Int currentTransactionId = - 1;
  {
    db = new local DataBaseImpl();
    recorder = new local Recorder(id);
  }
  
  [Atomic]
  Unit setMaximumTransactionId(Int id){
    currentTransactionId = id;
  }
  [Atomic]
  Pair<Int, Int> jobCountAndMaximumTransactionId(){
    return Pair( length(jobHistories), currentTransactionId );
  }
  Unit scheduleJob(JobType jb, Schedule schedule){
    this.waitFor(schedule);
    if ( ~ shutDown ){
      this.setNext(schedule);
      [Deadline : dline(schedule)]
      this.makeJob(jb, schedule);
      hit = Cons( schedule, hit );
    } else {
      missed = Cons( schedule, missed );
    }
  }
  [( maxJobs <= max(maxjobs) )] [( jobHistories <= max(jobHistories) )] [( jobDatas <= max(jobDatas) )]
  Unit makeJob(JobType jb, Schedule schedule){
    ClientJob job = new ClientJobImpl(maxJobs, this, jb, schedule, length(jobHistories));
    [Deadline : deadline()]
    job!executeJob();
    jobHistories = Cons( job, jobHistories );
    jobRecords = Insert( job, jobRecords );
  }
  Unit finishJob(ClientJob job, Maybe<JobData> jobData){
    if ( isJust(jobData) ){
      jobDatas = Cons( fromJust(jobData), jobDatas );
      recorder.record(fromJust(jobData));
    }
    jobRecords = remove(jobRecords, job);
  }
  ClientId getId(){
    return id;
  }
  Bool isShutdownRequested(){
    return shutDown;
  }
  Unit requestShutDown(){
    shutDown = True;
    await ( jobRecords == EmptySet );
    network!shutDown(this);
  }
  SyncServerAcceptor getAcceptor(){
    return acceptor;
  }
  Unit run(){
    this.waitToBoot();
    await ( acceptor != null );
    this.makeJob(Boot, NoSchedule);
  }
  ClientDataBase getClientDataBase(){
    return db;
  }
  DataBase getDataBase(){
    return db;
  }
  Unit setAcceptor([Far]SyncServerAcceptor acc){
    acceptor = acc;
  }
  Unit setNetwork(Network n){
    network = n;
  }
  }
adds class ClientJobImpl([Final]Int maxJobs, [Far] [Final]InternalClient client, [Final]JobType job, [Final]Schedule schedule, [Final]Int id) implements ClientJob {
  Int br = 0;
  Int ar = 0;
  Maybe<Int> deadline = Nothing;
  Maybe<JobData> jd = Nothing;
  Command start = EmptyCommand;
  Command command = EmptyCommand;
  Schedules schedules = EmptySet;
  ClientId clientId = - 1;
  TransactionId transactionId = - 1;
  ConnectionThread thread = null;
  [Far]
  ClientDataBase db;
  
  ConnectionThread getConnectionThread(){
    Fut<SyncServerAcceptor> fs = client!getAcceptor();
    SyncServerAcceptor acceptor = fs.get;
    Fut<ConnectionThread> t = acceptor!getConnection(this, defaultScheduleCost(schedule));
    await t?;
    return t.get;
  }
  Unit clientDB(){
    Fut<ClientDataBase> fd = client!getClientDataBase();
    db = fd.get;
  }
  Unit establishSchedule(){
    Fut<Pair<Int, Int>> jcf = client!jobCountAndMaximumTransactionId();
    Pair<Int, Int> stats = jcf.get;
    if ( ( fst(stats) >= maxJobs ) ){
      this.shutDownClient();
    } else {
      Schedules ss = schedules;
      while (hasNext(ss)) {
        Pair<Schedules, Schedule> nt = next(ss);
        ss = fst(nt);
        Schedule s = snd(nt);
        [Deadline : dline(s)]
        client!scheduleJob(Replication, s);
      }
    }
  }
  Int resource(){
    DeploymentComponent dc = thisDC();
    Fut<DCData> af = dc!available();
    DCData dd = af.get;
    return capacity(dd);
  }
  Int consumeResource(){
    Int cost = defaultScheduleCost(schedule);
    Time bt = now();
    br = this.resource();
    Int consume = 0;
    while (( consume <= cost )) {
      skip;
      consume = ( consume + 1 );
    }
    Time at = now();
    ar = this.resource();
    assert ( ( ( cost == 0 ) || ( ar < br ) ) || ( timeDifference(at, bt) > 0 ) );
    return cost;
  }
  Unit beginMeasurement(){
    if ( ( job != Boot ) ){
      Deadline beginning = deadline();
      Time beforetime = now();
      jd = Just( JobData( schedname(schedule), sched(schedule), durationValue(dline(schedule)), 0, durationValue(beginning), 0, timeValue(beforetime), id ) );
    }
  }
  Unit executeJob(){
    [Deadline : deadline()]
    this.beginMeasurement();
    Fut<ClientId> fut = client!getId();
    clientId = fut.get;
    this.clientDB();
    thread = this.getConnectionThread();
    Int cost = defaultScheduleCost(schedule);
    if ( ( thread != null ) ){
      if ( ( job == Boot ) ){
        this.becomeState(Booting);
        thread!command(ListSchedule);
        await ( schedules != EmptySet );
        this!establishSchedule();
      } else {
        this.becomeState(WorkOnReplicate);
        thread!command(SearchSchedule( schedname(schedule) ));
        await ( schedules != EmptySet );
        this!establishSchedule();
        await ( start == StartSnapShot );
        await ( command == EndSnapShot );
      }
      Fut<Bool> sd = client!isShutdownRequested();
      Bool shutDown = sd.get;
      if ( ~ shutDown ){
        this.becomeState(WaitToReplicate);
      }
      this.nextJob();
      if ( ( job != Boot ) ){
        Duration d = deadline();
        if ( ~ isDurationInfinite(d) ){
          deadline = Just( durationValue(d) );
          jd = updateJobData(jd, cost, fromJust(deadline), now());
        }
      }
    }
    client!finishJob(this, jd);
  }
  ClientId forClient(){
    return clientId;
  }
  Unit shutDownClient(){
    Fut<Bool> bf = client!isShutdownRequested();
    await bf?;
    Bool bool = bf.get;
    if ( ~ bool ){
      Fut<Unit> unit = client!requestShutDown();
      await unit?;
      unit.get;
      this.becomeState(End);
    }
  }
  Bool registerReplicationItems(TransactionId id){
    Fut<Bool> reg = db!prepareReplicationItem(id, schedule);
    Bool rg = reg.get;
    if ( rg ){
      transactionId = id;
      Fut<Unit> u = client!setMaximumTransactionId(id);
      u.get;
    }
    return rg;
  }
  Bool hasFile(FileId id){
    Fut<Bool> he = db!hasFile(id);
    await he?;
    return he.get;
  }
  Maybe<FileSize> processFile(FileId id){
    Maybe<FileSize> result = Nothing;
    Bool hasfile = this.hasFile(id);
    if ( hasfile ){
      Fut<FileContent> contentf = db!getContent(id);
      await contentf?;
      FileContent content = contentf.get;
      if ( isFile(content) ){
        FileSize size = content(content);
        result = Just( size );
      }
    }
    return result;
  }
  Unit overwrite(File file){
    FileId id = fst(file);
    FileSize size = fileContent(file);
    Fut<Unit> u = db!updateFile(id, size);
    await u?;
  }
  Unit continue(File file){
    FileId id = fst(file);
    FileSize size = fileContent(file);
    Bool he = this.hasFile(id);
    FileSize fsize = 0;
    if ( he ){
      Fut<FileContent> s = db!getContent(fst(file));
      await s?;
      FileContent c = s.get;
      fsize = content(c);
    }
    size = ( size + fsize );
    Fut<Unit> u = db!updateFile(id, size);
    await u?;
  }
  Unit processContent(File file){
    await isAppendCommand(command);
    if ( ( command == SkipFile ) ){
      skip;
    } else if ( ( command == OverwriteFile ) ){
      this.overwrite(file);
    } else if ( ( command == ContinueFile ) ){
      this.continue(file);
    }
  }
  [Atomic]
  Unit command(Command c){
    if ( ( c == StartSnapShot ) ){
      start = c;
    } else {
      command = c;
    }
  }
  Unit receiveSchedule(Schedules schedules){
    schedules = schedules;
  }
  }
adds class ConnectionThreadImpl([Far]ClientJob job, [Far]SyncServer server, [Far]Resource res, Int id, Int cost) implements ConnectionThread {
  SyncServerClientCoordinator coord;
  Maybe<Command> cmd = Nothing;
  Schedules schedules = EmptySet;
  
  Int resource(){
    DeploymentComponent dc = thisDC();
    Fut<DCData> af = dc!available();
    DCData dd = af.get;
    return capacity(dd);
  }
  Unit consumeResource(Int i){
    while (( i > 0 )) {
      Fut<Unit> fr = res!consume();
      fr.get;
      i = ( i - 1 );
    }
  }
  Unit run(){
    Fut<SyncServerClientCoordinator> c = server!getCoordinator();
    await c?;
    coord = c.get;
    await ( cmd != Nothing );
    schedules = this.sendSchedule();
    if ( ( cmd != Just( ListSchedule ) ) ){
      this.consumeResource(1);
      ReplicationSnapshot snapshot = this.startReplicationUpdate();
      Fut<TransactionId> idf = snapshot!getIndexingId();
      await idf?;
      TransactionId tid = idf.get;
      this.consumeResource(2);
      Fut<Bool> b = job!registerReplicationItems(tid);
      await b?;
      Bool register = b.get;
      Set<Set<File>> filesets = EmptySet;
      if ( register ){
        Fut<Set<ServerReplicationItem>> nis = snapshot!getItems(ssname(fromJust(cmd)));
        await nis?;
        Set<ServerReplicationItem> newitems = nis.get;
        filesets = this.registerItems(newitems);
      }
      this.consumeResource(2);
      Fut<Unit> rp = job!command(StartSnapShot);
      await rp?;
      while (hasNext(filesets)) {
        Pair<Set<Set<File>>, Set<File>> nfs = next(filesets);
        filesets = fst(nfs);
        Set<File> fileset = snd(nfs);
        this.transferItems(fileset);
      }
      this.consumeResource(1);
      rp = job!command(EndSnapShot);
      await rp?;
      this.consumeResource(1);
      this.finishReplicationUpdate();
    }
  }
  Schedules sendSchedule(){
    assert isJust(cmd);
    Schedules results = EmptySet;
    if ( ( cmd == Just( ListSchedule ) ) ){
      Fut<Schedules> ssf = server!listSchedules();
      await ssf?;
      results = ssf.get;
    } else {
      Fut<Schedule> ssf = server!getSchedule(ssname(fromJust(cmd)));
      await ssf?;
      Schedule s = ssf.get;
      results = Insert( s, results );
    }
    Fut<Unit> rp = job!receiveSchedule(results);
    await rp?;
    return results;
  }
  ClientId forClient(){
    Fut<ClientId> id = job!forClient();
    return id.get;
  }
  [Atomic]
  Unit command(Command c){
    cmd = Just( c );
  }
  Set<Set<File>> registerItems(Set<ServerReplicationItem> items){
    Set<Set<File>> regs = EmptySet;
    while (hasNext(items)) {
      Pair<Set<ServerReplicationItem>, ServerReplicationItem> nis = next(items);
      items = fst(nis);
      ServerReplicationItem item = snd(nis);
      Fut<FileEntry> entryf = item!getContents();
      await entryf?;
      FileEntry entry = entryf.get;
      Set<File> result = EmptySet;
      Set<FileId> ids = getFileIdFromEntries1(entry);
      while (hasNext(ids)) {
        Pair<Set<FileId>, FileId> nids = next(ids);
        FileId id = snd(nids);
        Maybe<FileContent> content = getFromEntry(entry, id);
        result = Insert( Pair( id, fromJust(content) ), result );
        ids = fst(nids);
      }
      regs = Insert( result, regs );
    }
    return regs;
  }
  Unit transferItems(Set<File> fileset){
    while (hasNext(fileset)) {
      Pair<Set<File>, File> nf = next(fileset);
      fileset = fst(nf);
      File file = snd(nf);
      FileSize tsize = fileContent(file);
      Fut<Unit> rp = job!command(AppendSearchFile);
      await rp?;
      Fut<Maybe<FileSize>> fs = job!processFile(fst(file));
      await fs?;
      Maybe<FileSize> content = fs.get;
      FileSize size = 0;
      if ( isJust(content) ){
        size = fromJust(content);
      }
      if ( ( size > tsize ) ){
        rp = job!command(OverwriteFile);
        await rp?;
        rp = job!processContent(file);
        await rp?;
      } else {
        if ( ( ( tsize - size ) > 0 ) ){
          rp = job!command(ContinueFile);
          await rp?;
          file = file(fst(file), ( tsize - size ));
          rp = job!processContent(file);
          await rp?;
        } else {
          rp = job!command(SkipFile);
          await rp?;
        }
      }
    }
    Fut<Unit> rp = job!command(EndSearchFile);
    await rp?;
  }
  }
delta SeqDelta;
uses ReplicationSystem;
adds data State = Start| WaitToBoot| Booting| WaitToReplicate| WorkOnReplicate| End;


adds interface SyncServerClientCoordinator {
  Unit startReplicationUpdate(ConnectionThread worker);
  Unit finishReplicationUpdate(ConnectionThread worker);
  Unit setSnapshot(ReplicationSnapshot snapshot);}
adds interface SyncServer extends ServerNode {
  SyncServerAcceptor getAcceptor();
  [Far]
  SyncServerClientCoordinator getCoordinator();
  [Near]
  ReplicationSnapshot getReplicationSnapshot();}
modifies class SyncServerImpl{
adds ReplicationSnapshot snapshot;
  adds Unit run(){
    snapshot = new local ReplicationSnapshotImpl(db, schedules);
    coordinator = new SyncServerClientCoordinatorImpl(this, clients);
    Fut<Unit> f = coordinator!setSnapshot(snapshot);
    f.get;
    acceptor = new local SyncServerAcceptorImpl(this);
  }
  adds ReplicationSnapshot getReplicationSnapshot(){
    return snapshot;
  }
  }
adds interface InternalClient extends CommonInternalClient {
  Unit nextJob();}
adds interface ClientStateMachine {
  Unit waitToBoot();
  Unit boot();
  Unit start();
  Unit waitToReplicate();
  Unit replicate();
  Unit end();}
modifies class SyncClientImpl{
adds StateMachine machine = stateMachine();
  adds State state = Start;
  adds Bool next = False;
  adds Unit setNext(Schedule schedule){
    next = False;
  }
  adds Unit waitFor(Schedule schedule){
    Int wait = sched(schedule);
    await duration(wait, wait) & ( next || shutDown );
  }
  adds Unit nextJob(){
    next = True;
  }
  adds [( machine <= max(machine) )]
  Unit becomesState(State state){
    Set<State> tos = lookupDefault(machine, state, EmptySet);
    assert ( tos != EmptySet );
    assert contains(tos, state);
    state = state;
  }
  adds Unit waitToBoot(){
    this.becomesState(WaitToBoot);
  }
  adds Unit boot(){
    this.becomesState(Booting);
  }
  adds Unit start(){
    this.becomesState(Booting);
  }
  adds Unit waitToReplicate(){
    this.becomesState(WaitToReplicate);
  }
  adds Unit replicate(){
    this.becomesState(WorkOnReplicate);
  }
  adds Unit end(){
    this.becomesState(End);
  }
  }
modifies class ClientJobImpl{
adds Unit nextJob(){
    client!nextJob();
  }
  adds Unit becomeState(State state){
    if ( ( state == WaitToBoot ) ){
      Fut<Unit> unit = client!waitToBoot();
      unit.get;
    } else if ( ( state == Booting ) ){
      Fut<Unit> unit = client!boot();
      unit.get;
    } else if ( ( state == WorkOnReplicate ) ){
      Fut<Unit> unit = client!replicate();
      unit.get;
    } else if ( ( state == WaitToReplicate ) ){
      Fut<Unit> unit = client!waitToReplicate();
      unit.get;
    } else if ( ( state == End ) ){
      Fut<Unit> unit = client!end();
      unit.get;
    }
  }
  }
adds class SyncServerClientCoordinatorImpl([Far]SyncServer server, Set<ClientId> clients) implements SyncServerClientCoordinatorSpec {
  Int count = 0;
  Bool shutDown = False;
  Set<ConnectionThread> threads = EmptySet;
  [Far]
  ReplicationSnapshot snapshot;
  
  [( threads <= max(threads) )]
  Unit setSnapshot(ReplicationSnapshot snapshot){
    this.snapshot = snapshot;
  }
  [( threads <= max(threads) )]
  Unit startReplicationUpdate(ConnectionThread thread){
    threads = Insert( thread, threads );
    if ( ( size(threads) == 1 ) ){
      this.refreshSnapShot();
    }
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshot <= max(snapshot) )]
  Unit finishReplicationUpdate(ConnectionThread thread){
    if ( contains(threads, thread) ){
      if ( ( size(threads) == 1 ) ){
        this.clearSnapshot();
      }
      threads = remove(threads, thread);
    }
  }
  [( threads <= max(threads) )]
  Unit clearSnapshot(){
    Fut<Unit> unit = snapshot!clearSnapshot();
    unit.get;
  }
  [( threads <= max(threads) )]
  Unit refreshSnapShot(){
    count = ( count + 1 );
    Fut<Unit> unit = snapshot!refreshSnapshot();
    unit.get;
  }
  }
modifies class ConnectionThreadImpl{
adds ReplicationSnapshot startReplicationUpdate(){
    assert ( size(schedules) == 1 );
    Schedule schedule = snd(next(schedules));
    Fut<Unit> rp = coord!startReplicationUpdate(this);
    await rp?;
    Fut<ReplicationSnapshot> sp = server!getReplicationSnapshot();
    return sp.get;
  }
  adds Unit finishReplicationUpdate(){
    assert ( size(schedules) == 1 );
    Fut<Unit> rp = coord!finishReplicationUpdate(this);
    await rp?;
  }
  }
delta ConcurDelta;
uses ReplicationSystem;
adds data State = Start| WaitToBoot| Booting| WaitToReplicate| WorkOnReplicate| End| ManyWaitToReplicate(Schedule)| ManyWorkOnReplicate(Schedule)| ManyEnd(Schedule);





adds interface SyncServerClientCoordinator {
  Unit setSnapshots(Map<Schedule, ReplicationSnapshot> snapshots);
  Unit startReplicationUpdate(Schedule s, ConnectionThread worker);
  Unit finishReplicationUpdate(Schedule s, ConnectionThread worker);}
adds interface SyncServer extends ServerNode {
  SyncServerAcceptor getAcceptor();
  [Far]
  SyncServerClientCoordinator getCoordinator();
  [Near]
  ReplicationSnapshot getReplicationSnapshot(Schedule schedule);}
modifies class SyncServerImpl{
adds Map<Schedule, ReplicationSnapshot> snapshots = EmptyMap;
  adds Unit run(){
    Schedules ss = schedules;
    while (hasNext(ss)) {
      Pair<Schedules, Schedule> ns = next(ss);
      ss = fst(ns);
      ReplicationSnapshot shot = new local ReplicationSnapshotImpl(db, set(Cons( snd(ns), Nil )));
      snapshots = InsertAssoc( Pair( snd(ns), shot ), snapshots );
    }
    coordinator = new SyncServerClientCoordinatorImpl(this, clients);
    coordinator!setSnapshots(snapshots);
    acceptor = new local SyncServerAcceptorImpl(this);
  }
  adds ReplicationSnapshot getReplicationSnapshot(Schedule schedule){
    assert contains(keys(snapshots), schedule);
    return lookupUnsafe(snapshots, schedule);
  }
  }
adds interface InternalClient extends CommonInternalClient {
  Unit nextJob(Schedule s);}
adds interface ClientStateMachine {
  Unit waitToBoot();
  Unit boot();
  Unit start();
  Unit end();
  Unit waitToReplicateFromBoot(Schedules ss);
  Unit waitToReplicateM(Schedule s);
  Unit replicateM(Schedule s);
  Unit endM(Schedule s);}
modifies class SyncClientImpl{
adds StateMachine mmachine = stateMachine();
  adds Either<State, ManyState> state = Left( Start );
  adds Map<Schedule, Bool> nexts = EmptyMap;
  adds Unit setNext(Schedule schedule){
    nexts = put(nexts, schedule, False);
  }
  adds Unit waitFor(Schedule schedule){
    Int wait = sched(schedule);
    await duration(wait, wait) & ( lookupDefault(nexts, schedule, True) || shutDown );
  }
  adds [( nexts <= max(nexts) )]
  Unit nextJob(Schedule s){
    nexts = put(nexts, s, True);
  }
  adds [( mmachine <= max(mmachine) )]
  Unit becomesManyState(Either<Schedule, Schedules> schedule, State s){
    if ( ( isLeft(schedule) && ( left(schedule) == NoSchedule ) ) ){
      assert isLeft(state);
      Set<State> tos = lookupDefault(mmachine, left(state), EmptySet);
      assert ( tos != EmptySet );
      assert contains(tos, s);
      state = Left( s );
    }
  }
  adds Unit waitToBoot(){
    this.becomesManyState(Left( NoSchedule ), WaitToBoot);
  }
  adds Unit boot(){
    this.becomesManyState(Left( NoSchedule ), Booting);
  }
  adds Unit start(){
    this.becomesManyState(Left( NoSchedule ), Booting);
  }
  adds Unit end(){
    this.becomesManyState(Left( NoSchedule ), End);
  }
  adds Unit waitToReplicateFromBoot(Schedules ss){
    this.becomesManyState(Right( ss ), WaitToReplicate);
  }
  adds Unit waitToReplicateM(Schedule s){
    this.becomesManyState(Left( s ), ManyWaitToReplicate( s ));
  }
  adds Unit replicateM(Schedule s){
    this.becomesManyState(Left( s ), ManyWorkOnReplicate( s ));
  }
  adds Unit endM(Schedule s){
    this.becomesManyState(Left( s ), ManyEnd( s ));
  }
  }
modifies class ClientJobImpl{
adds Unit nextJob(){
    client!nextJob(schedule);
  }
  adds Unit becomeState(State state){
    if ( ( state == WaitToBoot ) ){
      Fut<Unit> unit = client!waitToBoot();
      unit.get;
    } else if ( ( state == Booting ) ){
      Fut<Unit> unit = client!boot();
      unit.get;
    } else if ( ( state == WorkOnReplicate ) ){
      Fut<Unit> unit = client!replicateM(schedule);
      unit.get;
    } else if ( ( state == WaitToReplicate ) ){
      if ( ( schedule == NoSchedule ) ){
        assert ( job == Boot );
        Fut<Unit> unit = client!waitToReplicateFromBoot(schedules);
        unit.get;
      } else {
        Fut<Unit> unit = client!waitToReplicateM(schedule);
        unit.get;
      }
    } else if ( ( state == End ) ){
      if ( ( schedule == NoSchedule ) ){
        assert ( job == Boot );
        Fut<Unit> unit = client!end();
        unit.get;
      } else {
        Fut<Unit> unit = client!endM(schedule);
        unit.get;
      }
    }
  }
  }
modifies interface SyncServerClientCoordinatorSpec{
removes Unit refreshSnapShot();
  removes Unit clearSnapshot();
  adds Unit refreshSnapShot(Schedule s);
  adds Unit clearSnapshot(Schedule s);}
adds class SyncServerClientCoordinatorImpl([Far]SyncServer server, Set<ClientId> clients) implements SyncServerClientCoordinatorSpec {
  Int count = 0;
  Bool shutDown = False;
  Map<Schedule, Set<ConnectionThread>> threadMaps = EmptyMap;
  Map<Schedule, ReplicationSnapshot> snapshots = EmptyMap;
  
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit setSnapshots(Map<Schedule, ReplicationSnapshot> ss){
    snapshots = ss;
    threadMaps = setToMap(keys(ss), EmptySet);
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit startReplicationUpdate(Schedule s, ConnectionThread worker){
    assert contains(keys(threadMaps), s);
    Set<ConnectionThread> threads = Insert( worker, lookupUnsafe(threadMaps, s) );
    threadMaps = put(threadMaps, s, threads);
    if ( ( size(threads) == 1 ) ){
      this.refreshSnapShot(s);
    }
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit finishReplicationUpdate(Schedule s, ConnectionThread worker){
    assert contains(keys(threadMaps), s);
    Set<ConnectionThread> threads = remove(lookupUnsafe(threadMaps, s), worker);
    threadMaps = put(threadMaps, s, threads);
    if ( ( size(threads) == 0 ) ){
      this.clearSnapshot(s);
    }
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )] [Atomic]
  ReplicationSnapshot getSnapshot(Schedule s){
    assert contains(keys(snapshots), s);
    return lookupUnsafe(snapshots, s);
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit refreshSnapShot(Schedule s){
    count = ( count + 1 );
    ReplicationSnapshot snapshot = this.getSnapshot(s);
    Fut<Unit> unit = snapshot!refreshSnapshot();
    unit.get;
  }
  [( threads <= max(threads) )] [( server <= max(server) )] [( clients <= max(clients) )] [( snapshots <= max(snapshots) )] [( threadMaps <= max(threadMaps) )]
  Unit clearSnapshot(Schedule s){
    ReplicationSnapshot snapshot = this.getSnapshot(s);
    Fut<Unit> unit = snapshot!clearSnapshot();
    unit.get;
  }
  }
modifies class ConnectionThreadImpl{
adds ReplicationSnapshot startReplicationUpdate(){
    assert ( size(schedules) == 1 );
    Schedule schedule = snd(next(schedules));
    Fut<Unit> rp = coord!startReplicationUpdate(schedule, this);
    await rp?;
    Fut<ReplicationSnapshot> sp = server!getReplicationSnapshot(schedule);
    return sp.get;
  }
  adds Unit finishReplicationUpdate(){
    assert ( size(schedules) == 1 );
    Fut<Unit> rp = coord!finishReplicationUpdate(snd(next(schedules)), this);
    await rp?;
  }
  }
delta ReplicationItemDelta;
uses ReplicationSystem;
adds interface ReplicationSnapshot {
  [Atomic]
  Unit refreshSnapshot();
  Unit clearSnapshot();
  Int getIndexingId();
  Set<ServerReplicationItem> getItems(String name);}
adds interface BasicReplicationItem {
  FileEntry getContents();
  [Atomic]
  Unit cleanup();
  FileId getAbsoluteDir();}
adds interface ServerReplicationItem extends BasicReplicationItem {
  Command getCommand();
  ReplicationItemType getType();
  [Atomic]
  Unit refresh();}
adds class ReplicationSnapshotImpl(ServerDataBase db, Schedules schedules) implements ReplicationSnapshot {
  Int count = 0;
  Int update = 0;
  TransactionId tid = - 1;
  Bool clean = True;
  Map<String, Set<ServerReplicationItem>> repItems = EmptyMap;
  
  Set<ServerReplicationItem> getItems(String name){
    return lookupDefault(repItems, name, EmptySet);
  }
  [Atomic]
  Unit refreshSnapshot(){
    count = ( count + 1 );
    if ( clean ){
      tid = db.refresh();
      update = ( update + 1 );
      this.createReplicationItems();
      Set<String> names = keys(repItems);
      while (hasNext(names)) {
        Pair<Set<String>, String> nn = next(names);
        Set<ServerReplicationItem> titems = lookupUnsafe(repItems, snd(nn));
        while (hasNext(titems)) {
          Pair<Set<ServerReplicationItem>, ServerReplicationItem> ni = next(titems);
          ServerReplicationItem item = snd(ni);
          item.refresh();
          titems = fst(ni);
        }
        names = fst(nn);
      }
      clean = False;
    }
  }
  [Atomic]
  Unit createReplicationItems(){
    Schedules tsc = schedules;
    while (hasNext(tsc)) {
      Pair<Schedules, Schedule> ns = next(tsc);
      this.replicationItems(snd(ns));
      tsc = fst(ns);
    }
  }
  [Atomic]
  Unit replicationItems(Schedule schedule){
    List<Item> is = items(schedule);
    Set<ServerReplicationItem> sitems = EmptySet;
    while (( is != Nil )) {
      ServerReplicationItem r = this.replicationItem(head(is));
      sitems = Insert( r, sitems );
      is = tail(is);
    }
    repItems = InsertAssoc( Pair( schedname(schedule), sitems ), repItems );
  }
  [Atomic]
  ServerReplicationItem replicationItem(Item i){
    ServerReplicationItem item = null;
    return item;
  }
  Unit clearSnapshot(){
    repItems = EmptyMap;
    clean = True;
  }
  Int getIndexingId(){
    return tid;
  }
  }
adds interface InternalItem extends BasicReplicationItem {
  [Atomic]
  Directory getState();
  [Atomic]
  Unit setState(Directory dir);}
adds class BasicReplicationItemImpl(FileId qualified, ServerDataBase db) implements InternalItem {
  Directory snapshot = updateDirWithDir(rootDir(), emptyDir(qualified));
  
  FileEntry getContents(){
    return dirContent(snapshot);
  }
  FileId getAbsoluteDir(){
    return qualified;
  }
  [( qualified <= max(qualified) )] [Atomic]
  Unit cleanup(){
    snapshot = updateDirWithDir(rootDir(), emptyDir(qualified));
  }
  [( result() <= max(snapshot) )] [Atomic]
  Directory getState(){
    return snapshot;
  }
  [Atomic]
  Unit setState(Directory dir){
    snapshot = dir;
  }
  }
modifies class TesterImpl{
adds Unit checkData(Item i, Directory exp, Directory act){
    
  }
  adds Unit compareEntrySets(Set<FileId> eids, Set<FileId> aids, Map<FileId, FileContent> ee, Map<FileId, FileContent> ae){
    assert ( size(eids) == size(aids) );
    while (hasNext(eids)) {
      Pair<Set<FileId>, FileId> nd = next(eids);
      FileId id = snd(nd);
      eids = fst(nd);
      FileContent es = lookupDefault(ee, id, NoContent);
      FileContent as = lookupDefault(ae, id, NoContent);
      result = Insert( Triple( id, es, as ), result );
      assert ( es == as );
    }
  }
  adds Unit compareFile(File e, File a){
    FileId id = getFileId(Left( e ));
    FileContent es = getFileContent(Left( e ));
    FileContent as = getFileContent(Left( a ));
    result = Insert( Triple( id, es, as ), result );
    assert ( es == as );
  }
  }
delta DirDelta;
uses ReplicationSystem;
adds class SearchDirectoryItem(FileId qualified, ServerDataBase db) implements ServerReplicationItem {
  InternalItem internal;
  {
    internal = new local BasicReplicationItemImpl(qualified, db);
  }
  
  FileEntry getContents(){
    return internal.getContents();
  }
  Command getCommand(){
    return AppendSearchFile;
  }
  ReplicationItemType getType(){
    return SearchReplicationDirectory;
  }
  FileId getAbsoluteDir(){
    return internal.getAbsoluteDir();
  }
  [Atomic]
  Unit refresh(){
    Directory snapshot = internal.getState();
    Maybe<FileContent> ffs = db.listFilesAt(qualified);
    if ( ( ffs != Nothing ) ){
      FileContent content = fromJust(ffs);
      assert isDirectory(content);
      snapshot = updateDirWithDir(snapshot, dir(qualified, entries(content)));
    }
    internal.setState(snapshot);
  }
  [Atomic]
  Unit cleanup(){
    internal.cleanup();
  }
  }
modifies class ReplicationSnapshotImpl{
modifies [Atomic]
  ServerReplicationItem replicationItem(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_ReplicationItemDelta(i);
    if ( ( ( item == null ) && isSearchItem(i) ) ){
      item = new local SearchDirectoryItem(left(item(i)), db);
    }
    return item;
  }
  }
modifies class TesterImpl{
modifies Unit checkData(Item i, Directory exp, Directory act){
    if ( isLeft(item(i)) ){
      FileId id = left(item(i));
      Bool eh = hasQualifiedEntriesIn(exp, id);
      Bool ah = hasQualifiedEntriesIn(act, id);
      assert ( eh == ah );
      if ( eh ){
        FileContent ce = fromJust(getFromEntryIn(exp, id));
        FileContent ca = fromJust(getFromEntryIn(act, id));
        if ( isFile(ce) ){
          this.compareFile(file(id, content(ce)), file(id, content(ca)));
        } else {
          this.compareDir(dir(id, entries(ce)), dir(id, entries(ca)));
        }
      }
    } else {
      this.checkDataORIGIN_ReplicationItemDelta(i, exp, act);
    }
  }
  adds Unit compareDir(Directory e, Directory a){
    this.compareEntrySets(getFileIdFromDir(e), getFileIdFromDir(a), qualifyFileEntry(entries(snd(e)), fst(e)), qualifyFileEntry(entries(snd(a)), fst(a)));
  }
  }
modifies class ReplicationSnapshotImpl{
adds [Atomic]
  ServerReplicationItem replicationItemORIGIN_ReplicationItemDelta(Item i){
    ServerReplicationItem item = null;
    return item;
  }
  }
modifies class TesterImpl{
adds Unit checkDataORIGIN_ReplicationItemDelta(Item i, Directory exp, Directory act){
    
  }
  }
delta FileDelta;
uses ReplicationSystem;
adds class ReplicationFilePattern(FileId qualified, String pattern, ServerDataBase db) implements ServerReplicationItem {
  InternalItem internal;
  {
    internal = new local BasicReplicationItemImpl(qualified, db);
  }
  
  FileEntry getContents(){
    return internal.getContents();
  }
  Command getCommand(){
    return ReceivePatternFile;
  }
  ReplicationItemType getType(){
    return ReplicationFilePattern;
  }
  FileId getAbsoluteDir(){
    return internal.getAbsoluteDir();
  }
  [( qualified <= max(qualified) )] [( pattern <= max(pattern) )] [( db <= max(db) )] [( internal <= max(internal) )] [Atomic]
  Unit refresh(){
    Directory snapshot = internal.getState();
    Maybe<FileContent> ffs = db.listFilesAt(qualified);
    if ( ( ffs != Nothing ) ){
      FileContent content = fromJust(ffs);
      assert isDirectory(content);
      FileEntry es = entries(content);
      Set<Pair<FileId, FileContent>> entryset = entrySet(es);
      while (hasNext(entryset)) {
        Pair<Set<Pair<FileId, FileContent>>, Pair<FileId, FileContent>> nt = next(entryset);
        Pair<FileId, FileContent> entry = qualifyEntry(snd(nt), qualified);
        FileId fid = fst(entry);
        if ( ( isAncester(qualified, fid) && filter(pattern, fid) ) ){
          snapshot = updateDirWithContent(snapshot, fid, snd(entry));
        }
        entryset = fst(nt);
      }
    }
    internal.setState(snapshot);
  }
  [( internal <= max(internal) )] [Atomic]
  Unit cleanup(){
    internal.cleanup();
  }
  }
modifies class ReplicationSnapshotImpl{
modifies [Atomic]
  ServerReplicationItem replicationItem(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_DirDelta(i);
    if ( ( ( item == null ) && isFileItem(i) ) ){
      Pair<FileId, String> it = right(item(i));
      item = new local ReplicationFilePattern(fst(it), snd(it), db);
    }
    return item;
  }
  }
modifies class TesterImpl{
modifies Unit checkData(Item i, Directory exp, Directory act){
    this.checkDataORIGIN_DirDelta(i, exp, act);
    if ( isRight(item(i)) ){
      FileId id = fst(right(item(i)));
      String pattern = snd(right(item(i)));
      Bool eh = hasQualifiedEntriesIn(exp, id);
      Bool ah = hasQualifiedEntriesIn(act, id);
      if ( ( ( eh != ah ) && eh ) ){
        FileContent ce = fromJust(getFromEntryIn(exp, id));
        assert ~ isFile(ce);
        assert emptySet(filters(pattern, getFileIdFromDir(dir(id, entries(ce)))));
      } else if ( eh ){
        FileContent ce = fromJust(getFromEntryIn(exp, id));
        FileContent ca = fromJust(getFromEntryIn(act, id));
        if ( isFile(ce) ){
          if ( filter(pattern, id) ){
            this.compareFile(file(id, content(ce)), file(id, content(ca)));
          }
        } else {
          this.compareDirWithPattern(pattern, dir(id, entries(ce)), dir(id, entries(ca)));
        }
      }
    }
  }
  adds Unit compareDirWithPattern(String pattern, Directory e, Directory a){
    this.compareEntrySets(filters(pattern, getFileIdFromDir(e)), filters(pattern, getFileIdFromDir(a)), qualifyFileEntry(entries(snd(e)), fst(e)), qualifyFileEntry(entries(snd(a)), fst(a)));
  }
  }
modifies class ReplicationSnapshotImpl{
adds [Atomic]
  ServerReplicationItem replicationItemORIGIN_DirDelta(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_ReplicationItemDelta(i);
    if ( ( ( item == null ) && isSearchItem(i) ) ){
      item = new local SearchDirectoryItem(left(item(i)), db);
    }
    return item;
  }
  }
modifies class TesterImpl{
adds Unit checkDataORIGIN_DirDelta(Item i, Directory exp, Directory act){
    if ( isLeft(item(i)) ){
      FileId id = left(item(i));
      Bool eh = hasQualifiedEntriesIn(exp, id);
      Bool ah = hasQualifiedEntriesIn(act, id);
      assert ( eh == ah );
      if ( eh ){
        FileContent ce = fromJust(getFromEntryIn(exp, id));
        FileContent ca = fromJust(getFromEntryIn(act, id));
        if ( isFile(ce) ){
          this.compareFile(file(id, content(ce)), file(id, content(ca)));
        } else {
          this.compareDir(dir(id, entries(ce)), dir(id, entries(ca)));
        }
      }
    } else {
      this.checkDataORIGIN_ReplicationItemDelta(i, exp, act);
    }
  }
  }
delta JournalDelta;
uses ReplicationSystem;
adds class ReplicationLogItem(FileId qualified, ServerDataBase db) implements ServerReplicationItem {
  Directory snapshot = rootDir();
  InternalItem internal;
  {
    internal = new local BasicReplicationItemImpl(qualified, db);
  }
  
  FileEntry getContents(){
    return internal.getContents();
  }
  Command getCommand(){
    return AppendSearchFile;
  }
  ReplicationItemType getType(){
    return LogReplicationItem;
  }
  FileId getAbsoluteDir(){
    return internal.getAbsoluteDir();
  }
  [Atomic]
  Unit refresh(){
    Directory snapshot = internal.getState();
    Maybe<FileContent> ffs = db.listFilesAt(qualified);
    if ( ( ffs != Nothing ) ){
      FileContent content = fromJust(ffs);
      assert isDirectory(content);
      snapshot = updateDirWithDir(snapshot, dir(qualified, entries(content)));
    }
    internal.setState(snapshot);
  }
  [Atomic]
  Unit cleanup(){
    internal.cleanup();
  }
  }
modifies class ReplicationSnapshotImpl{
modifies [Atomic]
  ServerReplicationItem replicationItem(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_FileDelta(i);
    if ( ( ( item == null ) && isLogItem(i) ) ){
      item = new local ReplicationLogItem(left(item(i)), db);
    }
    return item;
  }
  }
modifies class ReplicationSnapshotImpl{
adds [Atomic]
  ServerReplicationItem replicationItemORIGIN_FileDelta(Item i){
    ServerReplicationItem item = this.replicationItemORIGIN_DirDelta(i);
    if ( ( ( item == null ) && isFileItem(i) ) ){
      Pair<FileId, String> it = right(item(i));
      item = new local ReplicationFilePattern(fst(it), snd(it), db);
    }
    return item;
  }
  }
delta LoadDelta;
uses ReplicationSystem;
modifies class ReplicationSystemMain{
adds Int getMaxJobs(){
    return 7;
  }
  adds Int getMaxUpdates(){
    return 5;
  }
  adds [( c <= max(c) )]
  Set<ClientId> getCids(){
    Set<ClientId> cs = EmptySet;
    Int c = this.getNumberOfClients();
    while (( c > 0 )) {
      cs = Insert( c, cs );
      c = ( c - 1 );
    }
    return cs;
  }
  adds Int getNumberOfClients(){
    return 1;
  }
  }
delta ClientNrDelta(Int c, Int j);
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies Set<ClientId> getCids(){
    Int s = 2;
    Set<Int> cs = EmptySet;
    while (( s > 0 )) {
      cs = Insert( s, cs );
      s = ( s - 1 );
    }
    return cs;
  }
  modifies Int getMaxJobs(){
    return 5;
  }
  }
delta UpdateDelta(Int c);
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies Int getMaxUpdates(){
    return 3;
  }
  }
delta ScheduleDelta;
uses ReplicationSystem;









modifies class ReplicationSystemMain{
adds List<Pair<String, List<Item>>> businessItems = list(Cons( Pair( "Business rules", list(Cons( FileItem( "config", "config/business.xml" ), Nil )) ), Nil ));
  adds List<Pair<String, List<Item>>> dataItems = list(Cons( Pair( "Data", list(Cons( LogItem( "indices/itemstore/log" ), Cons( LogItem( "indices/tree/log" ), Nil ) )) ), Cons( Pair( "Data", list(Cons( FileItem( "indices/itemstore", "indices/itemstore/i" ), Cons( FileItem( "indices/tree", "indices/tree/t" ), Nil ) )) ), Nil ) ));
  adds List<Pair<String, List<Item>>> searchItems = list(Cons( Pair( "Search", list(Cons( SearchItem( "indices/search" ), Nil )) ), Nil ));
  adds Map<String, Pair<Int, Deadline>> schedulemaps = map(Cons( Pair( "Business rules", Pair( 0, Duration( 10 ) ) ), Cons( Pair( "Data", Pair( 0, Duration( 10 ) ) ), Cons( Pair( "Search", Pair( 0, Duration( 10 ) ) ), Nil ) ) ));
  adds Map<String, Pair<Int, Deadline>> getScheduleMap(){
    return schedulemaps;
  }
  adds List<Schedule> getSchedules(){
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMap();
    return itemMapToSchedule(Nil, m, searchItems);
  }
  }
delta SearchDelta(Int d, Int l);
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies Map<String, Pair<Int, Deadline>> getScheduleMap(){
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMapORIGIN_ScheduleDelta();
    m = put(m, "Search", Pair( 10, Duration( 20 ) ));
    return m;
  }
  }
modifies class ReplicationSystemMain{
adds Map<String, Pair<Int, Deadline>> getScheduleMapORIGIN_ScheduleDelta(){
    return schedulemaps;
  }
  }
delta BusinessDelta(Int d, Int l);
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies Map<String, Pair<Int, Deadline>> getScheduleMap(){
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMapORIGIN_ScheduleDelta();
    m = put(m, "Business rules", Pair( 10, Duration( 20 ) ));
    return m;
  }
  modifies List<Schedule> getSchedules(){
    List<Schedule> ss = this.getSchedulesORIGIN_ScheduleDelta();
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMap();
    return itemMapToSchedule(ss, m, businessItems);
  }
  }
modifies class ReplicationSystemMain{
adds List<Schedule> getSchedulesORIGIN_ScheduleDelta(){
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMap();
    return itemMapToSchedule(Nil, m, searchItems);
  }
  }
delta SearchBusinessDelta;
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies List<Schedule> getSchedules(){
    List<Schedule> ss = this.getSchedulesORIGIN_ScheduleDelta();
    List<Schedule> ss2 = this.getSchedulesORIGIN_BusinessDelta();
    return concatenate(ss, ss2);
  }
  }
modifies class ReplicationSystemMain{
adds List<Schedule> getSchedulesORIGIN_BusinessDelta(){
    List<Schedule> ss = this.getSchedulesORIGIN_ScheduleDelta();
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMap();
    return itemMapToSchedule(ss, m, businessItems);
  }
  }
delta DataDelta(Int d, Int l);
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies Map<String, Pair<Int, Deadline>> getScheduleMap(){
    Map<String, Pair<Int, Deadline>> m = original ();
    m = put(m, "Data", Pair( d, Duration( l ) ));
    return m;
  }
  modifies List<Schedule> getSchedules(){
    List<Schedule> ss = original ();
    Map<String, Pair<Int, Deadline>> m = this.getScheduleMap();
    return itemMapToSchedule(ss, m, dataItems);
  }
  }
delta SearchDataDelta;
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies List<Schedule> getSchedules(){
    List<Schedule> ss = original ();
    List<Schedule> ss2 = original ();
    return concatenate(ss, ss2);
  }
  }
delta BusinessDataDelta;
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies List<Schedule> getSchedules(){
    List<Schedule> ss = original ();
    List<Schedule> ss2 = original ();
    return concatenate(ss, ss2);
  }
  }
delta SearchBusinessDataDelta;
uses ReplicationSystem;
modifies class ReplicationSystemMain{
modifies List<Schedule> getSchedules(){
    List<Schedule> ss = original ();
    List<Schedule> ss2 = original ();
    List<Schedule> ss3 = original ();
    return concatenate(concatenate(ss, ss2), ss3);
  }
  }
delta DataClientNrDelta;
uses ReplicationSystem;

modifies class ReplicationSystemMain{
modifies Set<ClientId> getCids(){
    Set<ClientId> cs = original ();
    if ( ( size(cs) == 1 ) ){
      cs = Insert( failSafe(), cs );
    }
    return cs;
  }
  }
productline PL;
features ReplicationSystem, Resources, Client, Server, JobProcessing, Installation, Cloud, Site, Seq, Concur, ReplicationItem, Dir, File, Journal, Load, ClientNr, Update, Schedule, Search, Business, Data;
delta ReplicationSystemDelta when ReplicationSystem;
delta ResourcesDelta after ReplicationSystemDelta when Resources;
delta ClientDelta(Client.c) after ResourcesDelta when Client;
delta ServerDelta(Server.c) after ResourcesDelta when Server;
delta JobProcessingDelta after ReplicationSystemDelta when JobProcessing;
delta SeqDelta after JobProcessingDelta when Seq;
delta ConcurDelta after JobProcessingDelta when Concur;
delta ReplicationItemDelta after ReplicationSystemDelta when ReplicationItem;
delta DirDelta after ReplicationItemDelta when Dir;
delta FileDelta after ReplicationItemDelta when File;
delta JournalDelta after ReplicationItemDelta when Journal;
delta LoadDelta after ReplicationSystemDelta when Load;
delta ClientNrDelta(ClientNr.c, ClientNr.j) after LoadDelta when ClientNr;
delta UpdateDelta(Update.u) after LoadDelta when Update;
delta ScheduleDelta after LoadDelta when Schedule;
delta SearchDelta(Search.d, Search.l) after ScheduleDelta when Search;
delta BusinessDelta(Business.d, Business.l) after ScheduleDelta when Business;
delta DataDelta(Data.d, Data.l) after ScheduleDelta when Data;
delta DataClientNrDelta after ClientNrDelta, DataDelta when Data && ClientNr;
delta SearchBusinessDelta after SearchDelta, BusinessDelta when Search && Business;
delta SearchDataDelta after SearchDelta, DataDelta when Search && Data;
delta BusinessDataDelta after BusinessDelta, DataDelta when Business && Data;
delta SearchBusinessDataDelta after SearchDelta, BusinessDelta, DataDelta, SearchBusinessDelta, BusinessDataDelta, SearchDataDelta when Search && Business && Data;
