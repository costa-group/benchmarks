//Working File (not completed)
// by Lizeth Tapia (sltarifa) UIO


//NOTE: THIS EXAMPLE USES THE DATA TYPE LIBRARY LOCATED IN:
//.../frontend/src/abs/lang/abslang.abs

// We want to not use the ABS DATA TYPE LIBRARY,
// but instead make the functiuons we need explicit in this file
// To avoid loading the library, the abs compiler needs to be called with the flag -nostdlib
// ~/hats/Tools/ABS/trunk/frontend/src/bash/generateMaude BookShop.abs -o BookShop.maude -nostdlib

// Library module (replaces standard library)
module ABS.StdLib;
export *;
data Unit = Unit;               // builtin  
data Int;                       // builtin
data Bool = True | False;       // builtin
data String;                    // builtin  

// The following comes from the library:

data Pair<A, B> = Pair(A, B); // pair


def Int scount1() = 1;
def Int scount2() = 1;
def Int scount3() = 1;


// Sets
data Set<A> = EmptySet | Insert(A, Set<A>);

// set constructor helper
def Set<A> set<A>(List<A> l) = case l { Nil => EmptySet; Cons(x,xs) => Insert(x,set(xs)); };

/**
 * Returns True if set 'ss' contains element 'e', False otherwise.
 */
def Bool contains<A>(Set<A> ss, A e) =
  case ss {
    EmptySet => let (Int x) = scount1() in False ;
    Insert(e, _) => let (Int x) = scount1() in True;
    Insert(_, xs) => contains(xs, e);
  };

/**
 * Returns the value associated with key 'k' in map 'ms'.
 */
def B lookup<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  case ms {
  	InsertAssoc(Pair(k, y), _) => y;
        InsertAssoc(_, tm) => lookup(tm, k);
  };


// Lists 
data List<A> = Nil | Cons(A, List<A>);
def List<A> list<A>(List<A> l) = l; // list constructor helper
/**
 * Returns the first element of list 'list'.
 */
def A head<A>(List<A> list) = case list { Cons(p,l) => p ; };
/**
 * Returns a (possibly empty) list containing all elements of 'list'
 * except the first one.
 */
def List<A> tail<A>(List<A> list) = case list { Cons(p,l) => l ; };
/**
 * Returns a list containing all elements of list 'list1'
 * followed by all elements of list 'list2'.
 */
def List<A> concatenate<A>(List<A> list1, List<A> list2) =
  case list1 { 
    Nil => list2 ; 
    Cons(head, tail) => let (Int x) = scount1() in 
                        Cons(head, concatenate(tail, list2)); };

/**
 * Returns a list containing all elements of list 'list' followed by 'p'.
 */
def List<A> appendright<A>(List<A> list, A p) = 
    let (Int x) = scount2() in concatenate(list, Cons(p, Nil));
/**
 * Returns True if list 'list' is empty, False otherwise.
 */
def Bool isEmpty<A>(List<A> list) = let (Int x) = scount1() in list == Nil;


 
// Maps
data Map<A, B> = EmptyMap | InsertAssoc(Pair<A, B>, Map<A, B>);
 // map constructor helper (does not preserve injectivity)
def Map<A, B> map<A, B>(List<Pair<A, B>> l) =
  let (Int x) = scount1() in
  case l { Nil => EmptyMap; Cons(hd, tl) => InsertAssoc(hd, map(tl)); };

// This is the end of the code from the library 


//Book shop module
module BookShopTest;
import * from ABS.StdLib;

//type synonyms  
type Key = String ;
type Bookname = Key ; 
type Bookquantity = Int ;
type Bookweight = Int ;
type Bookbackordertime = Int ;

type Countryname = Key ;  
type Countryshiptime = Int ;
type Countryshipcost = Int ;

type Shippingcost = Int ;
type Shippingtime = Int ;

//Data Type declarations

data Bookinfo = ConsBookinfo(Bookquantity, Bookweight, Bookbackordertime) | NoBook ;
data Countryinfo = ConsCountryinfo(Countryshiptime, Countryshipcost) | NoCountry ;

data OrderResult = OrderFail | Result(List<Bookname>, Shippingcost, Shippingtime) ;
data DatabaseInfo = InfoFail | Info(Map<Bookname,Bookinfo>, Pair<Countryname,Countryinfo>) ;

//****************************************************************************************
//***************************************function definitions******************************
//****************************************************************************************

def Int count1() = 1;
def Int count2() = 1;
def Int count3() = 1;

//List

def List<A> shuffle<A>(List<A> list) =
   case list {
    Nil => let (Int x) = count1() in Nil ;
    Cons(head, tail) => let (Int x) = count2() in concatenate(tail, Cons(head, Nil)) ;
  };

def A chose<A>(List<A> list) = head( list);  // chose the head of a non-empty list


def List<A> choseN<A>(List<A> list, Int n) =
let (Int x) = count1() in case n > 0 {
True => case list { Nil => Nil ; Cons(head,tail) => Cons(head,choseN(tail,n-1)) ; } ;
False => Nil ;
};

//Pair
//def Key key<Key,A>(Pair<Key,A> p) =
//  case p {Pair(k,i) => k;};

def A info<Key,A>(Pair<Key,A> p) =
  case p {Pair(k,i) => i;};


//Map
def Set<A> domain<A,B>(Map<A,B> map) =
let (Int x) = count1() in
case map {
   EmptyMap => EmptySet;
   InsertAssoc(Pair(b,_), tail) => Insert(b,domain(tail)) ; 
} ;

def List<A> map2list<A,B>(Map<A,B> map) =
  let (Int x) = count1() in 
  case map {
    EmptyMap => Nil ;
    InsertAssoc(Pair(b,_), tail) => Cons(b, map2list(tail)) ;
  };

def Map<A,B> concatMap<A,B>(Map<A,B> map1, Map<A,B> map2) =
  case map1 {
    EmptyMap => map2 ;
    InsertAssoc(head, tail) =>  
     case head {
         Pair("",NoBook) => concatMap(tail, map2);
         Pair(k,i) => let (Int x) = count2() in InsertAssoc(Pair(k, i), concatMap(tail, map2)) ;
     };
  };

//Bookinfo

def Bookweight bookweight(Bookinfo book) = 
  case book {
    ConsBookinfo( _, w,_ ) => w ;
  };

//Countryinfo
def Countryshiptime countryshiptime(Countryinfo country) = 
  case country {
    ConsCountryinfo(t, _)=> t ;
  };

def Countryshipcost countryshipcost(Countryinfo country) = 
  case country {
    ConsCountryinfo(_, c) => c ;
  };

// DatabaseInfo

def  Map<Bookname,Bookinfo> getBookMap(DatabaseInfo db) =
   case db {
     InfoFail => let (Int x) = count1() in EmptyMap ;
     Info(bm, _) => bm ;
  };

def Pair<Countryname,Countryinfo> getCountryinfo (DatabaseInfo db) =
   case db {
     InfoFail => let (Int x) = count2() in Pair("",ConsCountryinfo(0,0)) ;
     Info(_, c) => c ;
  };

//****************************************************************************************
//******************************************** bookshop model******************************
//****************************************************************************************

//session

def Int calculateweight(Map<Bookname,Bookinfo> books) =
    case books {
      EmptyMap => 0 ;
      InsertAssoc(Pair(_,info), tail) => bookweight(info) + calculateweight(tail) ;
    };

def Int calculatecost(Int w, Int c) = w*c;


def Int calculatetime(Map<Bookname,Bookinfo> books, Int time) =
    case books {
      InsertAssoc(Pair(_, ConsBookinfo(0, _, t)), tail) => calculatetime(tail, time+t);
      InsertAssoc(Pair(_, ConsBookinfo(q, _,t)), tail)=> calculatetime(tail, time);
      EmptyMap => time ;
    };

// Database

def Map<Bookname,Bookinfo> getBooks(Map<Bookname,Bookinfo> booksDB,List<Bookname> books )  = 
  case books {
    Nil => let (Int x) = count1() in EmptyMap;
    Cons(head, tail) => case (contains(domain(booksDB),head)) { 
                         False => getBooks(booksDB,tail) ;
                         True => let (Int x) = count2() in 
		                 InsertAssoc(Pair(head,lookup(booksDB, head)),getBooks(booksDB, tail)); } ;
  };

def Map<Bookname,Bookinfo> updateBooks(Map<Bookname,Bookinfo> booksDB,List<Bookname> books )  = 
  case books {
    Nil => booksDB;
    Cons(head, tail) => let (Int x) = count1() in updateBooks(updateBook(booksDB,head,EmptyMap),tail);
  };

def Map<Bookname,Bookinfo> updateBook(Map<Bookname,Bookinfo> booksDB,Bookname book,Map<Bookname,Bookinfo> bookDB2)  =  
   case booksDB {
      EmptyMap => bookDB2;
      InsertAssoc(Pair(book,ConsBookinfo(0,w,t)),tail) => 
          let (Int x) = count3() in concatMap(bookDB2, InsertAssoc(Pair(book,ConsBookinfo(0,w,t)),tail));
      InsertAssoc(Pair(book,ConsBookinfo(q,w,t)),tail) => 
          let (Int x) = count3() in concatMap(bookDB2, InsertAssoc(Pair(book,ConsBookinfo(q-1,w,t)),tail));
      InsertAssoc(head,tail) => 
          let (Int x) = count2() in updateBook(tail, book,concatMap(bookDB2, InsertAssoc(head,EmptyMap)));      
   };

//***************************************************************************************************
//*************************************************classes*******************************************
//***************************************************************************************************

interface Client {
    Unit run();
}

interface Agent {
   Session getsession();
   Unit free(Session session);
}

interface Session {
   OrderResult order(List<Bookname> books, Countryname country);
}

interface Database {
   DatabaseInfo getInfo(List<Bookname> books, Countryname country);
   Bool confirmOrder(List<Bookname> books);
}

interface BookShopTest {
	Unit testSet();
	Unit testContains();
	Unit testLookUp();
	Unit testConcatenate();
	Unit testAppendRight();
	Unit testMap();
	Unit testShuffle();
	Unit testChoseN();
	Unit testDomain();
	Unit testMap2List();
	Unit testConcatMap();
	Unit testGetBooks();
	Unit testUpdateBooks();
	Unit testUpdateBook();
	Unit testOrder();
}

class BookShopTestImpl implements BookShopTest {
	
	Unit testSet() {
		List<Int> a = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));
		Set<Int> s = set(a);
		List<Int> b = Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil)))));
		List<Int> c = concatenate(a, b);
		Set<Int> s2 = set(c);
		List<Int> d = concatenate(a, b);
		List<Int> e = concatenate(c, d);
		Set<Int> s3 = set(c);
	}

	Unit testContains() {
		List<Int> a = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));
		Set<Int> s = set(a);
		Bool test1 = contains(s,11);
		List<Int> b = Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil)))));
		List<Int> c = concatenate(a, b);
		Set<Int> s2 = set(c);
		Bool test2 = contains(s2,11);
		List<Int> e = concatenate(c, c);
		Set<Int> s3 = set(e);
		Bool test3 = contains(s3,11);
	}

	Unit testLookUp() {
		List<Pair<Int,Int>> a = Cons(Pair(1,1), Cons(Pair(2,2), Cons(Pair(3,3), Cons(Pair(4,4), Cons(Pair(5,5), Nil)))));
		List<Pair<Int,Int>> b = Cons(Pair(6,6), Cons(Pair(7,7), Cons(Pair(8,8), Cons(Pair(9,9), Cons(Pair(10,10), Nil)))));
		List<Pair<Int,Int>> c = concatenate(a, b);
		Map<Int,Int> m = map(c);
		Int k = lookup(m,11);
		List<Pair<Int,Int>> d = Cons(Pair(101,1), Cons(Pair(20,2), Cons(Pair(30,3), Cons(Pair(40,4), Cons(Pair(50,5), Nil)))));
		List<Pair<Int,Int>> e = Cons(Pair(60,6), Cons(Pair(70,7), Cons(Pair(80,8), Cons(Pair(90,9), Cons(Pair(100,10), Nil)))));
		List<Pair<Int,Int>> e2 = concatenate(d,e);
		List<Pair<Int,Int>> e3 = concatenate(c,e2);
		Map<Int,Int> m2 = map(e3);
		Int k2 = lookup(m2,11);
		List<Pair<Int,Int>> f = Cons(Pair(1010,1), Cons(Pair(200,2), Cons(Pair(300,3), Cons(Pair(400,4), Cons(Pair(500,5), Nil)))));
		List<Pair<Int,Int>> g = Cons(Pair(600,6), Cons(Pair(700,7), Cons(Pair(800,8), Cons(Pair(900,9), Cons(Pair(1000,10), Nil)))));
		List<Pair<Int,Int>> g2 = concatenate(f,g);
		List<Pair<Int,Int>> g3 = concatenate(e3,g2);
		Map<Int,Int> m3 = map(g3);
		Int k3 = lookup(m3,11);
	}

	Unit testConcatenate() {
		List<Int> a = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));
		List<Int> b = Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil)))));
		List<Int> c = concatenate(a, b);
		List<Int> d = concatenate(a, b);
		List<Int> e = concatenate(c, d);
		List<Int> f = concatenate(c, d);
		List<Int> g = concatenate(e, f);
	}
	
	Unit testAppendRight() {
		List<Int> a = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));
		List<Int> a2 = appendright(a, 6);
		List<Int> b = Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil)))));
		List<Int> c = concatenate(a, b);
		List<Int> c2 = appendright(c, 11);
		List<Int> d = concatenate(a, b);
		List<Int> e = concatenate(c, d);
		List<Int> e2 = appendright(e, 11);
	}
	
	Unit testMap() {
		List<Pair<Int,Int>> a = Cons(Pair(1,1), Cons(Pair(2,2), Cons(Pair(3,3), Cons(Pair(4,4), Cons(Pair(5,5), Nil)))));
		List<Pair<Int,Int>> b = Cons(Pair(6,6), Cons(Pair(7,7), Cons(Pair(8,8), Cons(Pair(9,9), Cons(Pair(10,10), Nil)))));
		List<Pair<Int,Int>> c = concatenate(a, b);
		Map<Int,Int> m = map(c);
		List<Pair<Int,Int>> d = Cons(Pair(101,1), Cons(Pair(20,2), Cons(Pair(30,3), Cons(Pair(40,4), Cons(Pair(50,5), Nil)))));
		List<Pair<Int,Int>> e = Cons(Pair(60,6), Cons(Pair(70,7), Cons(Pair(80,8), Cons(Pair(90,9), Cons(Pair(100,10), Nil)))));
		Map<Int,Int> m2 = map(e);
		List<Pair<Int,Int>> f = Cons(Pair(1010,1), Cons(Pair(200,2), Cons(Pair(300,3), Cons(Pair(400,4), Cons(Pair(500,5), Nil)))));
		List<Pair<Int,Int>> g = Cons(Pair(600,6), Cons(Pair(700,7), Cons(Pair(800,8), Cons(Pair(900,9), Cons(Pair(1000,10), Nil)))));
		Map<Int,Int> m3 = map(g);
	}
	
	Unit testShuffle() {
		List<Int> a = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));
		//List<Int> a2 = shuffle(a);
		List<Int> b = Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil)))));
		List<Int> c = concatenate(a, b);
		//List<Int> c2 = shuffle(c);
		List<Int> d = concatenate(a, b);
		List<Int> e = concatenate(c, d);
		List<Int> e2 = shuffle(e);
	}
	
	Unit testChoseN() {
		List<Int> a = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));
		List<Int> n = choseN(a,4);
		List<Int> b = Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil)))));
		List<Int> c = concatenate(a, b);
		List<Int> n2 = choseN(c,9);
		List<Int> d = concatenate(a, b);
		List<Int> e = concatenate(c, d);
		List<Int> n3 = choseN(e,19);
	}
	
	Unit testDomain() {
		List<Pair<Int,Int>> a = Cons(Pair(1,1), Cons(Pair(2,2), Cons(Pair(3,3), Cons(Pair(4,4), Cons(Pair(5,5), Nil)))));
		List<Pair<Int,Int>> b = Cons(Pair(6,6), Cons(Pair(7,7), Cons(Pair(8,8), Cons(Pair(9,9), Cons(Pair(10,10), Nil)))));
		List<Pair<Int,Int>> c = concatenate(a, b);
		Map<Int,Int> m = map(c);
		Set<Int> k = domain(m);
		List<Pair<Int,Int>> d = Cons(Pair(101,1), Cons(Pair(20,2), Cons(Pair(30,3), Cons(Pair(40,4), Cons(Pair(50,5), Nil)))));
		List<Pair<Int,Int>> e = Cons(Pair(60,6), Cons(Pair(70,7), Cons(Pair(80,8), Cons(Pair(90,9), Cons(Pair(100,10), Nil)))));
		List<Pair<Int,Int>> e2 = concatenate(d,e);
		List<Pair<Int,Int>> e3 = concatenate(c,e2);
		Map<Int,Int> m2 = map(e3);
		Set<Int> k2 = domain(m2);
		List<Pair<Int,Int>> f = Cons(Pair(1010,1), Cons(Pair(200,2), Cons(Pair(300,3), Cons(Pair(400,4), Cons(Pair(500,5), Nil)))));
		List<Pair<Int,Int>> g = Cons(Pair(600,6), Cons(Pair(700,7), Cons(Pair(800,8), Cons(Pair(900,9), Cons(Pair(1000,10), Nil)))));
		List<Pair<Int,Int>> g2 = concatenate(f,g);
		List<Pair<Int,Int>> g3 = concatenate(e3,g2);
		Map<Int,Int> m3 = map(g3);
		Set<Int> k3 = domain(m3);
	}
	
	Unit testMap2List() {
		List<Pair<Int,Int>> a = Cons(Pair(1,1), Cons(Pair(2,2), Cons(Pair(3,3), Cons(Pair(4,4), Cons(Pair(5,5), Nil)))));
		List<Pair<Int,Int>> b = Cons(Pair(6,6), Cons(Pair(7,7), Cons(Pair(8,8), Cons(Pair(9,9), Cons(Pair(10,10), Nil)))));
		List<Pair<Int,Int>> c = concatenate(a, b);
		Map<Int,Int> m = map(c);
		List<Int> k = map2list(m);
		List<Pair<Int,Int>> d = Cons(Pair(101,1), Cons(Pair(20,2), Cons(Pair(30,3), Cons(Pair(40,4), Cons(Pair(50,5), Nil)))));
		List<Pair<Int,Int>> e = Cons(Pair(60,6), Cons(Pair(70,7), Cons(Pair(80,8), Cons(Pair(90,9), Cons(Pair(100,10), Nil)))));
		List<Pair<Int,Int>> e2 = concatenate(d,e);
		List<Pair<Int,Int>> e3 = concatenate(c,e2);
		Map<Int,Int> m2 = map(e3);
		List<Int> k2 = map2list(m2);
		List<Pair<Int,Int>> f = Cons(Pair(1010,1), Cons(Pair(200,2), Cons(Pair(300,3), Cons(Pair(400,4), Cons(Pair(500,5), Nil)))));
		List<Pair<Int,Int>> g = Cons(Pair(600,6), Cons(Pair(700,7), Cons(Pair(800,8), Cons(Pair(900,9), Cons(Pair(1000,10), Nil)))));
		List<Pair<Int,Int>> g2 = concatenate(f,g);
		List<Pair<Int,Int>> g3 = concatenate(e3,g2);
		Map<Int,Int> m3 = map(g3);
		List<Int> k3 = map2list(m3);
	}
	
	Unit testConcatMap() {
		List<Pair<Int,Int>> a = Cons(Pair(1,1), Cons(Pair(2,2), Cons(Pair(3,3), Cons(Pair(4,4), Cons(Pair(5,5), Nil)))));
		List<Pair<Int,Int>> b = Cons(Pair(6,6), Cons(Pair(7,7), Cons(Pair(8,8), Cons(Pair(9,9), Cons(Pair(10,10), Nil)))));
		List<Pair<Int,Int>> c = concatenate(a, b);
		Map<Int,Int> m = map(c);

		List<Pair<Int,Int>> d = Cons(Pair(101,1), Cons(Pair(20,2), Cons(Pair(30,3), Cons(Pair(40,4), Cons(Pair(50,5), Nil)))));
		List<Pair<Int,Int>> e = Cons(Pair(60,6), Cons(Pair(70,7), Cons(Pair(80,8), Cons(Pair(90,9), Cons(Pair(100,10), Nil)))));
		List<Pair<Int,Int>> e2 = concatenate(d,e);
		List<Pair<Int,Int>> e3 = concatenate(c,e2);
		Map<Int,Int> m2 = map(e3);
		Map<Int,Int> m3 = concatMap(m,m2);
		List<Pair<Int,Int>> f = Cons(Pair(1010,1), Cons(Pair(200,2), Cons(Pair(300,3), Cons(Pair(400,4), Cons(Pair(500,5), Nil)))));
		List<Pair<Int,Int>> g = Cons(Pair(600,6), Cons(Pair(700,7), Cons(Pair(800,8), Cons(Pair(900,9), Cons(Pair(1000,10), Nil)))));
		List<Pair<Int,Int>> g2 = concatenate(f,g);
		List<Pair<Int,Int>> g3 = concatenate(e3,g2);
		Map<Int,Int> m4 = map(g3);
		Map<Int,Int> m5 = concatMap(m3,m4);
	}
	
	Unit testGetBooks() {
		List<Bookname> books = Cons("book4", Cons("book3", Cons("book2", Cons("book1", Cons("book0", Nil)))));
		
		List<Pair<Bookname,Bookinfo>> a = Cons(Pair("book0",ConsBookinfo(0,0,0)), 
											Cons(Pair("book1",ConsBookinfo(1,0,1)), 
											Cons(Pair("book2",ConsBookinfo(2,0,2)), 
											Cons(Pair("book3",ConsBookinfo(3,0,3)), 
											Cons(Pair("book4",ConsBookinfo(4,0,4)), Nil)))));
		List<Pair<Bookname,Bookinfo>> b = Cons(Pair("book5",ConsBookinfo(5,0,5)), 
											Cons(Pair("book6",ConsBookinfo(6,0,6)), 
											Cons(Pair("book7",ConsBookinfo(7,0,7)), 
											Cons(Pair("book8",ConsBookinfo(8,0,8)), 
											Cons(Pair("book9",ConsBookinfo(9,0,9)), Nil)))));
		
		List<Pair<Bookname,Bookinfo>> c = concatenate(a,b);
		
		Map<Bookname,Bookinfo> m = map(c);
		
		//Map<Bookname,Bookinfo> m1 = getBooks(m,books);
		
		List<Bookname> books2 = Cons("book9", Cons("book8", Cons("book7", Cons("book6", Cons("book5", Nil)))));
		
		//Map<Bookname,Bookinfo> m2 = getBooks(m,books2);
	}
	
	Unit testUpdateBooks() {
		List<Pair<Bookname,Bookinfo>> a = Cons(Pair("book0",ConsBookinfo(0,0,0)), 
											Cons(Pair("book1",ConsBookinfo(1,0,1)), 
											Cons(Pair("book2",ConsBookinfo(2,0,2)), 
											Cons(Pair("book3",ConsBookinfo(3,0,3)), 
											Cons(Pair("book4",ConsBookinfo(4,0,4)), Nil)))));
		List<Pair<Bookname,Bookinfo>> b = Cons(Pair("book5",ConsBookinfo(5,0,5)), 
											Cons(Pair("book6",ConsBookinfo(6,0,6)), 
											Cons(Pair("book7",ConsBookinfo(7,0,7)), 
											Cons(Pair("book8",ConsBookinfo(8,0,8)), 
											Cons(Pair("book9",ConsBookinfo(9,0,9)), Nil)))));
		List<Pair<Bookname,Bookinfo>> c = concatenate(a,b);
		
		Map<Bookname,Bookinfo> m = map(c);
		
		List<Bookname> books2 = Cons("book9", Cons("book8", Cons("book7", Cons("book6", Cons("book9", Nil)))));
		
		Map<Bookname,Bookinfo> m2 = updateBooks(m, books2);
	}
	
	Unit testUpdateBook() {
		List<Pair<Bookname,Bookinfo>> a = Cons(Pair("book0",ConsBookinfo(0,0,0)), 
											Cons(Pair("book1",ConsBookinfo(1,0,1)), 
											Cons(Pair("book2",ConsBookinfo(2,0,2)), 
											Cons(Pair("book3",ConsBookinfo(3,0,3)), 
											Cons(Pair("book4",ConsBookinfo(4,0,4)), Nil)))));
		List<Pair<Bookname,Bookinfo>> b = Cons(Pair("book5",ConsBookinfo(5,0,5)), 
											Cons(Pair("book6",ConsBookinfo(6,0,6)), 
											Cons(Pair("book7",ConsBookinfo(7,0,7)), 
											Cons(Pair("book8",ConsBookinfo(8,0,8)), 
											Cons(Pair("book9",ConsBookinfo(9,0,9)), Nil)))));
		Map<Bookname,Bookinfo> m1 = map(a);
		Map<Bookname,Bookinfo> m2 = map(b);
		
		Bookname book = "book9";
		Map<Bookname,Bookinfo> test = updateBook(m1,book,m2);
	}
	
	Unit testOrder() {
	        Map<Bookname,Bookinfo> bDB = map[Pair("book1",ConsBookinfo(0, 2, 60)),
                                                 //Pair("book2",ConsBookinfo(5, 2, 7)), 
						 //Pair("book3",ConsBookinfo(5, 2, 7)), 
						 //Pair("book4",ConsBookinfo(5, 2, 7)), 
                                                 Pair("book5",ConsBookinfo(2, 3, 1))];
		// term-size(bDB) = 36
		Map<Countryname,Countryinfo> cDB = map[Pair("Peru",ConsCountryinfo(15, 150)),
                                                       //Pair("Norway",ConsCountryinfo(2, 50)), 
						       //Pair("USA",ConsCountryinfo(2, 50)), 
						       //Pair("UK",ConsCountryinfo(2, 50)), 
                                                       Pair("Spain",ConsCountryinfo(10, 100))];
		//term-size(cDB) = 31

		//List<Bookname> lb1 = list["book3", "book", "book1", "book2", "other"];
		//term-size(lb1) = 11

		List<Bookname> lb1 = list["book1"];
		//term-size(lb1) = 3
		
		Agent agent;
		Database db;
		db = new local DatabaseImp(bDB, cDB);
		agent = new local AgentImp(db);
		Session session = new local SessionImp(agent,db);
		session.order(lb1,"Peru");
	}

}

// agent

class AgentImp(Database db) implements Agent {
 
  List<Session> sessions = Nil;

  Unit free(Session session) {
    sessions = appendright(sessions, session);
  }

  Session getsession() {
    Session session; 
    if (isEmpty(sessions)) {
	Int x = count2(); // because of SessionImp.init
       session = new local SessionImp(this,db);  } 
    else {
       session = head(sessions);
       sessions = tail(sessions); } 
    return session;}
}

// session

class SessionImp(Agent agent, Database db) implements Session {

    Shippingcost shippingcost = 0;
    Shippingtime shippingtime = 0;
    OrderResult result = OrderFail;
    Bool updatedb = False;

    OrderResult order(List<Bookname> books, Countryname country) {
        DatabaseInfo preresult = InfoFail ;
        preresult = db.getInfo(books,country);
	Int x = count2();
        if (preresult != InfoFail) {
	    shippingcost = calculatecost(calculateweight(getBookMap(preresult)),countryshipcost(info(getCountryinfo(preresult))));
            shippingtime = calculatetime(getBookMap(preresult), countryshiptime(info(getCountryinfo(preresult))));
            updatedb = db.confirmOrder(map2list(getBookMap(preresult)));
	    Int x = count1();
            if (updatedb){result = Result(map2list(getBookMap(preresult)), shippingcost, shippingtime);}
            else {result = OrderFail;}
         }
        else {result = OrderFail; Int x = count1();}
        agent.free(this);
        return result;
        
    }
}

// Database;

class  DatabaseImp(Map<Bookname,Bookinfo> bDB, Map<Countryname,Countryinfo> cDB) implements Database {
   
    Map<Bookname,Bookinfo> booksDB = bDB;


   DatabaseInfo getInfo(List<Bookname> books, Countryname country){
      DatabaseInfo result = InfoFail;
      Map<Bookname,Bookinfo> myorder = EmptyMap ;
      List<Bookname> mybooks = Nil;
      Int x = count3();
      mybooks = books ;
      myorder = getBooks(booksDB, books) ;
      result = Info(myorder, Pair(country,lookup(cDB, country)));
      x = count2();
      return result;
   }

   Bool confirmOrder(List<Bookname> books){
      booksDB = updateBooks(booksDB, books);
      Int x = count1();
      return True;
   }
}

//client

class  SyncClient(Agent agent, List<Bookname> books, List<Countryname> countries) implements Client {

    List<Bookname> b = books;
    List<Countryname> c = countries;
    OrderResult result = OrderFail ;

    Unit run() {
        List<Bookname> chosenBooks = Nil;
	Int x = count1();
        Countryname chosenCountry = "";
        Session session ;
        c = shuffle(c);
        b = shuffle(b);
        chosenCountry = chose(c);
        chosenBooks = choseN(b,4);
        session = agent.getsession();
        result = session.order(chosenBooks,chosenCountry);
       // this.run();
       }
}

//***************************************************************
//****************************main******************************
//***************************************************************

{

BookShopTest t = new local BookShopTestImpl();
t.testShuffle();
//t.testGetBooks();
//t.testOrder();


/*
Name    q  w  bo
----------------
book1   0  2  60
book2   5  2   7
book3   2  3   1

Name     st  scXw
-----------------
Peru    15   150
Norway   2    50
Spain   10   100
*/
/*
    Map<Bookname,Bookinfo> bDB = map[Pair("book1",ConsBookinfo(0, 2, 60)),
                                     Pair("book2",ConsBookinfo(5, 2, 7)), 
                                     Pair("book3",ConsBookinfo(2, 3, 1))];

    Map<Countryname,Countryinfo> cDB = map[Pair("Peru",ConsCountryinfo(15, 150)),
                                           Pair("Norway",ConsCountryinfo(2, 50)), 
                                           Pair("Spain",ConsCountryinfo(10, 100))];

    List<Bookname> lb1 = list["book3", "book", "book1", "book2", "other"] ;
    List<Bookname> lb2 = list["book3", "book2"] ;
    Agent agent;
    Client client1;
    Client client2;
    Database db;
    db = new local  DatabaseImp(bDB, cDB);
    agent = new local AgentImp(db);
    client1 = new local SyncClient(agent,lb1, map2list(cDB));
    client2 = new local SyncClient(agent,lb2, map2list(cDB));
    client1.run();
    client2.run();
*/
/* result

   client 1: available books: book1, book2
             shipping cost: 200 ------- 4kg * 50
             shipping time: 62 ------- 2(Norway) + 60(backup order for book1)

   client 2: available books: book2, book3
             shipping cost: 250 ------- 5kg * 50
             shipping time: 2 ------- 2(Norway)
*/

}

