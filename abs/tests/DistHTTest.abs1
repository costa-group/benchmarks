module DistHTTest;
import * from ABS.StdLib;

type Key = Int;
type Data = Int; 

def Int count1() = 1;
def Int count2() = 1;
def Int count3() = 1;


def Int hash(Key k,Int n) = k%n;

def Map<A, B> myput<A, B>(Map<A, B> ms, A k, B v) =
  case ms {
    EmptyMap => let (Int x) = count3() in InsertAssoc(Pair(k, v),EmptyMap);
    InsertAssoc(Pair(k, _), ts) => let (Int x) = count2() in InsertAssoc(Pair(k, v), ts);
    InsertAssoc(p, ts) => let (Int x) = count1() in  InsertAssoc(p, myput(ts, k, v));
  }; 

interface DistHTInt{
    Data getData(Key key);
    List<Data> getAllData(List<Key> keys);
    Unit putData(Key key,Data d);
    NodeInt lookupNode(Key key);
}

interface NodeInt{
    Data getData(Key key);
    Unit putData(Key key,Data d);
}


class DistHT(List<NodeInt> nodes) implements DistHTInt{
    Int nNodes = length(nodes);

    NodeInt lookupNode(Key key){
    	Int n = hash(key,nNodes);
	NodeInt node = nth(nodes,n);
	return node;
    }

    Data getData(Key key){
	NodeInt node;
	node = this.lookupNode(key);
	Fut<Data> f;
	Data d = 0;
	f = node!getData(key);
	d = f.get;
	return d;
    }

    List<Data> getAllData(List<Key> keys){
	List<Data> r = Nil;
	if (keys != Nil){
	    Key firstK = head(keys);
	    List<Key> tailKs = tail(keys);
	    NodeInt node;
	    node = this.lookupNode(firstK);
	    Fut<Data> fd; 
	    Data d = 0;
	    Fut<List<Data>> fds; 
	    List<Data> ds = Nil;
	    fd = node!getData(firstK);
	    fds = this!getAllData(tailKs);
	    await fd? & fds?;
	    d = fd.get;
	    ds = fds.get;
	    r = Cons(d,ds);
	}
	return r;
    }

    Unit putData(Key key,Data d){
	NodeInt node;
	node = this.lookupNode(key);
	node!putData(key,d);
    }
}


class Node(Map<Key,Data> map) implements NodeInt{
    Data getData(Key key){
	return lookup(map,key);
    }

    Unit putData(Key key,Data d){
	map = myput(map,key,d);
    }
}


{
    Map<Key,Data> m1 = EmptyMap;
    Map<Key,Data> m2 = EmptyMap;
    NodeInt n1 = new local Node(m1);
    NodeInt n2 = new local Node(m2);
    DistHTInt dht = new local DistHT(Cons(n1,Cons(n2,Nil)));
    Int x = count3();

    dht.putData(2,1);
    dht.putData(5,2);
    dht.putData(7,3);
    dht.putData(4,4);
    dht.getAllData(Cons(2,Cons(5,Cons(4,Nil))));
    x = count2(); x = count2();
}
