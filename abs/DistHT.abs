module DistHT;
import * from ABS.StdLib;

type Key = Int;
type Data = Int; 

def Int hash(Key k,Int n) = k%n;

//[k > 111][result() > 0]
def B mylookup<A, B>(Map<A, B> ms, A k) = // retrieve from the map
  case ms {
     InsertAssoc(Pair(k, y), _) => y;
     // InsertAssoc(_, tm) => lookup(tm, k);
     // Rewritten for aPET (to avoid having fresh vars in the nomatch not present in the match)
     InsertAssoc(Pair(_, _), tm) => mylookup(tm, k);
  };

def Map<A, B> myput<A, B>(Map<A, B> ms, A k, B v) =
  case ms {
    EmptyMap => InsertAssoc(Pair(k, v),EmptyMap);
    InsertAssoc(Pair(k, _), ts) => InsertAssoc(Pair(k, v), ts);
    // InsertAssoc(p, ts) => InsertAssoc(p, myput(ts, k, v));
    // Rewritten for aPET (to avoid having fresh vars in the nomatch not present in the match)
    InsertAssoc(Pair(kp,vp), ts) => InsertAssoc(Pair(kp,vp), myput(ts, k, v));
  };


interface DistHTInt{
    Maybe<Data> getData(Key key);
    List<Maybe<Data>> getAllData(List<Key> keys);
    Unit putData(Key key,Data d);
    NodeInt lookupNode(Key key);
    Set<Key> getAllKeys();
}

interface NodeInt{
    Maybe<Data> getData(Key key);
    Unit putData(Key key,Data d);
    Set<Key> getKeys();
}


class DistHT(List<NodeInt> nodes,Int nNodes) implements DistHTInt{

    [nodes <= max(nodes)][nNodes <= max(nNodes)]
    NodeInt lookupNode(Key key){
    	Int n = hash(key,nNodes);
	NodeInt node = nth(nodes,n);
	return node;
    }

    Maybe<Data> getData(Key key){
	NodeInt node;
	node = this.lookupNode(key);
	Fut<Maybe<Data>> f;
	f = node!getData(key);
	await f?;
	Maybe<Data> d = f.get;
	return d;
    }

    List<Maybe<Data>> getAllData(List<Key> keys){
	List<Maybe<Data>> r = Nil;
	Key firstK = 0; List<Key> tailKs = Nil;
	NodeInt node;
	Fut<Maybe<Data>> fd; Fut<List<Maybe<Data>>> fds; 
	Maybe<Data> d = Just(0); List<Maybe<Data>> ds = Nil;
	if (keys != Nil){
	    firstK = head(keys);
	    tailKs = tail(keys);
	    node = this.lookupNode(firstK);
	    fd = node!getData(firstK);
	    fds = this!getAllData(tailKs);
	    await fd? & fds?;
	    d = fd.get;
	    ds = fds.get;
	    r = Cons(d,ds);
	}
	return r;
    }

    [nodes <= max(nodes)]
    Set<Key> getAllKeys(){
	return this.getAllKeysAux(nodes);
    }
    
    Set<Key> getAllKeysAux(List<NodeInt> ns){
	Set<Key> r = EmptySet;
	NodeInt firstNode; List<NodeInt> tailNs = Nil;
	Fut<Set<Key>> fFirstKs; Fut<Set<Key>> fRKs; 
	Set<Key> firstKs = EmptySet; Set<Key> rKs = EmptySet;
	if (ns != Nil){
	    firstNode = head(ns);
	    tailNs = tail(ns);
	    fFirstKs = firstNode!getKeys();
	    fRKs = this!getAllKeysAux(tailNs);
	    await fFirstKs? & fRKs?;
	    firstKs = fFirstKs.get;
	    rKs = fRKs.get;
	    r = union(firstKs,rKs);
	}
	return r;
    }

    Unit putData(Key key,Data d){
	NodeInt node;
	node = this.lookupNode(key);
	node!putData(key,d);
    }
}


class Node(Map<Key,Data> map) implements NodeInt{

    [map <= max(map)]
    Maybe<Data> getData(Key key){
	return lookup(map,key);
    }

    [map <= max(map)]
    Unit putData(Key key,Data d){
	map = myput(map,key,d);
    }

    [map <= max(map)]
    Set<Key> getKeys(){
	return keys(map);
    }
}
   

{
    Map<Key,Data> m1 = EmptyMap;
    Map<Key,Data> m2 = EmptyMap;
    NodeInt n1 = new local Node(m1);
    NodeInt n2 = new local Node(m2);
    DistHTInt dht = new local DistHT(Cons(n1,Cons(n2,Nil)),2);
    dht!getData(0);
    dht!putData(0,10);
    dht!putData(0,12);
    dht!putData(0,20);
    //dht!getAllData(Cons(0,Cons(1,Nil)));

/*    dht.putData(2,1);
    dht.putData(5,2);
    dht.putData(7,3);
    dht.putData(4,4);
    //dht.getAllData(Cons(2,Nil));
    dht.getAllData(Cons(2,Cons(5,Cons(4,Nil))));
    dht.getAllKeys();*/
}
