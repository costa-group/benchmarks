module PowList;

import * from ABS.DC;

type Pepe = List< Pair<Int, List<Int>>>;


def Int todos(List<Int> l, Int e) = 
  case l {
    Nil => 0;
    Cons(x,xs) => 1 + todos(xs,e);
  };

def Int truluri(Pepe p, Int e) = 
  case p {
    Nil => 0;
    Cons(pair,rp) => todos(snd(pair),e) + truluri(rp,e);
  };
  
def Int test(List<List<Int>> l) =
  case l {
    Nil => 0;
    Cons(ll,t) => length(ll) + test(t);
  };
  
def Int test2(List<List<List<Int>>> l) =
  case l {
    Nil => 0;
    Cons(ll,t) => test(ll) + test2(t);
  };  

def Int test3(List<List<Int>> l) =
  case l {
    Nil => 0;
    Cons(ll,t) => 1 + test3(t);
  };
  
def Int test4(List<Int> l) =
  case l {
    Nil => 0;
    Cons(h,t) => recorre(h) + test4(t);
  }; 
  
def Int recorre(Int n) =
  case n > 0 {
    True => 1 + recorre(n-1);
    False => 0;
  };
  
def Int f(Set<Pair<Int,Bool>> x) = 
  4;
  
def Int flog(Rat n) =
  case n <= 0 {
    True => 0;
    False => 1 + flog(n - 1);
  };
  
def Int fpow(Rat n) =
  case n <= 0 {
    True => 1;
    False => 1 + fpow(n-1) + fpow(n-1);
  };

  
  


interface I {
  List<Int> powlist(List<Int> list, Int n);
  Int pow(Int elem, Int n);
}

class C(Int int_field) implements I {

  Int flog(Int n){
    Int i = 0;
    while (n>0){
      n = n / 2;
      i = i + 1;
    }
    return i;
  }

  List<Int> powlist(List<Int> list, Int n) {
    List<Int> result = Nil;
    while (list != Nil) {
      Int h = head(list);
      Fut<Int> f = this ! pow(h, n);
      Int pow_h = f.get;
      result = Cons(pow_h,result);
      list = tail(list);
    }
    return result;
  }
  
  Int oye(List<List<Int>> l){
    Int counter = 0;
    
    while (l != Nil){
      List<Int> h = head(l);
      l = tail(l);
      
      while (h != Nil){
        Int hp = head(h);
        counter = counter + hp;
        h = tail(h);
      }
      
    }
    
    return counter;
  }
  
  Int pow(Int elem, Int n) {
    Int i = 0;
    Int acc = 1;
    while (i < n) {
      acc = acc * n;
      i = i + 1;
    }
    return acc;
  }
  
  Int norf(Int n){
    while (n>0){
      n = n + 1;
    }
    return n;
  }

  [int_field <= max(int_field)]  
  Unit loop_field(){
    while (int_field > 0){
      int_field = int_field - 1;
    }
  }

}
