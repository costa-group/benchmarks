
/*
 * A working version of a program with two producers and 
 * two consumers comunicating via a shared bounded-buffer
 *
 */

module BoundedBuffer;
import * from ABS.StdLib;

type Data = Int ;
//type Buffer = DataList
data DataList = DataNil | ConsData(Data, DataList) ;

def Data dataHead(DataList dl) = case dl { ConsData(d,l) => d ; };  
def DataList dataTail(DataList dl) = case dl { ConsData(d,l) => l ; }; 

def DataList appendData(Data d, DataList list)
  = concat(list, ConsData(d,DataNil));

def DataList concat(DataList l1 , DataList l2) = 
case l1 { 
    DataNil => l2 ; 
    ConsData(hd,tl) => ConsData(hd, concat(tl,l2)) ; 
};
    
interface Buffer {

    //Unit init();
    Unit append(Data d);
    Data remove();
}

interface Consumer {
    Unit loop(Data d);
} 

interface Producer {
    Unit loop(Data d);
}


class BoundedBuffer (Int size) implements Buffer {
    
    //A bounded buffer
    DataList buffer = DataNil; 
    Int n = 0;

	[buffer <= max(size)]
    Unit append(Data d){
    	[old(size) == size]
        await (n < size) ; 
		buffer = concat(buffer,ConsData(d,DataNil));
        n = n + 1 ; 
    }
    
    Data remove() {
        Data d = 10;
        DataList buffer2 = DataNil; 
        await n > 0 ; 
        d = dataHead(buffer);
        buffer2 = dataTail(buffer);
        buffer = buffer2;
        n = n - 1 ; 
        return d ; 
    }
}

class ProducerImpl (Buffer b) implements Producer {
    
    Unit loop(Data d) {
       while(d > 0) {
       	b!append(d);
       	d = d - 1;
       }
    }
}

class ConsumerImpl (Buffer b) implements Consumer {
    
    Unit loop(Data d) {
       while(d > 0) {
        b!remove();
       	d = d - 1;
       }
    }
}
interface IOInterface {
	Unit producein (Int nprod, Int nreq);
	Unit consumein (Int mcons, Int mreq);
	Unit produceout (Int nprod, Int nreq);
	Unit consumeout (Int mcons, Int mreq);
	Unit produceerr (Int nprod, Int nreq);
	Unit consumeerr (Int mcons, Int mreq);
}
class IOClass (Buffer stdin, Buffer stdout, Buffer stderr) implements IOInterface{
	Unit producein (Int nprod, Int nreq) {
	    while(nprod > 0) {
		    Producer p;
		    p = new ProducerImpl(stdin);
		    p!loop(nreq);   
        	nprod = nprod - 1;
        }
	}

	Unit consumein (Int mcons, Int mreq) {
	     while(mcons > 0) {
		    Consumer c;  
	    	c = new ConsumerImpl(stdin);
        	c!loop(mreq);
        	mcons = mcons - 1;
        }
	}
	Unit produceout (Int nprod, Int nreq) {
	    while(nprod > 0) {
		    Producer p;
		    p = new ProducerImpl(stdout);
		    p!loop(nreq);   
        	nprod = nprod - 1;
        }
	}

	Unit consumeout (Int mcons, Int mreq) {
	     while(mcons > 0) {
		    Consumer c;  
	    	c = new ConsumerImpl(stdout);
        	c!loop(mreq);
        	mcons = mcons - 1;
        }
	}
	Unit produceerr (Int nprod, Int nreq) {
	    while(nprod > 0) {
		    Producer p;
		    p = new ProducerImpl(stderr);
		    p!loop(nreq);   
        	nprod = nprod - 1;
        }
	}

	Unit consumeerr (Int mcons, Int mreq) {
	     while(mcons > 0) {
		    Consumer c;  
	    	c = new ConsumerImpl(stderr);
        	c!loop(mreq);
        	mcons = mcons - 1;
        }
	}
}

interface IMain {
	Unit main (Int nprod, Int mcons, Int size, Int nreq, Int mreq);
}
class Main implements IMain {

	Unit main (Int nprod, Int mcons, Int size, Int nreq, Int mreq) {
	    Buffer stdin = new BoundedBuffer(size); 
	    Buffer stdout = new BoundedBuffer(size); 
	    Buffer stderr = new BoundedBuffer(size); 
		IOInterface io; 
		io  = new IOClass(stdin,stdout,stderr);
		
		io!producein(nprod,nreq);
		io!consumein(nprod,nreq);
		io!produceout(nprod,nreq);
		io!consumeout(nprod,nreq);
		io!produceerr(nprod,nreq);
		io!consumeerr(nprod,nreq);
		
	}

		

	Unit mainold (Int nprod, Int mcons, Int size, Int nreq, Int mreq) {
        Buffer buff;
	    buff = new BoundedBuffer(size); 
        while(nprod > 0) {
		    Producer p;
		    p = new local ProducerImpl(buff);
		    p!loop(nreq);   
        	nprod = nprod - 1;
        }
        while(mcons > 0) {
		    Consumer c;  
	    	c = new ConsumerImpl(buff);
        	c!loop(mreq);
        	mcons = mcons - 1;
        }
	}
	
}

class C {
	Unit m (Int nprod, Int mcons, Int size, Int nreq, Int mreq) {
		IMain main1 = new Main ();
		IMain main2 = new Main ();
		
		main1.main (nprod,mcons,size,nreq,mreq);
		main2.main (nprod,mcons,size,nreq,mreq);
	}
}
