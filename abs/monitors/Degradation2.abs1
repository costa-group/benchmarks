
module DegradationView;
  export DegradationMonitorIf, DegradationMonitorImpl;
  import Monitor from GenericMonitor; 

//imports from grammar

//type declarations in grammar
interface Deploy {
	Unit scaleUp();
	Unit scaleDown();
}

class Deployer() implements Deploy {
	Unit scaleUp() { }
	Unit scaleDown() { }
}

//datatype with states of FSM 
data Degradation_States =
S;
	

interface DegradationMonitorIf extends Monitor {
   Unit notify_query(Time t, Rat procTime);
   
}

interface DegradationMetricIf {
   List<Rat> notify_query(Time t, Rat procTime);
   
}

class DegradationMetricImpl implements DegradationMetricIf {
   List<Rat> slowQpct = list[0,0];
   Int cnt = 0;
   Int slow200Cnt = 0;
   Int slow500Cnt = 0  ;
   Degradation_States curState = S;

   List<Rat> notify_query(Time t, Rat procTime) {
      
   		
   	if(curState == S) {
   		curState = S;
          { cnt=cnt+1;
                  slow200Cnt = slow200Cnt + case(procTime>200) { True => 1; False => 0;};
                  slow500Cnt = slow500Cnt + case(procTime>500) { True => 1; False => 0;};
                  
                  Int twoPct = 2*cnt/100;
                  slowQpct = list[100*max(0,slow200Cnt-twoPct)/cnt,
                  				100*max(0,slow500Cnt-twoPct)/cnt];
                }
   	}
   		
   	
      
      else { assert False; }
   	
      
      //return new value of the metric
      return slowQpct;
      
   }
   		
   
}
	

class DegradationMonitorImpl(Deploy deployer) implements DegradationMonitorIf {
   [Visualize] List< Pair<Time, List<Rat> > > metricHist = Nil;
   DegradationMetricIf metric;

   {
     metric = new local DegradationMetricImpl();
   }

   Unit monitor() {
     //corrective actions to improve metric
     {
          List<Rat> currMetrics = snd(head(metricHist));
          Rat slow200pct = head(currMetrics);
          Rat slow500pct = head(tail(currMetrics));
     
          if(slow200pct > 5 || slow500pct > 1) {
          	deployer.scaleUp();
          } else if(slow200pct < 3 && slow500pct < 3/10) {
          	deployer.scaleDown();
          }
     }
     
   }

   List< Pair<Time, List<Rat> > > metricHistory() {
     return metricHist;
   }

   Unit notify_query(Time t, Rat procTime) {
     List<Rat> measurement = metric.notify_query(t, procTime);
     metricHist = Cons(Pair(t, measurement), metricHist); // add measurement to history
   }
   
}
