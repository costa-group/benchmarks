
module DegradationView;
  export DegradationMonitorIf, DegradationMonitorImpl;
  import Monitor from GenericMonitor; 

//imports from grammar
import DeployerIF from FredhopperCloudServices;
//type declarations in grammar


//datatype with states of FSM 
data Degradation_States =
S;
	

interface DegradationMonitorIf extends Monitor {
   Unit notify_query(Time t, Rat procTime);
   
}

interface DegradationMetricIf {
   Pair<String, Rat> notify_query(Time t, Rat procTime);
   
}

class DegradationMetricImpl implements DegradationMetricIf {
   Pair<String, Rat> slowQpct = Pair("slow", 0);
   Int cnt = 0;
   Int slowCnt = 0  ;
   Degradation_States curState = S;

   Pair<String, Rat> notify_query(Time t, Rat procTime) {
   	if(curState == S) {
   		curState = S;
          { cnt=cnt+1;
                  slowCnt = slowCnt + case(procTime>200) { True => 1; False => 0;};
                  slowQpct = Pair("slow", slowCnt/cnt);
                }
   	}
   		
   	
      
      else { assert False; }
   	
      //return new value of the metric
      return slowQpct;
      
   }
   		
   
}
	

class DegradationMonitorImpl(DeployerIF deployer) implements DegradationMonitorIf {
   [Visualize] List< Pair<Time, List< Pair<String, Rat > > > > metricHist = Nil;
   DegradationMetricIf metric;

   {
     metric = new local DegradationMetricImpl();
   }

   Unit monitor() {
     //corrective actions to improve metric
     {
          Rat degradation = snd(head(snd(head(metricHist))));
          if(degradation > 5/1000) {
          	deployer.scaleUp();
          } else if(degradation < 1/1000) {
          	deployer.scaleDown();
     	 }
     }
     
   }

   List< Pair<Time, List< Pair<String, Rat > > > > metricHistory() {
     return metricHist;
   }

   Unit notify_query(Time t, Rat procTime) {
     Pair<String, Rat> measurement = metric.notify_query(t, procTime);
     metricHist = Cons(Pair(t, list[measurement]), metricHist); // add measurement to history
   }
   
}
