
/*
 * An extended PingPong example where Pong can handle multiple Pings
 *
 */
module PingPong;

data PingMsg = Fine
             | HelloPing 
             | ByePing 
             ;

data PongMsg = NoMsg 
         | Hello(Ping)
         | HowAreYou
         | ByePong
         ;

interface Ping {
    Unit ping(PingMsg m, Pong po);
    Unit initPing(Pong pong);
}

interface Pong {
    PongSession hello(Ping ping); 
    Unit sessionFinished(PongSession s);
}

interface PongSession {
    Unit pong(Ping p, [Near] Pong pong, PongMsg m);
    Unit initPongSession(Ping ping, [Near] Pong pong);
}

class PingImpl implements Ping {
    PongSession pongSession;
    Unit initPing(Pong pong){
      Fut<PongSession> fu = pong!hello(this);
      pongSession = fu.get; 
    }

    Unit ping(PingMsg msg, Pong pong){
      PongMsg reply = case msg {
         HelloPing => HowAreYou;
         Fine => ByePong; 
         ByePing => NoMsg;
      };
      
      if (reply != NoMsg) {
         Fut<Unit> fu = pongSession!pong(this, pong, reply);
      	 fu.get;
      }
     }
} 

class PongSessionImpl() implements PongSession {
    // init block
    Unit initPongSession(Ping ping, [Near] Pong pong){
       ping!ping(HelloPing, pong);
    }
    
    Unit pong(Ping ping,[Near] Pong pong, PongMsg msg){
       if (msg == HowAreYou) {
           ping!ping(Fine, pong);
       } else {
           Fut<Unit> f = ping!ping(ByePing, pong);
           f.get;
           pong.sessionFinished(this);
       }
    } 
}


class PongImpl implements Pong {
    List<[Near] PongSession> sessions = Nil;
    PongSession hello(Ping ping) {
       PongSession s = new local PongSessionImpl();
       s!initPongSession(ping, this);
       sessions = appendright(sessions,s);
       return s;
    }
    
    Unit sessionFinished(PongSession s) {
        sessions = without(sessions,s);
    }
}

{
    Pong pong = new PongImpl(); 
    Ping ping1 = new PingImpl();
    ping1!initPing(pong); 
    Ping ping2 = new PingImpl();
    ping2!initPing(pong);
}



