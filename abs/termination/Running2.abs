// Running example of the paper
// main2

module Running2;

interface TaskQueueInter{
  Unit addTask(Task tk);
  Unit addTasks(List<Task> list);
  Unit consumeAsync();
  Unit consumeSync();
}

class TaskQueue() implements TaskQueueInter {
  List<Task> pending = Nil;
  
Unit addTask(Task tk){
  pending = appendright(pending,tk);
}

Unit addTasks(List<Task> list){
  while (list != Nil) {
    Task tk = head(list);
    list = tail(list);     
    Fut<Unit> f = this!addTask(tk);
    await f?;
  }
}

Unit consumeAsync(){
  while (pending != Nil) {
    Task tk = head(pending);
    pending = tail(pending);            
    Fut<Unit> f = tk!start();
  }
}

Unit consumeSync(){
  while (pending != Nil) {
    Task tk = head(pending);
    pending = tail(pending);            
    Fut<Unit> f=tk!start();
    await f?;
  }
}

}  

interface Task{
  Unit start();
}

class TaskImpl implements Task{
  Unit start(){
  }
}


{
  //Init List<Task> l
  Task t1 = new local TaskImpl();
  Task t2 = new local TaskImpl();
  Task t3 = new local TaskImpl();  
  List<Task> l = Cons( t1, Cons( t2, Cons( t3, Nil)));
  
  TaskQueueInter q = new local TaskQueue();
  Fut<Unit> f = q!addTasks();
  await f?;
  q!consumeSync();
}
