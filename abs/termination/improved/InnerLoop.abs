module InnerLoop;

// Example with inner loops

interface TQ {
	Unit addTasks(Int n);
	Unit consume(Int a);
  Unit consume2();
	Unit addTask();
	Unit stuff();
}


class TaskQueue implements TQ{
	Int pending=0;

	Unit addTasks(Int n){
		while ( n > 0 ) {
		  n = n - 1;
			Fut<Unit> f = this ! addTask();
			await f?;
		}
	}
	
	Unit consume(Int a){
		while (pending > 0) {
			pending = pending - 1;
			Int i = a;
			while( i > 0 ){
				i = i - 1;
        Fut<Unit> f = this ! stuff();
        await f?;
			}
		}
	}
	
  // Inner loops that modify the field are not correctly handle by simply
  // appending the constraints in the I/O rel
  // Ex: with (ADD) the outer loop may not be terminating
  // In these cases I loose all the information about the fields
	Unit consume2(){
		while (pending > 0) {
			pending = pending - 1;
			Int i = 10;
			while( i > 0 ){
				i = i - 1;
				pending = pending + 1;
        Fut<Unit> f = this ! stuff();
        await f?;
			}
		}
	}
	
	Unit stuff(){}


  Unit addTask(){
		pending = pending + 1;
	}

}

interface M {
	Unit main(Int a);
	Unit main2(Int a);
}

class Main implements M {

  // Everything terminating
	Unit  main(Int a){
		TQ q = new local  TaskQueue();
		q ! addTasks(a);
		q ! consume(a);
	}
	
	// The outer while loop of consume2 (while_1) is not terminating
	Unit main2(){
		TQ q = new local  TaskQueue();
		q ! addTasks(a);
		q ! consume2();
	}
}
