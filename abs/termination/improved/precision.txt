costabs(['termination/improved/Running3.abs'],['Main.main'],[cost_model = steps, rely_guarantee = yes ]).

================================================================================
BookShop:
================================================================================

RELY-GUARANTEE
--------------
UB for AgentImp.init: 3
UB for DatabaseImp.init: 5
UB for SyncClient.init: 9
UB for SessionImp.init: 8
UB for AgentImp.getsession: 19
UB for DatabaseImp.getInfo: 38+2*nat(max(booksS)/2-1/2)+nat(max(booksDB)/4-1/4)+3*nat(max(booksDB)/2-1/2)+2*nat(max(booksDB)/4-1/4)
UB for DatabaseImp.confirmOrder: 34+nat(max(info)/2-1/2)+nat(max(booksDB)/7-1/7)* (19+nat(max(booksDB)/4-2))+nat(max(booksDB)/4-2)
UB for AgentImp.free: 14+nat(max(sessions)/2-1/2)
UB for SessionImp.order: 174+nat(max(sessions)/2-1/2)+2*nat(max(info)/4-1/4)+nat(max(info)/2-1/2)+nat(max(booksDB)/7-1/7)* (19+nat(max(booksDB)/4-2))+nat(max(booksDB)/4-2)+2*nat(max(info)/4-1/4)+4*nat(max(info)/7-1/7)+3*nat(max(info)/7-1/7)+2*nat(max(booksS)/2-1/2)+nat(max(booksDB)/4-1/4)+3*nat(max(booksDB)/2-1/2)+2*nat(max(booksDB)/4-1/4)
UB for SyncClient.run2: 253+nat(max(sessions)/2-1/2)+2*nat(max(info)/4-1/4)+nat(max(info)/2-1/2)+nat(max(booksDB)/7-1/7)* (19+nat(max(booksDB)/4-2))+nat(max(booksDB)/4-2)+2*nat(max(info)/4-1/4)+4*nat(max(info)/7-1/7)+3*nat(max(info)/7-1/7)+2*nat(max(booksS)/2-1/2)+nat(max(booksDB)/4-1/4)+3*nat(max(booksDB)/2-1/2)+2*nat(max(booksDB)/4-1/4)+5*nat(max(booksS)/2-1/2)+nat(max(booksS)/2+max(countriesS)/2-2)+nat(max(booksS)/2+max(countriesS)/2-2)
UB for Main.main: 293+3*nat(nclients)+nat(max(sessions)/2-1/2)+2*nat(max(info)/4-1/4)+nat(max(info)/2-1/2)+nat(max(booksDB)/7-1/7)* (19+nat(max(booksDB)/4-2))+nat(max(booksDB)/4-2)+2*nat(max(info)/4-1/4)+4*nat(max(info)/7-1/7)+3*nat(max(info)/7-1/7)+2*nat(max(booksS)/2-1/2)+nat(max(booksDB)/4-1/4)+3*nat(max(booksDB)/2-1/2)+2*nat(max(booksDB)/4-1/4)+5*nat(max(booksS)/2-1/2)+nat(max(booksS)/2+max(countriesS)/2-2)+nat(max(booksS)/2+max(countriesS)/2-2)+2*nat(cDB/4-1/4)


ORIGINAL COST
-------------
['AgentImp.init', 'DatabaseImp.init', 'SyncClient.init', 'SessionImp.init', 'AgentImp.getsession', 'DatabaseImp.getInfo', 'DatabaseImp.confirmOrder', 'AgentImp.free', 'SessionImp.order', 'SyncClient.run2', 'Main.main']


+ UB for 'AgentImp.init'(this,db) = 3
+ UB for 'DatabaseImp.init'(this,bDB,cDB) = 5
+ UB for 'SyncClient.init'(this,agent,books,countries) = 9
+ UB for 'SessionImp.init'(this,agent,db) = 8
+ UB for 'AgentImp.getsession'(this) = 20
- UB for 'DatabaseImp.getInfo'(this,books,country) = 11+nat(books/2-1/2)* (21+5*c(maximize_failed)+5*c(maximize_failed)+4*c(maximize_failed))
- UB for 'DatabaseImp.confirmOrder'(this,books) = 7+nat(books/2-1/2)* (18+c(maximize_failed)* (13+9*c(maximize_failed))+9*c(maximize_failed))
- UB for 'AgentImp.free'(this,session) = 10+5*c(maximize_failed)
- UB for 'SessionImp.order'(this,books,country) = 35+nat(books/2-1/2)* (21+5*c(maximize_failed)+5*c(maximize_failed)+4*c(maximize_failed))+5*c(maximize_failed)
- UB for 'SyncClient.run2'(this,choosen) = 142+5*c(maximize_failed)+5*c(maximize_failed)+c(maximize_failed)* (21+5*c(maximize_failed)+5*c(maximize_failed)+4*c(maximize_failed))+5*c(maximize_failed)
- UB for 'Main.main'(this,bDB,cDB,nclients,lb,chosen) = 20+nat(nclients)* (165+5*nat(cDB/4-1/4)+5*c(maximize_failed)+5*c(maximize_failed)+c(maximize_failed)* (21+5*c(maximize_failed)+5*c(maximize_failed)+4*c(maximize_failed))+5*c(maximize_failed))


ORIGINAL COST WITH ANNOTATIONS [field <= max(field)]
------------------------------
+ UB for AgentImp.init = 3
+ UB for DatabaseImp.init = 5
+ UB for SyncClient.init = 9
+ UB for SessionImp.init = 8
+ UB for AgentImp.getsession = 20
+ UB for DatabaseImp.getInfo = 11+nat(books/2-1/2)* (24+5*nat(max(booksDB)/4-1/4)+7*nat(max(booksDB)/2-1/2)+4*nat(max(booksDB)/4-1/4))
+ UB for DatabaseImp.confirmOrder = 7+nat(books/2-1/2)* (18+nat(max(booksDB)/7-1/7)* (13+9*nat(max(booksDB)/4-2))+9*nat(max(booksDB)/4-2))
+ UB for AgentImp.free = 10+5*nat(max(sessions)/2-1/2)
+ UB for SessionImp.order = 35+nat(books/2-1/2)* (24+5*nat(max(booksDB)/4-1/4)+7*nat(max(booksDB)/2-1/2)+4*nat(max(booksDB)/4-1/4))+5*nat(max(sessions)/2-1/2)
- UB for SyncClient.run2 = 142+5*c(maximize_failed)+5*c(maximize_failed)+c(maximize_failed)* (24+5*nat(max(booksDB)/4-1/4)+7*nat(max(booksDB)/2-1/2)+4*nat(max(booksDB)/4-1/4))+5*nat(max(sessions)/2-1/2)
- UB for Main.main = 20+nat(nclients)* (165+5*nat(cDB/4-1/4)+5*c(maximize_failed)+5*c(maximize_failed)+c(maximize_failed)* (24+5*nat(max(booksDB)/4-1/4)+7*nat(max(booksDB)/2-1/2)+4*nat(max(booksDB)/4-1/4))+5*nat(max(sessions)/2-1/2))



Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentImp.init
	RG: 3
	OC: 3
	
DatabaseImp.init
	RG: 5
	OC: 5
	
SyncClient.init
	RG: 9
	OC: 9
	
SessionImp.init
	RG: 8
	OC: 8
	
AgentImp.getsession
	RG: 19
	OC: 20

DatabaseImp.getInfo
RG: field(booksS), field(booksDB)
  38+2*nat(max(booksS)/2-1/2)+nat(max(booksDB)/4-1/4)+3*nat(max(booksDB)/2-1/2)+2*nat(max(booksDB)/4-1/4)
OC: param(books), field(booksDB)
  11+nat(books/2-1/2)* (24+5*nat(max(booksDB)/4-1/4)+7*nat(max(booksDB)/2-1/2)+4*nat(max(booksDB)/4-1/4))

DatabaseImp.confirmOrder
RG: field(info), field(booksDB)
  34+nat(max(info)/2-1/2)+nat(max(booksDB)/7-1/7)* (19+nat(max(booksDB)/4-2))+nat(max(booksDB)/4-2)
OC: param(books), field(booksDB)
  7+nat(books/2-1/2)* (18+nat(max(booksDB)/7-1/7)* (13+9*nat(max(booksDB)/4-2))+9*nat(max(booksDB)/4-2))
  
AgentImp.free <-- IT'S POSSIBLE
RG: field(sessions)
  14+nat(max(sessions)/2-1/2)
OC: field(sessions)
  10+5*nat(max(sessions)/2-1/2)
  
SessionImp.order
RG: field(sessions), field(info), field(booksDB), field(booksS) 
  174+nat(max(sessions)/2-1/2)+2*nat(max(info)/4-1/4)+nat(max(info)/2-1/2)+nat(max(booksDB)/7-1/7)* (19+nat(max(booksDB)/4-2))+nat(max(booksDB)/4-2)+2*nat(max(info)/4-1/4)+4*nat(max(info)/7-1/7)+3*nat(max(info)/7-1/7)+2*nat(max(booksS)/2-1/2)+nat(max(booksDB)/4-1/4)+3*nat(max(booksDB)/2-1/2)+2*nat(max(booksDB)/4-1/4)
OC: param(books), field(booksDB), field(sessions)
  35+nat(books/2-1/2)* (24+5*nat(max(booksDB)/4-1/4)+7*nat(max(booksDB)/2-1/2)+4*nat(max(booksDB)/4-1/4))+5*nat(max(sessions)/2-1/2)
  



================================================================================
BoundedBuffer
================================================================================

RELY-GUARANTEE
--------------
UB for BoundedBuffer.init: 4
UB for ProducerImpl.init: 2
UB for BoundedBuffer.append: 18+nat(max(buffer)/2-3/2)
UB for ProducerImpl.loop: 29+3*nat(nreq)+nat(max(buffer)/2-3/2)
UB for ConsumerImpl.init: 2
UB for BoundedBuffer.remove: 17
UB for ConsumerImpl.loop: 28+3*nat(mreq)
UB for Main.main: 89+3*nat(mcons)+3*nat(mreq)+3*nat(nprod)+3*nat(nreq)+nat(max(buffer)/2-3/2)


ORIGINAL COST
-------------
['BoundedBuffer.init','ProducerImpl.init','BoundedBuffer.append','ProducerImpl.loop','ConsumerImpl.init','BoundedBuffer.remove','ConsumerImpl.loop','Main.main']

+ UB for 'BoundedBuffer.init'(this,size) = 4
+ UB for 'ProducerImpl.init'(this,b) = 2
- UB for 'BoundedBuffer.append'(this,d) = 14+5*c(maximize_failed)
- UB for 'ProducerImpl.loop'(this,d) = 6+nat(d)* (22+5*c(maximize_failed))
+ UB for 'ConsumerImpl.init'(this,b) = 2
+ UB for 'BoundedBuffer.remove'(this) = 17
+ UB for 'ConsumerImpl.loop'(this,d) = 6+25*nat(d)
- UB for 'Main.main'(this,nprod,mcons,size,nreq,mreq) = 17+nat(nprod)* (18+nat(nreq)* (22+5*c(maximize_failed)))+nat(mcons)* (18+25*nat(mreq))


ORIGINAL COST WITH ANNOTATIONS
------------------------------
+ UB for 'BoundedBuffer.init'(this,size) = 4
+ UB for 'ProducerImpl.init'(this,b) = 2
+ UB for 'BoundedBuffer.append'(this,d,max(buffer)) = 14+5*nat(max(buffer)/2-1/2)
+ UB for 'ProducerImpl.loop'(this,d,max(buffer)) = 6+nat(d)* (22+5*nat(max(buffer)/2-1/2))
+ UB for 'ConsumerImpl.init'(this,b) = 2
+ UB for 'BoundedBuffer.remove'(this) = 17
+ UB for 'ConsumerImpl.loop'(this,d) = 6+25*nat(d)
+ UB for 'Main.main'(this,nprod,mcons,size,nreq,mreq,max(buffer)) = 17+nat(nprod)* (18+nat(nreq)* (22+5*nat(max(buffer)/2-1/2)))+nat(mcons)* (18+25*nat(mreq))


Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BoundedBuffer.init
RG: 
  4
OC:
  4
  
ProducerImpl.init
RG: 
  2
OC:
  2 
  
BoundedBuffer.append
RG: field(buffer) <-- IT'S POSSIBLE
  18+nat(max(buffer)/2-3/2)
OC: field(buffer)
  14+5*nat(max(buffer)/2-1/2)
    
ProducerImpl.loop
RG: param(nreq), field(buffer)
  29+3*nat(nreq)+nat(max(buffer)/2-3/2)
OC: param(d), field(buffer)
  6+nat(d)* (22+5*nat(max(buffer)/2-1/2))
  
ConsumerImpl.init
RG:
  2
OC:
  2
  
BoundedBuffer.remove
RG:
  17
OC: 
  17
  
ConsumerImpl.loop
RG: param(mreq)
  28+3*nat(mreq)
OC: param(d)
  6+25*nat(d)
    
Main.main <-- IT'S POSSIBLE
RG: param(mcons), param(mreq), param(nprod), field(buffer)
  89+3*nat(mcons)+3*nat(mreq)+3*nat(nprod)+3*nat(nreq)+nat(max(buffer)/2-3/2)
OC: param(nprod), param(nreq), field(buffer), param(mcons)
  17+nat(nprod)* (18+nat(nreq)* (22+5*nat(max(buffer)/2-1/2)))+nat(mcons)* (18+25*nat(mreq))



================================================================================
Chat
================================================================================

costabs(['termination/improved/Chat.abs'],['Main.main'],[cost_model = steps, rely_guarantee = yes ]).
RELY-GUARANTEE
--------------
UB for ServerImpl.init: 3
UB for ServerImpl.start: 3
UB for WindowImpl.init: 1
UB for ClientGUIImpl.init: 7
UB for ButtonImpl.registerListener: 14+nat(max(listener)/2-1)
UB for SendButtonListener.init: 2
UB for ButtonImpl.init: 4
UB for WindowImpl.newButton: 7
UB for TextFieldImpl.init: 2
UB for WindowImpl.newTextField: 5
UB for ClientGUIImpl.init2: 44+nat(max(listener)/2-1)
UB for ClientImpl.getGUI: 63+nat(max(listener)/2-1)
UB for ClientImpl.init: 2
UB for ClientImpl.setServer: 3
UB for SessionImpl.init: 3
UB for ServerImpl.sessionClosed: 12+2*nat(max(sessions)/2-1/2)
UB for SessionImpl.close: 16+2*nat(max(sessions)/2-1/2)
UB for SessionImpl.receive: 2
UB for ClientImpl.receive: 32+2*nat(max(sessions)/2-1/2)
UB for SessionImpl.init2: 37+2*nat(max(sessions)/2-1/2)
UB for ServerImpl.connect: 47+2*nat(max(sessions)/2-1/2)
UB for ClientImpl.start: 55+2*nat(max(sessions)/2-1/2)
UB for UserImpl.init: 1
UB for ClientGUIImpl.getClientIntern: 2
UB for TextFieldImpl.getText: 2
UB for ClientGUIImpl.getTextFieldText: 6
UB for ClientImpl.sendText: 9
UB for SendButtonListener.pressed: 24
UB for ButtonImpl.press: 43+4*nat(max(listener)/2-1/2)* (1+nat(nclients))
UB for ClientGUIImpl.getSendButton: 3
UB for ClientGUIImpl.getTextField: 3
UB for TextFieldImpl.setText: 3
UB for UserImpl.use: 68+4*nat(max(listener)/2-1/2)* (1+nat(nclients))
UB for Main.main: 219+3*nat(nclients)+4*nat(max(listener)/2-1/2)* (1+nat(nclients))+nat(max(listener)/2-1)+2*nat(max(sessions)/2-1/2)



['ServerImpl.init', 'ServerImpl.start', 'WindowImpl.init', 'ClientGUIImpl.init', 'ButtonImpl.registerListener', 'SendButtonListener.init', 'ButtonImpl.init', 'WindowImpl.newButton', 'TextFieldImpl.init', 'WindowImpl.newTextField', 'ClientGUIImpl.init2', 'ClientImpl.getGUI', 'ClientImpl.init', 'ClientImpl.setServer', 'SessionImpl.init', 'ServerImpl.sessionClosed', 'SessionImpl.close', 'SessionImpl.receive', 'ClientImpl.receive', 'SessionImpl.init2', 'ServerImpl.connect', 'ClientImpl.start', 'UserImpl.init', 'ClientGUIImpl.getClientIntern', 'TextFieldImpl.getText', 'ClientGUIImpl.getTextFieldText', 'ClientImpl.sendText', 'SendButtonListener.pressed', 'ButtonImpl.press', 'ClientGUIImpl.getSendButton', 'ClientGUIImpl.getTextField', 'TextFieldImpl.setText', 'UserImpl.use', 'Main.main']
ORIGINAL COST
-------------
+ UB for 'ServerImpl.init'(this) = 3
+ UB for 'ServerImpl.start'(this) = 3
+ UB for 'WindowImpl.init'(this) = 1
+ UB for 'ClientGUIImpl.init'(this,client) = 8
- UB for 'ButtonImpl.registerListener'(this,l) = 10+5*c(maximize_failed)
+ UB for 'SendButtonListener.init'(this,client) = 2
+ UB for 'ButtonImpl.init'(this,gui,label) = 4
+ UB for 'WindowImpl.newButton'(this,label) = 8
+ UB for 'TextFieldImpl.init'(this) = 2
+ UB for 'WindowImpl.newTextField'(this) = 6
- UB for 'ClientGUIImpl.init2'(this) = 43+5*c(maximize_failed)
+ UB for 'ClientImpl.getGUI'(this) = 7
+ UB for 'ClientImpl.init'(this) = 2
+ UB for 'ClientImpl.setServer'(this,s) = 3
+ UB for 'SessionImpl.init'(this,server,c) = 3
- UB for 'ServerImpl.sessionClosed'(this,i) = 8+6*c(maximize_failed)
- UB for 'SessionImpl.close'(this) = 12+6*c(maximize_failed)
+ UB for 'SessionImpl.receive'(this,m) = 2
- UB for 'ClientImpl.receive'(this,msg) = 28+6*c(maximize_failed)
- UB for 'SessionImpl.init2'(this) = 33+6*c(maximize_failed)
- UB for 'ServerImpl.connect'(this,c) = 44+6*c(maximize_failed)
- UB for 'ClientImpl.start'(this) = 52+6*c(maximize_failed)
+ UB for 'UserImpl.init'(this) = 1
+ UB for 'ClientGUIImpl.getClientIntern'(this) = 2
+ UB for 'TextFieldImpl.getText'(this) = 2
+ UB for 'ClientGUIImpl.getTextFieldText'(this) = 6
+ UB for 'ClientImpl.sendText'(this,text) = 9
+ UB for 'SendButtonListener.pressed'(this) = 24
- UB for 'ButtonImpl.press'(this) = 3+c(failed(no_rf,[scc=11,cr=entrywhile_0/2]))
+ UB for 'ClientGUIImpl.getSendButton'(this) = 3
+ UB for 'ClientGUIImpl.getTextField'(this) = 3
+ UB for 'TextFieldImpl.setText'(this,s) = 3
- UB for 'UserImpl.use'(this,client) = 28+c(failed(no_rf,[scc=11,cr=entrywhile_0/2]))
- UB for 'Main.main'(this,nclients,nUsers) = 16+nat(nclients)* (110+6*c(maximize_failed)+c(failed(no_rf,[scc=11,cr=entrywhile_0/2])))


ORIGINAL COST WITH ANNOTATIONS
------------------------------
+ UB for ServerImpl.init = 3
+ UB for ServerImpl.start = 3
+ UB for WindowImpl.init = 1
+ UB for ClientGUIImpl.init = 8
+ UB for ButtonImpl.registerListener = 10+5*nat(max(listener)/2-1/2)
+ UB for SendButtonListener.init = 2
+ UB for ButtonImpl.init = 4
+ UB for WindowImpl.newButton = 8
+ UB for TextFieldImpl.init = 2
+ UB for WindowImpl.newTextField = 6
+ UB for ClientGUIImpl.init2 = 43+5*nat(max(listener)/2-1/2)
+ UB for ClientImpl.getGUI = 7
+ UB for ClientImpl.init = 2
+ UB for ClientImpl.setServer = 3
+ UB for SessionImpl.init = 3
+ UB for ServerImpl.sessionClosed = 8+6*nat(max(sessions)/2-1/2)
+ UB for SessionImpl.close = 12+6*nat(max(sessions)/2-1/2)
+ UB for SessionImpl.receive = 2
+ UB for ClientImpl.receive = 28+6*nat(max(sessions)/2-1/2)
+ UB for SessionImpl.init2 = 33+6*nat(max(sessions)/2-1/2)
+ UB for ServerImpl.connect = 44+6*nat(max(sessions)/2-1/2)
+ UB for ClientImpl.start = 52+6*nat(max(sessions)/2-1/2)
+ UB for UserImpl.init = 1
+ UB for ClientGUIImpl.getClientIntern = 2
+ UB for TextFieldImpl.getText = 2
+ UB for ClientGUIImpl.getTextFieldText = 6
+ UB for ClientImpl.sendText = 9
+ UB for SendButtonListener.pressed = 24
- UB for ButtonImpl.press = 3+c(failed(no_rf,[scc=11,cr=entrywhile_0/4]))
+ UB for ClientGUIImpl.getSendButton = 3
+ UB for ClientGUIImpl.getTextField = 3
+ UB for TextFieldImpl.setText = 3
- UB for UserImpl.use = 28+c(failed(no_rf,[scc=11,cr=entrywhile_0/4]))
- UB for Main.main = 16+nat(nclients)* (110+6*nat(max(sessions)/2-1/2)+c(failed(no_rf,[scc=11,cr=entrywhile_0/4])))


Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ServerImpl.init
	RG: 3
	OC: 3
    
ServerImpl.start
	RG: 3
	OC: 1
	
WindowImpl.init
	RG: 1
	OC: 1
	
ClientGUIImpl.init
	RG: 7
	OC: 8
	
ButtonImpl.registerListener <-- It's possible!!
  RG: 14+nat(max(listener)/2-1)
	OC: 10+5*nat(max(listener)/2-1/2)
	
SendButtonListener.init
 	RG: 2
 	OC: 2

ButtonImpl.init
	RG: 4
	OC: 4

WindowImpl.newButton
	RG: 7
	OC: 8
	
TextFieldImpl.init
	RG: 2
	OC: 2
	
WindowImpl.newTextField
	RG: 5
	OC: 6
	
ClientGUIImpl.init2 <-- It's possible
  RG: 44+nat(max(listener)/2-1)
  OC: 43+5*nat(max(listener)/2-1/2)
	
ClientImpl.getGUI: ¿¿¿???
	RG: 63+nat(max(listener)/2-1)
	OC: 7
	
ClientImpl.init
	RG: 2
	OC: 2
	
ClientImpl.setServer
	RG: 3
	OC: 3

SessionImpl.init
	RG: 3
	OC: 3
	
ServerImpl.sessionClosed <-- It's possible
	RG: 12+2*nat(max(sessions)/2-1/2)
	OC: 8+6*nat(max(sessions)/2-1/2)

SessionImpl.close <-- It's possible
	RG: 16+2*nat(max(sessions)/2-1/2)
	OC: 12+6*nat(max(sessions)/2-1/2)
	
SessionImpl.receive
	RG: 2
	OC: 2

ClientImpl.receive <-- It's possible
	RG: 32+2*nat(max(sessions)/2-1/2)
	OC: 28+6*nat(max(sessions)/2-1/2)
	
SessionImpl.init2 <-- It's possible
	RG: 37+2*nat(max(sessions)/2-1/2)
	OC: 33+6*nat(max(sessions)/2-1/2)
	
ServerImpl.connect <-- It's possible
	RG: 47+2*nat(max(sessions)/2-1/2)
	OC: 44+6*nat(max(sessions)/2-1/2)
	
ClientImpl.start <-- It's possible
	RG: 55+2*nat(max(sessions)/2-1/2)
	OC: 52+6*nat(max(sessions)/2-1/2)

UserImpl.init
	RG: 1
	OC: 1
	
ClientGUIImpl.getClientIntern
	RG: 2
	OC: 2
	
TextFieldImpl.getText
	RG: 2
	OC: 2
	
ClientGUIImpl.getTextFieldText
	RG: 6
	OC: 6
	
ClientImpl.sendText
	RG: 9
	OC: 9
	
SendButtonListener.pressed
	RG: 24
	OC: 24
	
ClientGUIImpl.getSendButton
	RG: 3
	OC: 3
	
ClientGUIImpl.getTextField
	RG: 3
	OC: 3
	
TextFieldImpl.setText
	RG: 3
	OC: 3




================================================================================
DistHT
================================================================================

RELY-GUARANTEE
--------------
UB for Test.init: 1
UB for DistHT.lookupNode: 16+4*nat(max(nodes)/2-3/2)
UB for Node.getData: 8+nat(max(map)/4-1/4)
UB for DistHT.getAllData: 87+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)
UB for DistHT.init: 3
UB for Node.putData: 13+4*nat(max(map)/4-1/4)
UB for DistHT.putData: 33+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)
UB for Node.init: 2
UB for Test.m: 351+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)
UB for Main.main: 712+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)




ORIGINAL COST
-------------
['Test.init', 'DistHT.lookupNode', 'Node.getData', 'DistHT.getAllData', 'DistHT.init', 'Node.putData', 'DistHT.putData', 'Node.init', 'Test.m', 'Main.main']


+ UB for 'Test.init'(this) = 1
- UB for 'DistHT.lookupNode'(this,key) = 11+9*c(maximize_failed)
- UB for 'Node.getData'(this,key) = 5+4*c(maximize_failed)
- UB for 'DistHT.getAllData'(this,keys) = 6+nat(keys/2-1/2)* (37+9*c(maximize_failed)+4*c(maximize_failed))
+ UB for 'DistHT.init'(this,nodes,nNodes) = 3
- UB for 'Node.putData'(this,key,d) = 10+7*c(maximize_failed)
- UB for 'DistHT.putData'(this,key,d) = 25+9*c(maximize_failed)+7*c(maximize_failed)
+ UB for 'Node.init'(this,map) = 2
- UB for 'Test.m'(this) = 160+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+3/2- (37+9*c(maximize_failed)+4*c(maximize_failed))+7* (37+9*c(maximize_failed)+4*c(maximize_failed))
- UB for 'Main.main'(this) = 332+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+3/2* (37+9*c(maximize_failed)+4*c(maximize_failed))+7* (37+9*c(maximize_failed)+4*c(maximize_failed))+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+9*c(maximize_failed)+7*c(maximize_failed)+3/2* (37+9*c(maximize_failed)+4*c(maximize_failed))+7* (37+9*c(maximize_failed)+4*c(maximize_failed))


ORIGINAL COST WITH ANNOTATIONS
------------------------------
+ UB for Test.init = 1
+ UB for DistHT.lookupNode = 11+9*nat(max(nNodes)-1)
+ UB for Node.getData = 5+4*nat(max(map)/4-1/4)
+ UB for DistHT.getAllData = 6+nat(keys/2-1/2)* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))
+ UB for DistHT.init = 3
+ UB for Node.putData = 10+7*nat(max(map)/4-1/4)
+ UB for DistHT.putData = 25+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)
+ UB for Node.init = 2
+ UB for Test.m = 160+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+3/2* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+7* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))
+ UB for Main.main = 332+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+3/2* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+7* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+3/2* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+7* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))


Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UB for Test.init
	RG: 1
	OC: 1
	
DistHT.lookupNode
	RG: 16+4*nat(max(nodes)/2-3/2)
	OC: 11+9*nat(max(nNodes)-1)
	
Node.getData <-- It's possible
	RG: 8+nat(max(map)/4-1/4)
	OC: 5+4*nat(max(map)/4-1/4)
	
DistHT.getAllData
	RG: 87+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)
	OC: 6+nat(keys/2-1/2)* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))
	
DistHT.init
	RG: 3
	OC: 3
	
Node.putData <-- It's possible
	RG: 13+4*nat(max(map)/4-1/4)
	OC: 10+7*nat(max(map)/4-1/4)
	
DistHT.putData
	RG: 33+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)
	OC: 25+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)
	
UB for Node.init
	RG: 2
	OC: 2

Test.m: 
	RG: field(map), field(nodes)
		351+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)
	OC: 
		160+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+3/2* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+7* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))
	
Main.main: 
	RG:
		712+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)+4*nat(max(map)/4-1/4)+4*nat(max(nodes)/2-3/2)
	OC: 
	  332+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+3/2* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+7* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+9*nat(max(nNodes)-1)+7*nat(max(map)/4-1/4)+3/2* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))+7* (37+9*nat(max(nNodes)-1)+4*nat(max(map)/4-1/4))


================================================================================
MailServer
================================================================================

RELY-GUARANTEE
--------------
UB for AddressBookImp.init: 2
UB for MailServerImp.init: 3
UB for AddressBookImp.addUser: 12+4*nat(max(users)/2-1/2)
UB for MailServerImp.addUser: 18+4*nat(max(users)/2-1/2)
UB for UserImp.init: 2
UB for AddressBookImp.getUserAddress: 8+nat(max(users)/4-1/4)
UB for UserImp.receive: 4
UB for MailServerImp.notify: 34+3*nat(max(listUsers)/2-1/2)+nat(max(users)/4-1/4)
UB for Main.main: 90+3*nat(mssg/2-1/2)+3*nat(max(listUsers)/2-1/2)+nat(max(users)/4-1/4)+3*nat(nUsers)+4*nat(max(users)/2-1/2)


ORIGINAL COST
-------------
['AddressBookImp.init', 'MailServerImp.init', 'AddressBookImp.addUser', 'MailServerImp.addUser', 'UserImp.init', 'AddressBookImp.getUserAddress', 'UserImp.receive', 'MailServerImp.notify', 'Main.main']


+ UB for 'AddressBookImp.init'(this) = 2
+ UB for 'MailServerImp.init'(this,ab) = 3
- UB for 'AddressBookImp.addUser'(this,uname,u) = 10+6*c(maximize_failed)
- UB for 'MailServerImp.addUser'(this,uname,u) = 16+6*c(maximize_failed)
+ UB for 'UserImp.init'(this) = 2
- UB for 'AddressBookImp.getUserAddress'(this,u) = 5+4*c(maximize_failed)
+ UB for 'UserImp.receive'(this,msg) = 4
- UB for 'MailServerImp.notify'(this,m) = 9+c(maximize_failed)* (25+4*c(maximize_failed))
- UB for 'Main.main'(this,nUsers,mssg) = 22+nat(nUsers)* (29+6*c(maximize_failed))+nat(mssg/2-1/2)* (21+c(maximize_failed)* (25+4*c(maximize_failed)))


ORIGINAL COST WITH ANNOTATIONS (included [old(listUsersAux) == listUsersAux])
------------------------------
+ UB for AddressBookImp.init = 2
+ UB for MailServerImp.init = 3
+ UB for AddressBookImp.addUser = 10+6*nat(max(users)/2-1/2)
+ UB for MailServerImp.addUser = 16+6*nat(max(users)/2-1/2)
+ UB for UserImp.init = 2
+ UB for AddressBookImp.getUserAddress = 5+4*nat(max(users)/4-1/4)
+ UB for UserImp.receive = 4
+ UB for MailServerImp.notify = 9+nat(max(listUsers)/2-1/2)* (25+4*nat(max(users)/4-1/4))
+ UB for Main.main = 22+nat(nUsers)* (29+6*nat(max(users)/2-1/2))+nat(mssg/2-1/2)* (21+nat(max(listUsers)/2-1/2)* (25+4*nat(max(users)/4-1/4)))



Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AddressBookImp.init
	RG: 2
	OC: 2
	
MailServerImp.init
	RG: 3
	OC: 3
	
AddressBookImp.addUser <-- It's possible
	RG: 12+4*nat(max(users)/2-1/2)
	OC: 10+6*nat(max(users)/2-1/2)
	
MailServerImp.addUser <-- It's possible
	RG: 18+4*nat(max(users)/2-1/2)
	OC: 16+6*nat(max(users)/2-1/2)
	
UserImp.init
	RG: 2
	OC: 2
	
AddressBookImp.getUserAddress <- It's possible
	RG: 8+nat(max(users)/4-1/4) 
	OC: 5+4*nat(max(users)/4-1/4)
	
UserImp.receive
	RG: 4
	OC: 4

MailServerImp.notify <-- It's possible
	RG: 34+3*nat(max(listUsers)/2-1/2)+nat(max(users)/4-1/4)
	OC: 9+nat(max(listUsers)/2-1/2)* (25+4*nat(max(users)/4-1/4))
	
Main.main <- It's possible
	RG: 90+3*nat(mssg/2-1/2)+3*nat(max(listUsers)/2-1/2)+nat(max(users)/4-1/4)+3*nat(nUsers)+4*nat(max(users)/2-1/2)	
	OC: 22+nat(nUsers)* (29+6*nat(max(users)/2-1/2))+nat(mssg/2-1/2)* (21+nat(max(listUsers)/2-1/2)* (25+4*nat(max(users)/4-1/4)))

================================================================================
PeerToPeer
================================================================================

RELY-GUARANTEE (con absc_version = 2013!)
--------------

UB for DataBaseImpl.init: 2
UB for Node.init: 7
UB for Node.setAdmin: 3
UB for OurTopology.init: 5
UB for DataBaseImpl.listFiles: 9+2*nat(max(dbT)/4-1/4)
UB for Node.enquire: 14+2*nat(max(dbT)/4-1/4)
UB for Node.availFiles: 47+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)
UB for OurTopology.getNeighbors: 42
UB for DataBaseImpl.storeFile: 5
UB for DataBaseImpl.getLength: 16+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
UB for Node.getLength: 21+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
UB for DataBaseImpl.getFile: 8+nat(max(dbT)/4-1/4)
UB for Node.getPack: 25+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)
UB for Node.reqFile: 75+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
UB for Node.run2: 211+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)
UB for Main.main: 1055+2*nat(nruns)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)


RELY-GUARANTEE (sin la opción absc_version)
--------------
+ UB for DataBaseImpl.init: 2
+ UB for Node.init: 7
+ UB for Node.setAdmin: 3
+ UB for OurTopology.init: 5
- UB for DataBaseImpl.listFiles: 18+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)
- UB for Node.enquire: 23+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)
- UB for Node.availFiles: 56+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)
+ UB for OurTopology.getNeighbors: 42
+ UB for DataBaseImpl.storeFile: 5
+ UB for DataBaseImpl.getLength: 16+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
+ UB for Node.getLength: 21+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
+ UB for DataBaseImpl.getFile: 8+nat(max(dbT)/4-1/4)
+ UB for Node.getPack: 25+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)
+ UB for Node.reqFile: 75+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
- UB for Node.run2: 212+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+nat(max(myNeighbors)/4-1/4)* (13+6*nat(max(catalog)/2-5/2))+6*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)
- UB for Main.main: 1059+2*nat(nruns)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+nat(max(myNeighbors)/4-1/4)* (13+6*nat(max(catalog)/2-5/2))+6*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+nat(max(myNeighbors)/4-1/4)* (13+6*nat(max(catalog)/2-5/2))+6*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+nat(max(myNeighbors)/4-1/4)* (13+6*nat(max(catalog)/2-5/2))+6*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+nat(max(myNeighbors)/4-1/4)* (13+6*nat(max(catalog)/2-5/2))+6*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+6*nat(max_failure)

ORIGINAL COST
-------------
['DataBaseImpl.init', 'Node.init', 'Node.setAdmin', 'OurTopology.init', 'DataBaseImpl.listFiles', 'Node.enquire', 'Node.availFiles', 'OurTopology.getNeighbors', 'DataBaseImpl.storeFile', 'DataBaseImpl.getLength', 'Node.getLength', 'DataBaseImpl.getFile', 'Node.getPack', 'Node.reqFile', 'Node.run2', 'Main.main']

+ UB for 'DataBaseImpl.init'(this,dbT) = 2
+ UB for 'Node.init'(this,db,file) = 7
+ UB for 'Node.setAdmin'(this,admin) = 3
+ UB for 'OurTopology.init'(this,node0,node1,node2,node3) = 5
- UB for 'DataBaseImpl.listFiles'(this) = 6+c(maximize_failed)* (12+8*c(maximize_failed))
- UB for 'Node.enquire'(this) = 11+c(maximize_failed)* (12+8*c(maximize_failed))
- UB for 'Node.availFiles'(this,sList) = 8+nat(sList/2-1/2)* (40+c(maximize_failed)* (12+8*c(maximize_failed))+5*c(maximize_failed))
+ UB for 'OurTopology.getNeighbors'(this,caller) = 42
+ UB for 'DataBaseImpl.storeFile'(this,fId,file) = 5
- UB for 'DataBaseImpl.getLength'(this,fId) = 9+4*c(maximize_failed)+6*c(maximize_failed)
- UB for 'Node.getLength'(this,fId) = 14+4*c(maximize_failed)+6*c(maximize_failed)
- UB for 'DataBaseImpl.getFile'(this,fId) = 5+4*c(maximize_failed)
- UB for 'Node.getPack'(this,fId,pNbr) = 17+4*c(maximize_failed)+9*nat(pNbr)
- UB for 'Node.reqFile'(this,sId,fId) = 34+4*c(maximize_failed)+6*c(maximize_failed)+c(maximize_failed)* (29+4*c(maximize_failed)+9*c(maximize_failed))
- UB for 'Node.run2'(this) = 119+c(maximize_failed)* (40+c(maximize_failed)* (12+8*c(maximize_failed))+5*c(maximize_failed))+c(maximize_failed)* (15+7*c(maximize_failed))+7*c(maximize_failed)+4*c(maximize_failed)+6*c(maximize_failed)+c(maximize_failed)* (29+4*c(maximize_failed)+9*c(maximize_failed))
+ UB for 'Main.main'(this,nruns) = 0


ORIGINAL COST WITH ANNOTATIONS
------------------------------
+ UB for DataBaseImpl.init = 2
+ UB for Node.init = 7
+ UB for Node.setAdmin = 3
+ UB for OurTopology.init = 5
- UB for DataBaseImpl.listFiles = 6+nat(max(dbT)/4-1/4)* (12+8*c(maximize_failed))
- UB for Node.enquire = 11+nat(max(dbT)/4-1/4)* (12+8*c(maximize_failed))
- UB for Node.availFiles = 8+nat(sList/2-1/2)* (40+nat(max(dbT)/4-1/4)* (12+8*c(maximize_failed))+5*nat(max(myNeighbors)/2-1/2))
+ UB for OurTopology.getNeighbors = 42
+ UB for DataBaseImpl.storeFile = 5
+ UB for DataBaseImpl.getLength = 9+4*nat(max(dbT)/4-1/4)+6*nat(-fId/2+max(dbT)/2-2)
+ UB for Node.getLength = 14+4*nat(max(dbT)/4-1/4)+6*nat(-fId/2+max(dbT)/2-2)
+ UB for DataBaseImpl.getFile = 5+4*nat(max(dbT)/4-1/4)
+ UB for Node.getPack = 17+4*nat(max(dbT)/4-1/4)+9*nat(pNbr)
+ UB for Node.reqFile = 0
- UB for Node.run2 = 85+nat(max(myNeighbors)/2-1/2)* (40+nat(max(dbT)/4-1/4)* (12+8*c(maximize_failed))+5*nat(max(myNeighbors)/2-1/2))+nat(max(myNeighbors)/4-1/4)* (15+7*nat(max(myNeighbors)/2-5/2))+7*nat(max(myNeighbors)/2-5/2)
+ UB for Main.main = 0


Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DataBaseImpl.init
	RG: 2
	OC: 2
	
Node.init
	RG: 7
	OC: 7
	
Node.setAdmin
	RG: 3
	OC: 3
	
OurTopology.init
	RG: 5
	OC: 3
	
OurTopology.getNeighbors
	RG: 42
	OC: 42
	
DataBaseImpl.storeFile
	RG: 5
	OC: 5
	
DataBaseImpl.getLength
	RG: 16+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
	OC: 9+4*nat(max(dbT)/4-1/4)+6*nat(-fId/2+max(dbT)/2-2)
	
Node.getLength
	RG: 21+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
	OC: 14+4*nat(max(dbT)/4-1/4)+6*nat(-fId/2+max(dbT)/2-2)
	
DataBaseImpl.getFile <-- It's possible
	RG: 8+nat(max(dbT)/4-1/4)
	OC: 5+4*nat(max(dbT)/4-1/4)
	
Node.getPack
	RG: 25+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)
	OC: 17+4*nat(max(dbT)/4-1/4)+9*nat(pNbr)
	
Node.reqFile ¿¿¿???
	RG: 75+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)
	OC: 0

Main.main ¿¿¿???
	RG: 1055+2*nat(nruns)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)+3*nat(max(file))+4*nat(max(file)-1)+nat(max(dbT)/4-1/4)+2*nat(max(dbT)/2-min(file)/2-2)+nat(max(dbT)/4-1/4)+6*nat(max(myNeighbors)/4-5/4)+3*nat(max(catalog)/2-5/2)+3*nat(max(catalog)/2-5/2)+8*nat(max(myNeighbors)/2-1/2)+nat(max(myNeighbors)/2-3/2)+2*nat(max(dbT)/4-1/4)
	OC: 0


================================================================================
Running1
================================================================================

RELY-GUARANTEE
--------------
UB for TaskQueue.addTask: 14+nat(max(pending)/2-3/2)
UB for TaskQueue.addTasks: 29+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
UB for ProcC.startTask: 2
UB for TaskQueue.consumeAsync: 32+4*nat(max(pending)/2-1/2)+3*nat(ps/2-1/2)
UB for TaskQueue.init: 2
UB for Main.main: 69+4*nat(max(pending)/2-1/2)+3*nat(ps/2-1/2)+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)


ORIGINAL COST
-------------
['TaskQueue.addTask', 'TaskQueue.addTasks', 'ProcC.startTask', 'TaskQueue.consumeAsync', 'TaskQueue.init', 'Main.main']

- UB for 'TaskQueue.addTask'(this,tk) = 10+5*c(maximize_failed)
- UB for 'TaskQueue.addTasks'(this,list) = 6+nat(list/2-1/2)* (22+5*c(maximize_failed))
+ UB for 'ProcC.startTask'(this,tk) = 2
- UB for 'TaskQueue.consumeAsync'(this,ps) = 7+c(maximize_failed)* (19+13*nat(ps/2-1/2))
+ UB for 'TaskQueue.init'(this) = 2
- UB for 'Main.main'(this,l,ps) = 22+nat(l/2-1/2)* (22+5*c(maximize_failed))+c(maximize_failed)* (19+13*nat(ps/2-1/2))


ORIGINAL COST WITH ANNOTATIONS
------------------------------
+ UB for TaskQueue.addTask = 10+5*nat(max(pending)/2-1/2)
+ UB for TaskQueue.addTasks = 6+nat(list/2-1/2)* (22+5*nat(max(pending)/2-1/2))
+ UB for ProcC.startTask = 2
+ UB for TaskQueue.consumeAsync = 7+nat(max(pending)/2-1/2)* (19+13*nat(ps/2-1/2))
+ UB for TaskQueue.init = 2
+ UB for Main.main = 22+nat(l/2-1/2)* (22+5*nat(max(pending)/2-1/2))+nat(max(pending)/2-1/2)* (19+13*nat(ps/2-1/2))


Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TaskQueue.addTask <-- It's possible
	RG: 14+nat(max(pending)/2-3/2)
	OC: 10+5*nat(max(pending)/2-1/2)
	
TaskQueue.addTasks
	RG: 29+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
	OC: 6+nat(list/2-1/2)* (22+5*nat(max(pending)/2-1/2))
	
ProcC.startTask
	RG: 2
	OC: 2
	
TaskQueue.consumeAsync <-- It's possible
	RG: 32+4*nat(max(pending)/2-1/2)+3*nat(ps/2-1/2)
	OC: 7+nat(max(pending)/2-1/2)* (19+13*nat(ps/2-1/2))
	
TaskQueue.init
	RG: 2
	OC: 2
	
Main.main <-- It's possible
	RG: 69+4*nat(max(pending)/2-1/2)+3*nat(ps/2-1/2)+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
	OC: 22+nat(l/2-1/2)* (22+5*nat(max(pending)/2-1/2))+nat(max(pending)/2-1/2)* (19+13*nat(ps/2-1/2))




================================================================================
Running2
================================================================================

RELY-GUARANTEE
--------------
UB for TaskQueue.addTask: 14+nat(max(pending)/2-3/2)
UB for TaskQueue.addTasks: 29+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
UB for ProcC.startTask: 2
UB for TaskQueue.consumeSync: 24+4*nat(max(pending)/2-1/2)
UB for TaskQueue.init: 2
UB for Main.main: 62+4*nat(max(pending)/2-1/2)+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)


ORIGINAL COST
-------------
['TaskQueue.addTask', 'TaskQueue.addTasks', 'ProcC.startTask', 'TaskQueue.consumeSync', 'TaskQueue.init', 'Main.main']

- UB for 'TaskQueue.addTask'(this,tk) = 10+5*c(maximize_failed)
- UB for 'TaskQueue.addTasks'(this,list) = 6+nat(list/2-1/2)* (22+5*c(maximize_failed))
+ UB for 'ProcC.startTask'(this,tk) = 2
- UB for 'TaskQueue.consumeSync'(this,ps) = 3+c(failed(no_rf,[scc=10,cr=entrywhile_1/3]))
+ UB for 'TaskQueue.init'(this) = 2
- UB for 'Main.main'(this,l,ps) = 19+nat(l/2-1/2)* (22+5*c(maximize_failed))+c(failed(no_rf,[scc=10,cr=entrywhile_1/3]))


ORIGINAL COST WITH ANNOTATIONS (include a [old(pending) == pending])
------------------------------
+ UB for TaskQueue.addTask = 10+5*nat(max(pending)/2-1/2)
+ UB for TaskQueue.addTasks = 6+nat(list/2-1/2)* (22+5*nat(max(pending)/2-1/2))
+ UB for ProcC.startTask = 2
+ UB for TaskQueue.consumeSync = 7+21*nat(max(pending)/2-1/2)
+ UB for TaskQueue.init = 2
+ UB for Main.main = 23+nat(l/2-1/2)* (22+5*nat(max(pending)/2-1/2))+21*nat(max(pending)/2-1/2)


Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TaskQueue.addTask <-- It's possible
	RG: 14+nat(max(pending)/2-3/2)
	OC: 10+5*nat(max(pending)/2-1/2)
	
TaskQueue.addTasks
	RG: 29+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
	OC: 6+nat(list/2-1/2)* (22+5*nat(max(pending)/2-1/2))
	
ProcC.startTask
	RG: 2
	OC: 2
	
TaskQueue.consumeSync <-- It's possible
	RG: 24+4*nat(max(pending)/2-1/2)
	OC: 7+21*nat(max(pending)/2-1/2)
	
TaskQueue.init: 
	RG: 2
	OC: 2
	
Main.main <-- It's possible
	RG: 62+4*nat(max(pending)/2-1/2)+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
	OC: 23+nat(l/2-1/2)* (22+5*nat(max(pending)/2-1/2))+21*nat(max(pending)/2-1/2)


================================================================================
Running3
================================================================================

RELY-GUARANTEE
--------------
UB for TaskQueue.addTask: 14+nat(max(pending)/2-3/2)
UB for TaskQueue.addTasks: 29+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
UB for ProcC.startTask: 2
UB for TaskQueue.consumeSync: 24+4*nat(max(pending)/2-1/2)* (1+nat(l/2-1/2))
UB for TaskQueue.init: 2
UB for Main.main: 61+4*nat(max(pending)/2-1/2)* (1+nat(l/2-1/2))+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)


ORIGINAL COST
-------------
['TaskQueue.addTask', 'TaskQueue.addTasks', 'ProcC.startTask', 'TaskQueue.consumeSync', 'TaskQueue.init', 'Main.main']

- UB for 'TaskQueue.addTask'(this,tk) = 10+5*c(maximize_failed)
- UB for 'TaskQueue.addTasks'(this,list) = 6+nat(list/2-1/2)* (22+5*c(maximize_failed))
+ UB for 'ProcC.startTask'(this,tk) = 2
- UB for 'TaskQueue.consumeSync'(this,ps) = 3+c(failed(no_rf,[scc=10,cr=entrywhile_1/3]))
+ UB for 'TaskQueue.init'(this) = 2
- UB for 'Main.main'(this,l,ps) = 18+nat(l/2-1/2)* (22+5*c(maximize_failed))+c(failed(no_rf,[scc=10,cr=entrywhile_1/3]))


ORIGINAL COST WITH ANNOTATIONS (included a [old(pending) == pending] that is not true)
------------------------------
+ UB for TaskQueue.addTask = 10+5*nat(max(pending)/2-1/2)
+ UB for TaskQueue.addTasks = 6+nat(list/2-1/2)* (22+5*nat(max(pending)/2-1/2))
+ UB for ProcC.startTask = 2
+ UB for TaskQueue.consumeSync = 7+21*nat(max(pending)/2-1/2)
+ UB for TaskQueue.init = 2
+ UB for Main.main = 22+nat(l/2-1/2)* (22+5*nat(max(pending)/2-1/2))+21*nat(max(pending)/2-1/2)


Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TaskQueue.addTask <-- It's possible
	RG: 14+nat(max(pending)/2-3/2)
	OC: 10+5*nat(max(pending)/2-1/2)
	
TaskQueue.addTasks
	RG: 29+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
	OC: 6+nat(list/2-1/2)* (22+5*nat(max(pending)/2-1/2))
	
ProcC.startTask
	RG: 2
	OC: 2
	
TaskQueue.consumeSync
	RG: 24+4*nat(max(pending)/2-1/2)* (1+nat(l/2-1/2))
	OC:	7+21*nat(max(pending)/2-1/2)
	
TaskQueue.init
	RG: 2
	OC: 2
	
Main.main <-- It's possible
	RG: 61+4*nat(max(pending)/2-1/2)* (1+nat(l/2-1/2))+3*nat(l/2-1/2)+nat(max(pending)/2-3/2)
	OC: 22+nat(l/2-1/2)* (22+5*nat(max(pending)/2-1/2))+21*nat(max(pending)/2-1/2)


================================================================================
Interleavings
================================================================================

RELY-GUARANTEE
--------------
UB for A.init: 2
UB for A.g: 2
UB for A.m1: 16+4*nat(max(f))* (1+nat(x))
UB for A.m2: 14+3*nat(x)
UB for A.m3: 17+3*nat(y)
UB for Main.main: 56+3*nat(y)+3*nat(x)+4*nat(max(f))* (1+nat(x))

ORIGINAL COST
-------------
['A.init','A.g','A.m1','A.m2','A.m3','Main.main']

+ UB for 'A.init'(this) = 2
+ UB for 'A.g'(this) = 2
- UB for 'A.m1'(this) = 3+c(failed(no_rf,[scc=1,cr=entrywhile_0/3]))
+ UB for 'A.m2'(this,m) = 6+11*nat(m)
+ UB for 'A.m3'(this,n) = 6+14*nat(n)
- UB for 'Main.main'(this,x,y) = 25+c(failed(no_rf,[scc=2,cr=entrywhile_0/3]))+11*nat(x)+14*nat(y)

ORIGINAL COST WITH ANNOTATIONS (included a [old(f) == f] that is not true)
------------------------------
+ UB for A.init = 2
+ UB for A.g = 2
+ UB for A.m1 = 7+13*nat(max(f))
+ UB for A.m2 = 6+11*nat(m)
+ UB for A.m3 = 6+14*nat(n)
+ UB for Main.main = 29+13*nat(max(f))+11*nat(x)+14*nat(y)

Comparison Rely-Guarantee vs. Original Cost (annotated)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A.init
	RG: 2
	OC: 2

A.g
	RG: 2
	OC: 2
	
A.m1
	RG: 16+4*nat(max(f))* (1+nat(x))
	OC: 7+13*nat(max(f))
	
A.m2
	RG: 14+3*nat(x)
	OC: 6+11*nat(m)
	
A.m3
	RG: 17+3*nat(y)
	OC: 6+14*nat(n)
	
Main.main <-- It's possible
	RG: 56+3*nat(y)+3*nat(x)+4*nat(max(f))* (1+nat(x))
	OC: 29+13*nat(max(f))+11*nat(x)+14*nat(y)
