// Creation of a sorted pipe of nodes

module PipeSort;
import * from ABS.StdLib;

interface FeederInt{
    Unit feedIter(List<Int> list);
}

interface NodeInt{
    Unit push(Int val);
}

interface MainInt{
    Unit main();
}

class Feeder (NodeInt first) implements FeederInt {

    Unit feedIter(List<Int> list){
        while (isEmpty(list) == False) {
            first!push(head(list));
            list = tail(list);
	    }
    }

}

class Node implements NodeInt{
    NodeInt next = null;
    Int myval = 0;
    Bool first = True;

    Unit push(Int val){
	    if (first == True) {
	        myval = val;
	        first = False;
	    } else {
	        if (next == null) 
	            next = new local  Node();
	        if (val >= myval) 
	            next!push(val);
	        else { //val < myval
		        next!push(myval);
                myval = val;
            }
        }
    }
}

class Main implements MainInt{
    Unit main(){
        NodeInt first = new local  Node();
        FeederInt feeder = new local  Feeder(first);
        feeder!feedIter(list[7,11,5]);
    }
}
