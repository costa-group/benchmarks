// Hungry Birds problem from
// "Combining Static Analysis and Testing for Deadlock Detection", iFM'16
module Paper_dead2;

interface Baby_Bird{
    Unit eat(Parent_Bird par);
}
interface Parent_Bird{
    Unit fillDish(Baby_Bird baby);
}

interface Dish_int{
   Int num();
   Unit dec();
   Unit refill();
}

class Parent(Dish_int dish) implements Parent_Bird{
  Unit fillDish(Baby_Bird baby){
    Fut<Unit> f = dish!refill();
    f.get;
    f = baby!eat(this);
    f.get;
  }
}
class Dish(Int n) implements Dish_int{
   Int num(){ return n;}
   Unit dec(){ n = n-1; }
   Unit refill(){ n = 10; }
}

class Baby(Dish_int dish) implements Baby_Bird{
    Unit eat(Parent_Bird par){
        Fut<Int> f = dish!num();
        Int n = f.get;
        if(n>0){
           dish!dec();
        } else {
           Fut<Unit> f2 = par!fillDish(this);
           f2.get;
        }
    }
}

interface MainI{
    Unit main(Int n_dish, Int num_babies);
}

class Main implements MainI{

    Unit main(Int n_dish, Int num_babies){
        Dish_int d = new local  Dish(n_dish);
        Parent_Bird parent = new local  Parent(d);
        Int i = 0;
        while(i < num_babies){
            Baby_Bird baby = new local  Baby(d);
            baby!eat(parent);
            i = i + 1;
        }
    }
}
