module Bound8;

interface A{
  Unit f1(Int max);
  Unit h();
  Unit g();
}

class AImpl(Int field, Int tope) implements A {

  Unit f1( Int max ){
    Int n = tope;
    suspend;
    while( n < max ){
      n = n + 1;
      field = 100;
    }
  }
  
  Unit h()
  {
    this ! f1( tope );
  }
  
  Unit g(){
    while (field > 0) {
  	  field = field - 1;
 	  	suspend;
  	}
  }
}

{
  A q = new local AImpl(100,200);

  Fut<Unit> f1 = q ! f1(10);
  //Fut<Unit> f2 = q ! h(); //Calls f1(200)
  //Fut<Unit> f3 = q ! g();
  // I'd like some invariant saying that the argumtn of f1 is max(10, max_tope)
  // However, niter(2,[],Ans) fails because the maximization of the loop inside f1 fails
  // for the RF = rf(entrywhile_0(_G5152, _G5153, _G5154, _G5155, _G5156), nat(1*_G5153+ -1*_G5154))
  // (entrywhile_0 has 3 arguments and 2 fields)
}
