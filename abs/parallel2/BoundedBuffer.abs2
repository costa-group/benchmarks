
/*
 * A working version of a program with two producers and 
 * two consumers comunicating via a shared bounded-buffer
 *
 */

module BoundedBuffer;
import * from ABS.StdLib;

type Data = Int ;
//type Buffer = DataList
data DataList = DataNil | ConsData(Data, DataList) ;

def Data dataHead(DataList dl) = case dl { ConsData(d,l) => d ; };  
def DataList dataTail(DataList dl) = case dl { ConsData(d,l) => l ; }; 

def DataList appendData(Data d, DataList list)
  = concat(list, ConsData(d,DataNil));

def DataList concat(DataList l1 , DataList l2) = 
case l1 { 
    DataNil => l2 ; 
    ConsData(hd,tl) => ConsData(hd, concat(tl,l2)) ; 
};
    
interface Buffer {

    //Unit init();
    Unit append(Data d);
    Data remove();
}

interface Consumer {
    Unit loop(Data d);
    Unit loop2(Data d);
} 

interface Producer {
    Unit loop(Data d);
    Unit loop2(Data d);
}


class BoundedBuffer (Int size) implements Buffer {
    
    //A bounded buffer
    DataList buffer = DataNil; 
    Int n = 0;

	[buffer <= max(size)]
    Unit append(Data d){
    	[old(size) == size]
        await (n < size) ; 
		buffer = concat(buffer,ConsData(d,DataNil));
        n = n + 1 ; 
		Int method_end = 0;
    }
    
    Data remove() {
        Data d = 10;
        DataList buffer2 = DataNil; 
        await n > 0 ; 
        d = dataHead(buffer);
        buffer2 = dataTail(buffer);
        buffer = buffer2;
        n = n - 1 ; 
		Int method_end = 0;
        return d ; 
    }
}

class ProducerImpl (Buffer b) implements Producer {
    
    Unit loop(Data d) {
       while(d > 0) {
       	b!append(d);
       	d = d - 1;
       }
	   Int method_end = 0;
    }

    Unit loop2 (Data d) {
       while(d > 0) {
       	b!append(d);
       	d = d - 1;
       }
       Int method_end = 0;
    }
}

class ConsumerImpl (Buffer b) implements Consumer {
    
    Unit loop(Data d) {
       while(d > 0) {
        b!remove();
       	d = d - 1;
       }
		Int method_end = 0;
    }
    Unit loop2(Data d) {
       while(d > 0) {
        b!remove();
       	d = d - 1;
       }
		Int method_end = 0;
    }
}

class Main () {
	Unit main2(Int nprod, Int mcons, Int size, Int nreq, Int mreq) {
        Buffer buff;
	    buff = new BoundedBuffer(size); 
        while(nprod > 0) {
		    Producer p;
		    p = new local ProducerImpl(buff);
		    p!loop(nreq);
        	nprod = nprod - 1;
        }
        while(mcons > 0) {
		    Consumer c;  
	    	c = new ConsumerImpl(buff);
        	c!loop(mreq);
        	mcons = mcons - 1;
        }
		//Int method_end = 0;
	}
	
	Unit main (Int nreq, Int mreq) {
		Buffer buff;
	    Producer p1;
	    Producer p2;
	    Producer p3;
	    Consumer c1;
	    Consumer c2;  
	    Consumer c3;  
	    buff = new BoundedBuffer(10); 
	    p1 = new ProducerImpl(buff);   
	    p2 = new ProducerImpl(buff); 
	    c1 = new ConsumerImpl(buff);
	    c2 = new ConsumerImpl(buff);
	    p1!loop(nreq);
	    p2!loop(mreq);
	    c1!loop(mreq);
	    c2!loop(nreq);
	    Int method_end = 0;
	}
}

{
    Buffer buff;
    Producer p1;
    Producer p2;
    Consumer c1;
    Consumer c2;  
    buff = new BoundedBuffer(10); 
    p1 = new ProducerImpl(buff);   
    p2 = new ProducerImpl(buff); 
    c1 = new ConsumerImpl(buff);
    c2 = new ConsumerImpl(buff);
    p1!loop(5);
    p2!loop(5);
    c1!loop(10);
    c2!loop(10);
}


