module DeadLock;

interface A { 
    Unit initialize(B b);
    Unit p();
    C getX();
}

interface B { 
    Unit q();
    Unit go(A a);
}

interface C { 
    Unit r();
}

class Cimp implements C {
    Unit r() { 
	// ...
    }
}

class Bimp implements B {

    Unit go(A a) {
	Fut<C> f = a!getX();
	await f?;
	Fut<Unit> g = a!p();
	g.get;
	C x = f.get;
	x!r();
    }

    Unit q() {
	// ...
    }
}

class Aimp implements A {

    C x = null;

    Unit initialize(B b) {
      Int i=2;Int j=2;
 
   Fut<Unit> f = b!q();
   f.get;
   while ( i>0 ) {

        if(i==1){
	x = new Cimp();
        }
	i=i-1;
     }	
 

}

    C getX() {
	await x != null;
	return x;
    }

    Unit p() {
      // ...
    }

}

{
    A a=new Aimp();
    B b=new Bimp();
    a!initialize(b);
    b!go(a);
}
