module PriceList;
//import * from ABS.StdLib;

data Int;                       // builtin
data Bool = True | False;       // builtin

// Pairs
data Pair<A, B> = Pair(A, B); 
def A fst<A, B>(Pair<A, B> p) = case p { Pair(s, f) => s; };
def B snd<A, B>(Pair<A, B> p) = case p { Pair(s, f) => f; };

type ProductID = Int;
type Price = Int;

data Product = ConsProduct(ProductID,Price) | NoProduct;
data PriceList = EmptyPriceList | ConsPriceList(Product,PriceList);

def Int plsize(PriceList l) = 
    case l { 
	EmptyPriceList => 0 ; 
        ConsPriceList(h, t) => 1 + plsize(t); 
    };

def Product plnth(PriceList l, Int n) =
    case l {
	EmptyPriceList => NoProduct;
	ConsPriceList(h,t) => case n { 1 => h ; _ => plnth(t, n-1); }; 
    };

def Bool plcontains(PriceList l, Product e) =
 case l {
     EmptyPriceList => False;
   ConsPriceList(e, _) => True;
   ConsPriceList(_, xl) => plcontains(xl, e);
 };

def PriceList update(PriceList l1, Product p) =
 case p {
     NoProduct => l1;
     ConsProduct(pId,pPrice) =>  
         case l1 { 
	     EmptyPriceList => l1; 
	     ConsPriceList(ConsProduct(qId,qPrice), tail) => 
                 case qId {
                     pId => ConsPriceList(p, tail);
		     _ => ConsPriceList(ConsProduct(qId,qPrice),update(tail,p));
		 };
	};
 };

def PriceList add(PriceList l1, Product p) =
 case l1 { 
     EmptyPriceList => ConsPriceList(p,EmptyPriceList); 
     ConsPriceList(head, tail) =>  ConsPriceList(head, add(tail, p)); 
 };

def PriceList loop(PriceList l1, PriceList l2, Int i) =
    let (Int n)=plsize(l2) in
      case (i <= n) {
        True => let (Product p) = plnth(l2,i) in
	          case plcontains(l2,p) {
		      True => loop(update(l1,p),l2,i+1);
		      False => loop(add(l1,p),l2,i+1);
		  };
        False => l1;
      };
    

def PriceList updatePrices (PriceList l, PriceList nl) =
    let (Int i)=1 in loop (l, nl, i);


