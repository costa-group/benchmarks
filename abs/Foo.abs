module Foo;
import * from ABS.StdLib;
import * from ABS.DC;

data A = Emma | Papa(A);

def A raul1(A a) = a ;

def A raul2<A>(A a) = a ;

data Nat = Zero | Suc(Nat) ;

data P = P(Nat,Nat) ;

def Int foo(Pair<Int,Int> p,Int n) =
    case p { 
	Pair(n,_) => 1;
	Pair(_,_) => 2;
    };

def Int foo2(List<Bool> p) = 
    case p { 
	Nil => 0;
	Cons(_,_) => 1;
    };

def Int strTest1(String s1) = strlen(s1);

def String strTest2(String s1,Int n,Int l) = substr(s1,n,l);

def String strTest3(String s1,String s2) = 
case s1{
    "a" => "none";
    _ => s1 + s2;
};

def String myIntToString(Int n) =
  case n {
    0 => "0"; 1 => "1"; 2 => "2"; 3 => "3"; 4 => "4";
    5 => "5"; 6 => "6"; 7 => "7"; 8 => "8"; 9 => "9";
  };


interface Foo {
    Unit setF1(Int n);
    Int m1(Int n);
    Unit m2();
    Int m6();
    Unit m7(Foo o2);
    Unit m8(Int n);
}

class FooImp implements Foo {
    Int f1 = 0;
    Int f2 = 1;
    A fa = Emma;
    Foo ff;
    String id = "";

    Unit setF1(Int n){
	f1 = n;
    }
    
    //[ignore]
    //[ignore][ub(n,3*n)]
    Int m1(Int n){
	//Fut<Unit> fut = this!m2();
	//fut.get;
	id = myIntToString(4);
	return f1 + f2 + n;
    }

    Unit m2(){
	fa = Papa(Emma);
	fa = Papa(fa);
	ff = new FooImp();
	f1 = this.m1(f2);
    }

    Unit m3(){
	if (f1 != f2) f1 = f2;
	else f1 = 11;
    }

    Unit m4(Foo o1,Foo o2){
	if (o1 != null) o2 = o1;
	else {
	    f1 = o2.m1(5);
	    //Fut<Int> fut;
	    //fut = o2!m1(5);
	    //if (o2 == this) await fut?;
	    //f1 = fut.get;
	}
    }

    Int m5(){
	Int r = 0;
	if (f1 == 0){
	    Int x = 1;
	    if (f2 == 0){
		r = x-1;
		Int y = 0;
		y = 0;
	    }
	    else{
		r = x;
	    }
	} else r = 2;
	return r;
    }

    Int m6(){
	Int r = 0;
	if (f1 == 0){
	    //Fut<Int> f;
	    Foo o = new FooImp();
	    //f = o!m1(5);
	    //await f?;
	    //Int n = f.get;
	    Int n = await o!m1(5);
	    r = n + f1;
	} else r = 1;
	return r;
    }
    
    Unit m7(Foo o2){
	this!m8(f1);
	this!m8(f2);
    }

    Unit m8(Int n){
	while (n > 0 && f2 >= 0){
	    //f2 = f2 + 1;
	    Int u = 1;
	    n = n - 1;
	}
    }

}

{
/*    Map<Int,Int> map = InsertAssoc(Pair(1,10),InsertAssoc(Pair(2,20),InsertAssoc(Pair(0,0),EmptyMap)));
    Maybe<Int> vm = lookup(map,2);
    Int v = fromJust(vm);
    Foo o = new FooImp();
    o.setF1(v);*/
    Foo o = new FooImp();
    Int m = random(5);
    DeploymentComponent dc = new DeploymentComponent(myIntToString(m), EmptyMap);	
    Int n = await o!m1(10);
}
