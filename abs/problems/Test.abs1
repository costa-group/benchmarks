module Test;

import * from ABS.StdLib;


class CC {

	Int kkk = 0;
    List<Int> f = Nil;
    
	// costabs mixed the elements of the pair and both of them are joined to get the 
	// nat expression.
    //
	// costabs problems/Test.abs -entries CC.mmm -size_abst typed_norms -typed_norm_inference no
	// UB for 'CC.mmm'(this_1,p_1,p_2) = 14+6*nat(3*p_2)
	//
	// Now, the result without typed norms
	// costabs problems/Test.abs -entries CC.mmm
	// UB for 'CC.mmm'(this,p) = 14+6*nat(3*p-6)
	
	Unit mmm (Pair<Int,Int> p) {
		Int j = fst(p);
		Int i = snd(p);
		Int k = i + i + j;
		while (k > 0) {
			k = k - 1;
		}
	}

	// As before, even for data structures, costabs mixed both elements of the pair
	// costabs problems/Test.abs -entries CC.mlist -size_abst typed_norms -typed_norm_inference no
	// UB for 'CC.mlist'(this_1,p_1,p_2,p_3) = 17+7*nat(p_2-1)+7*nat(p_2-1)
	// 
	// Now, the result without typed norms
	// UB for 'CC.mlist'(this,p) = 17+7*nat(p/2-3/2)+7*nat(p/2-3/2)
	
	Unit mlist (Pair<List<Int>,List<Int>> p) {
		List<Int> i = fst(p);
		List<Int> j = snd(p);
		Int k = 0;
		while (i != Nil) {
			i = tail(i);
		}
		while (j != Nil) {
			j = tail(j);
		}
	}
	
	
	// With typed norms, maximization fails. 
	// costabs problems/Test.abs -entries CC.pp -size_abst typed_norms -typed_norm_inference no
	// UB for 'CC.pp'(this_1) = 7+9*c(maximize_failed)
	// 
	// Without typed norms it works:
	// UB for 'CC.pp'(this,max(kkk)) = 7+9*nat(max(kkk))
	[kkk <= max(kkk)]
	Unit pp () {
		while (kkk > 0) {
			kkk = kkk - 1;
		}
	}

	// As before, maximization fails for data structure fields
	// costabs problems/Test.abs -entries CC.ppp -size_abst typed_norms -typed_norm_inference no 
	// UB for 'CC.ppp'(this_1) = 7+10*c(maximize_failed)
	
    [f <= max(f)]
    Unit ppp () {
        while(f != Nil) {
            f = tail(f);
        }
    }


    // With parameters, using typed norms it works.
    // costabs problems/Test.abs -entries CC.oooo -size_abst typed_norms -typed_norm_inference no 
    // UB for 'CC.oooo'(this_1,f2_1,f2_2) = 6+7*nat(f2_1-1)
    Unit oooo (List<Int> f2) {
        while(f2 != Nil) {
            f2 = tail(f2);
        }
    }


    	// if with the emptySet fails and it  
	// if_0(11,l(this),[s(0),l(a),l(ss),l(w)],[s(1)],[]) => 
    //     eq(s(0),'True'),
    // costabs problems/Test.abs -entries CC.test2
    // UB for 'CC.test2'(this,a,ss) = 19
    // 
    // It applies ss=0 (taken from the if condition, I guess) when pubs maximizes 
    // the expression botton-up 
    //
    // SAMIR: Fixed, was a bug in the size analysis
    //
	Unit test2 (Int a, Set<Int> ss)  {
    	if (emptySet(ss)) {
  	   		a = 7;
		}	
		Int w = take(ss);
    	ss = remove(ss, w);
  	}
  	
  	// The treatment of "and" operations is no correct. 
    // costabs problems/Test.abs -entries CC.testand
	//
    // UB for 'CC.testand'(this,a,b) = 3+c(failed(no_rf,[scc=2,cr=entrywhile_0/3]))
    // 
  	// entrywhile_0([A,B,C],[D,E]) = 6 + gt([B,F],[G]) + gt([C,H],[I]) + and_op([G,I],[J]) + while_0([A,J,B,C],[D,E]) 
  	//        [F=0,H=0]
    // gt([A,B],[C]) = 0
    //	 [A-B>=1,C=1]
    // gt([A,B],[C]) = 0
    // 	 [A=<B,C=0]
    // while_0([A,B,C,D],[C,D]) = 1
    //   [B=0]
    // while_0([A,B,C,D],[E,F]) = 6 + entrywhile_0([A,G,H],[E,F])
    //   [B=1,I=1,G=C-I,J=1,H=D-J]
    //
  	Unit testand (Int a, Int b) {
  		while (a > 0 && b >0) {
  			a = a - 1; 
  			b = b - 1;
  		}
  	}
  	
  	// The treatment of "or" operations is no correct.
  	// costabs problems/Test.abs -entries CC.testor
  	// UB for 'CC.testor'(this,a,b) = 3+c(failed(no_rf,[scc=2,cr=entrywhile_0/3]))
  	//
  	// The rule that represents the while is:
  	// 
    // UB for 'CC.testand'(this,a,b) = 3+c(failed(no_rf,[scc=2,cr=entrywhile_0/3]))
    // 
    // entrywhile_0([A,B,C],[D,E]) = 6 + gt([B,F],[G]) + gt([C,H],[I]) + or([G,I],[J]) + while_0([A,J,B,C],[D,E])
    //     [F=0,H=0]
    // or([A,B],[C]) = 0
    //     [A=1,C=1]
    // or([A,B],[C]) = 0
    //     [A=0,C=B]
    // while_0([A,B,C,D],[C,D]) = 1
    //     [B=0]
    // while_0([A,B,C,D],[E,F]) = 6 + entrywhile_0([A,G,H],[E,F])
    //     [B=1,I=1,G=C-I,J=1,H=D-J]
    
  	Unit testor (Int a, Int b) {
  		while (a > 0 || b >0) {
  			a = a - 1; 
  			b = b - 1;
  		}
  	}
  	

}